Class
	name: #OSPlatform;
	superclass: #ClassObject;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #();
	classVariables: #(#Current );
	package: #'System-Platforms'.

Class OSPlatform >> startUp: resuming
[
	"Pharo is starting up. If this platform requires specific intialization, this is a great place to put it."

]

Class OSPlatform >> platformFamily
[
	"Returns a symbol specific to the platform family (MacOSX, Windows, Unix, RiscOS).	This may need to be extended if there are new platforms added or significant differences within a platform family arise (as was the case between MacOS 9 and X)."
self subclassResponsibility
]

Class OSPlatform >> shutDown: quitting
[
	"Pharo is shutting down. If this platform requires specific shutdown code, this is a great place to put it."

]

Class OSPlatform >> virtualKey: virtualKeyCode
[
^ self class virtualKey: virtualKeyCode
]

Metaclass
	name: #OSPlatform;
	instanceVariables: #().

Metaclass OSPlatform >> current
[
	"Answer the current platform"
^ Current
]

Metaclass OSPlatform >> platformSubtype
[
	"Return the subType of the platform we're running on"
^ self subtype
]

Metaclass OSPlatform >> subtype
[
	"Return the subType of the platform we're running on"
	"Smalltalk platformSubtype"
^ Smalltalk vm getSystemAttribute: 1003
]

Metaclass OSPlatform >> startUp: resuming
[
	"Determine the current platform.	Use the most specific (in terms of subclasses) platform available."
| platformClass |"Look for the matching platform class"platformClass := self determineActivePlatformStartingAt: self.platformClass ifNil: [ ^ self ].Current := platformClass new.Current startUp: resuming
]

Metaclass OSPlatform >> determineActivePlatformStartingAt: parentClass
[
	"Determine the current platform starting at parentClass.	This is a potentially recursive process as we want to determine the most specific (in terms of subclasses) platform available."
	"OSPlatform determineActivePlatformStartingAt: OSPlatform"
| platformClass |parentClass subclasses isEmpty	ifTrue: [ ^ parentClass ].	"Look for the matching platform class"platformClass := parentClass allSubclasses detect: [ :any | any isActivePlatform ] ifNone: [ nil ].	"Check if there is a more specific subclass"^ self determineActivePlatformStartingAt: platformClass
]

Metaclass OSPlatform >> isWin32
[
^ self platformName = 'Win32'
]

Metaclass OSPlatform >> version
[
	"Return the version number string of the platform we're running on"
	"OSPlatform osVersion"
^ (Smalltalk vm getSystemAttribute: 1002) asString
]

Metaclass OSPlatform >> isMacOS
[
^ self platformName = 'Mac OS'
]

Metaclass OSPlatform >> shutDown: quitting
[
	"The system is going down"
Current ifNotNil: [ Current shutDown: quitting ]
]

Metaclass OSPlatform >> platformName
[
	"Return the name of the platform we're running on"
^ Smalltalk vm getSystemAttribute: 1001
]

Metaclass OSPlatform >> initialize
[
	"Initialize the receiver"
	"OSPlatform initialize"
Smalltalk removeFromStartUpList: self.Smalltalk addToStartUpList: self after: Delay.Smalltalk removeFromShutDownList: self.Smalltalk addToShutDownList: self after: DisplayScreen.self startUp: true
]

Metaclass OSPlatform >> isX11
[
^ self isUnix and: [ self windowSystemName = 'X11' ]
]

Metaclass OSPlatform >> isUnix
[
^ self platformName = 'unix'
]

Metaclass OSPlatform >> isMacOSX
[
^ self isMacOS and: [ '10*' match: self version ]
]

Metaclass OSPlatform >> vmVersion
[
	"Return the version number string of the Virtual machine built"
	"OSPlatform vmVersion"
^ Smalltalk vm version
]

Metaclass OSPlatform >> isActivePlatform
[
	"Answer whether the receiver is the active platform"
^ false
]

Metaclass OSPlatform >> virtualKey: virtualKeyCode
[
	"Subclass responsibility to override if necessary"
^ nil
]

Metaclass OSPlatform >> windowSystemName
[
	"Return the name of the window system currently being used for display."
	"OSPlatform windowSystemName"
^ Smalltalk vm getSystemAttribute: 1005
]

