Class
	name: #NotFound;
	superclass: #ClassError;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#object );
	classVariables: #();
	package: #'Collections-Abstract'.

Class NotFound >> collection
[
	"Return the collection where something is not found in"
^ self signaler
]

Class NotFound >> collection: aCollection
[
	"Set the collection where something is not found in"
self signaler: aCollection
]

Class NotFound >> messageText
[
	"Overwritten to initialiaze the message text to a standard text if it has not yet been set"
^ messageText ifNil: [ messageText := self standardMessageText ]
]

Class NotFound >> object
[
	"Return the object that was not found"
^ object
]

Class NotFound >> object: anObject
[
	"Set the object that was not found"
object := anObject
]

Class NotFound >> standardMessageText
[
	"Generate a standard textual description"
^ String	streamContents: [ :stream | 		stream print: self object.		stream << ' not found in '.		stream print: self collection class ]
]

Metaclass
	name: #NotFound;
	instanceVariables: #().

Metaclass NotFound >> signalFor: anObject
[
	"Create and signal a NotFond exception for anObject in the default receiver."
^ self new	object: anObject;	signal
]

Metaclass NotFound >> signalFor: anObject in: aCollection
[
	"Create and signal a NotFond exception for anObject in aCollection."
^ self new	object: anObject;	collection: aCollection;	signal
]

