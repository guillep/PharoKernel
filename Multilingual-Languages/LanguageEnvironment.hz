Class
	name: #LanguageEnvironment;
	superclass: #ClassObject;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#id );
	classVariables: #(#KnownEnvironments #SystemConverterClass #FileNameConverterClass #Current #InputInterpreterClass #ClipboardInterpreterClass );
	package: #'Multilingual-Languages'.

Class LanguageEnvironment >> isoCountry
[
^ self localeID isoCountry
]

Class LanguageEnvironment >> isoLanguage
[
^ self localeID isoLanguage
]

Class LanguageEnvironment >> leadingChar
[
^ self class leadingChar
]

Class LanguageEnvironment >> localeID
[
^ id
]

Class LanguageEnvironment >> localeID: anID
[
id := anID
]

Metaclass
	name: #LanguageEnvironment;
	instanceVariables: #().

Metaclass LanguageEnvironment >> canBeGlobalVarInitial: char
[
^ Unicode canBeGlobalVarInitial: char
]

Metaclass LanguageEnvironment >> canBeNonGlobalVarInitial: char
[
^ Unicode canBeNonGlobalVarInitial: char
]

Metaclass LanguageEnvironment >> clearDefault
[
ClipboardInterpreterClass := nil.InputInterpreterClass := nil.SystemConverterClass := nil.FileNameConverterClass := nil
]

Metaclass LanguageEnvironment >> currentPlatform
[
^ Locale currentPlatform languageEnvironment
]

Metaclass LanguageEnvironment >> defaultFileNameConverter
[
FileNameConverterClass ifNil: [ FileNameConverterClass := self currentPlatform class fileNameConverterClass ].^ FileNameConverterClass new
]

Metaclass LanguageEnvironment >> defaultSystemConverter
[
SystemConverterClass ifNil: [ SystemConverterClass := self currentPlatform class systemConverterClass ].^ SystemConverterClass new
]

Metaclass LanguageEnvironment >> digitValueOf: char
[
	"Answer 0-9 if the receiver is $0-$9, 10-35 if it is $A-$Z, and < 0	otherwise. This is used to parse literal numbers of radix 2-36."
^ Unicode digitValueOf: char
]

Metaclass LanguageEnvironment >> fileNameConverterClass
[
^ UTF8TextConverter
]

Metaclass LanguageEnvironment >> initKnownEnvironments
[
	"LanguageEnvironment initKnownEnvironments"
| known |known := Dictionary new.self	allSubclassesDo: [ :subClass | 		subClass supportedLanguages			do: [ :language | 				| env id |				env := subClass new.				id := LocaleID isoString: language.				env localeID: id.				known at: id put: env ] ].^ known
]

Metaclass LanguageEnvironment >> initialize
[
	"LanguageEnvironment initialize"
Smalltalk addToStartUpList: LanguageEnvironment
]

Metaclass LanguageEnvironment >> isBreakableAt: index in: text
[
| char |char := text at: index.char = Character space	ifTrue: [ ^ true ].char = Character cr	ifTrue: [ ^ true ].^ false
]

Metaclass LanguageEnvironment >> isCharset
[
^ false
]

Metaclass LanguageEnvironment >> isDigit: char
[
^ Unicode isDigit: char
]

Metaclass LanguageEnvironment >> isLetter: char
[
^ Unicode isLetter: char
]

Metaclass LanguageEnvironment >> isLowercase: char
[
^ Unicode isLowercase: char
]

Metaclass LanguageEnvironment >> isUppercase: char
[
^ Unicode isUppercase: char
]

Metaclass LanguageEnvironment >> knownEnvironments
[
	"LanguageEnvironment knownEnvironments"
	"KnownEnvironments := nil"
^ KnownEnvironments ifNil: [ KnownEnvironments := self initKnownEnvironments ]
]

Metaclass LanguageEnvironment >> leadingChar
[
self subclassResponsibility.^ 0
]

Metaclass LanguageEnvironment >> localeChanged
[
self startUp
]

Metaclass LanguageEnvironment >> localeID: localeID
[
self knownEnvironments at: localeID ifPresent: [ :value | ^ value ].^ self knownEnvironments	at: (LocaleID isoLanguage: localeID isoLanguage)	ifAbsent: [ self localeID: (LocaleID isoLanguage: 'en') ]
]

Metaclass LanguageEnvironment >> resetKnownEnvironments
[
	"LanguageEnvironment resetKnownEnvironments"
KnownEnvironments := nil
]

Metaclass LanguageEnvironment >> scanSelector
[
^ #scanMultiCharactersFrom:to:in:rightX:stopConditions:kern:
]

Metaclass LanguageEnvironment >> startUp
[
self clearDefault
]

Metaclass LanguageEnvironment >> supportedLanguages
[
	"Return the languages that this class supports. 	Any translations for those languages will use this class as their environment."
self subclassResponsibility
]

Metaclass LanguageEnvironment >> systemConverterClass
[
self subclassResponsibility.^ Latin1TextConverter
]

