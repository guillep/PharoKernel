Class	name: #FileSystemResolver;	superclass: #ClassObject;	instanceSpecification: #(#pointers #words );	instanceVariables: #(#next );	classVariables: #();	package: #'FileSystem-Core-Implementation'.Class FileSystemResolver >> next[^ next]Class FileSystemResolver >> unknownOrigin: aSymbol[^ next ifNotNil: [ next resolve: aSymbol ]]Class FileSystemResolver >> canResolve: aSymbol[^ self supportedOrigins includes: aSymbol]Class FileSystemResolver >> supportedOrigins[^ #()]Class FileSystemResolver >> resolveString: aString[| decoded fs |decoded := (FilePath pathName: aString isEncoded: true) asSqueakPathName.fs := FileSystem disk.^ FileReference fileSystem: fs path: (fs pathFromString: decoded)]Class FileSystemResolver >> flushLocalCache[]Class FileSystemResolver >> addResolver: aResolver[next ifNil: [ next := aResolver ] ifNotNil: [ next addResolver: aResolver ]]Class FileSystemResolver >> flushCaches[self flushLocalCache.next ifNotNil: [ next flushCaches ]]Class FileSystemResolver >> resolve: aSymbol[^ (self canResolve: aSymbol)	ifTrue: [ self perform: aSymbol ]	ifFalse: [ self unknownOrigin: aSymbol ]]Metaclass	name: #FileSystemResolver;	instanceVariables: #().