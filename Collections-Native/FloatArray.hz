Class
	name: #FloatArray;
	superclass: #ClassArrayedCollection;
	instanceSpecification: #(#variable #words );
	instanceVariables: #();
	classVariables: #();
	package: #'Collections-Native'.

Class FloatArray >> = aFloatArray
[
	<primitive: 'primitiveEqual' module: 'FloatArrayPlugin'>
| length |aFloatArray class = self class	ifFalse: [ ^ false ].length := self size.length = aFloatArray size	ifFalse: [ ^ false ].1 to: self size do: [ :i | 	(self at: i) = (aFloatArray at: i)		ifFalse: [ ^ false ] ].^ true
]

Class FloatArray >> asFloatArray
[
^ self
]

Class FloatArray >> at: index
[
	<primitive: 'primitiveAt' module: 'FloatArrayPlugin'>
^ Float fromIEEE32Bit: (self basicAt: index)
]

Class FloatArray >> at: index put: value
[
	<primitive: 'primitiveAtPut' module: 'FloatArrayPlugin'>
value isFloat	ifTrue: [ self basicAt: index put: value asIEEE32BitWord ]	ifFalse: [ self at: index put: value asFloat ].^ value
]

Class FloatArray >> defaultElement
[
	"Return the default element of the receiver"
^ 0.0
]

Class FloatArray >> hash
[
	<primitive: 'primitiveHashArray' module: 'FloatArrayPlugin'>
| result |result := 0.1 to: self size do: [ :i | result := result + (self basicAt: i) ].^ result bitAnd: 16r1FFFFFFF
]

Class FloatArray >> primAddArray: floatArray
[
	<primitive: 'primitiveAddFloatArray' module: 'FloatArrayPlugin'>
1 to: self size do: [ :i | self at: i put: (self at: i) + (floatArray at: i) ]
]

Class FloatArray >> primAddScalar: scalarValue
[
	<primitive: 'primitiveAddScalar' module: 'FloatArrayPlugin'>
1 to: self size do: [ :i | self at: i put: (self at: i) + scalarValue ]
]

Class FloatArray >> primDivArray: floatArray
[
	<primitive: 'primitiveDivFloatArray' module: 'FloatArrayPlugin'>
1 to: self size do: [ :i | self at: i put: (self at: i) / (floatArray at: i) ]
]

Class FloatArray >> primDivScalar: scalarValue
[
	<primitive: 'primitiveDivScalar' module: 'FloatArrayPlugin'>
1 to: self size do: [ :i | self at: i put: (self at: i) / scalarValue ]
]

Class FloatArray >> primMulArray: floatArray
[
	<primitive: 'primitiveMulFloatArray' module: 'FloatArrayPlugin'>
1 to: self size do: [ :i | self at: i put: (self at: i) * (floatArray at: i) ]
]

Class FloatArray >> primMulScalar: scalarValue
[
	<primitive: 'primitiveMulScalar' module: 'FloatArrayPlugin'>
1 to: self size do: [ :i | self at: i put: (self at: i) * scalarValue ]
]

Class FloatArray >> primSubArray: floatArray
[
	<primitive: 'primitiveSubFloatArray' module: 'FloatArrayPlugin'>
1 to: self size do: [ :i | self at: i put: (self at: i) - (floatArray at: i) ]
]

Class FloatArray >> primSubScalar: scalarValue
[
	<primitive: 'primitiveSubScalar' module: 'FloatArrayPlugin'>
1 to: self size do: [ :i | self at: i put: (self at: i) - scalarValue ]
]

Class FloatArray >> replaceFrom: start to: stop with: replacement startingAt: repStart
[
	"Primitive. This destructively replaces elements from start to stop in the receiver starting at index, repStart, in the collection, replacement. Answer the receiver. Range checks are performed in the primitive only. Optional. See Object documentation whatIsAPrimitive."
	<primitive: 105>
super	replaceFrom: start	to: stop	with: replacement	startingAt: repStart
]

Class FloatArray >> sum
[
	<primitive: 'primitiveSum' module: 'FloatArrayPlugin'>
^ super sum
]

Metaclass
	name: #FloatArray;
	instanceVariables: #().

