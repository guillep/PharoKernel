Class	name: #AnnouncementSubscription;	superclass: #ClassObject;	instanceSpecification: #(#pointers #words );	instanceVariables: #(#announcer #announcementClass #subscriber #action );	classVariables: #();	package: #'Announcements-Core'.Class AnnouncementSubscription >> subscriber[^ subscriber]Class AnnouncementSubscription >> action: anObject[action := anObject]Class AnnouncementSubscription >> announcer[^ announcer]Class AnnouncementSubscription >> announcementClass: anObject[announcementClass := anObject]Class AnnouncementSubscription >> makeStrong[	" i am already strong. Do nothing "]Class AnnouncementSubscription >> subscriber: aSubscriber[subscriber := aSubscriber]Class AnnouncementSubscription >> announcer: anAnnouncer[announcer := anAnnouncer]Class AnnouncementSubscription >> deliver: anAnnouncement[	" deliver an announcement to receiver. In case of failure, it will be handled in separate process"^ (self handles: anAnnouncement class)	ifTrue: [ [ action cull: anAnnouncement cull: announcer ] on: UnhandledError fork: [ :ex | ex pass ] ]]Class AnnouncementSubscription >> makeWeak[action isBlock	ifTrue: [ self error: 'Not currently available due to missing ephemerons support' ].^ announcer	replace: self	with:		(WeakAnnouncementSubscription new			announcer: announcer;			action: action asWeakMessageSend;			subscriber: subscriber;			announcementClass: announcementClass)]Class AnnouncementSubscription >> announcementClass[^ announcementClass]Class AnnouncementSubscription >> action[^ action]Class AnnouncementSubscription >> valuable: aValuable[	"Used when subscriber should be extracted from valuable object"self action: aValuable.self subscriber: aValuable receiver]Class AnnouncementSubscription >> handles: anAnnouncementClass[^ announcementClass handles: anAnnouncementClass]Metaclass	name: #AnnouncementSubscription;	instanceVariables: #().