Class	name: #LegacyWeakSubscription;	superclass: #ClassWeakAnnouncementSubscription;	instanceSpecification: #(#variable #weak #pointers #words );	instanceVariables: #();	classVariables: #();	package: #'Announcements-Core'.Class LegacyWeakSubscription >> register[self weakRegistry add: self subscriber executor: self]Class LegacyWeakSubscription >> subscriber: anObject[self subscriber ifNotNil: [ self error: 'subscriber already set' ].self basicAt: 1 put: anObject.self register]Class LegacyWeakSubscription >> weakRegistry[^ WeakRegistry default]Class LegacyWeakSubscription >> unregister[| sub |sub := self subscriber.sub ifNotNil: [ self weakRegistry remove: sub ]]Class LegacyWeakSubscription >> makeStrong[| sub |sub := self subscriber.sub ifNil: [ ^ self error: 'Subscriber is nil, cannot make strong subscription' ].self unregister.^ self	becomeForward:		(AnnouncementSubscription new			announcer: announcer;			action: action asMessageSend;			subscriber: sub;			announcementClass: announcementClass)]Metaclass	name: #LegacyWeakSubscription;	instanceVariables: #().