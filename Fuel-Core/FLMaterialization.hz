Class
	name: #FLMaterialization;
	superclass: #ClassObject;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#clusterCount #clusters #root #decoder #header );
	classVariables: #();
	package: #'Fuel-Core'.

Class FLMaterialization >> additionalObjectAt: aKey
[
^ header additionalObjectAt: aKey
]

Class FLMaterialization >> afterMaterializationStep
[
clusters do: [ :aCluster | aCluster afterMaterializationStepWith: decoder ]
]

Class FLMaterialization >> clusterInstancesStep
[
| aCluster |aCluster := decoder nextEncodedClusterClass newMaterializing.aCluster clusterMaterializeStepWith: decoder.aCluster materializeInstancesStepWith: decoder.self registerAll: aCluster objects.aCluster materializePostInstancesStepWith: decoder.clusters add: aCluster
]

Class FLMaterialization >> header: aHeader
[
header := aHeader
]

Class FLMaterialization >> headerStep
[
decoder decodeYourself.clusterCount := decoder nextEncodedPositiveInteger.clusters := OrderedCollection new: clusterCount.clusters resetTo: 1	"Hack that avoids OrderedCollection>>makeRoomAtLast"
]

Class FLMaterialization >> initializeWith: aDecoder
[
self initialize.decoder := aDecoder
]

Class FLMaterialization >> instancesStep
[
clusterCount timesRepeat: [ self clusterInstancesStep ]
]

Class FLMaterialization >> objects
[
	"Answer a collection with the materialized objects."
^ decoder objects
]

Class FLMaterialization >> referencesStep
[
clusters do: [ :aCluster | aCluster materializeReferencesStepWith: decoder ]
]

Class FLMaterialization >> registerAll: materializedObjects
[
decoder registerAll: materializedObjects
]

Class FLMaterialization >> root
[
^ root
]

Class FLMaterialization >> run
[
self headerStep.self instancesStep.self referencesStep.self trailerStep.self afterMaterializationStep
]

Class FLMaterialization >> trailerStep
[
root := decoder nextEncodedReference
]

Metaclass
	name: #FLMaterialization;
	instanceVariables: #().

Metaclass FLMaterialization >> with: aDecoder
[
^ self basicNew	initializeWith: aDecoder;	yourself
]

