Class
	name: #FLAnalyzer;
	superclass: #ClassObject;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#internalClasses #pluggableSubstitutions #globalMappersFactory #analysisFactory #generalMapperFactory #globalSymbols #internalMethods #globalMappers );
	classVariables: #();
	package: #'Fuel-Core'.

Class FLAnalyzer >> setDefaultAnalysis
[
analysisFactory := [ :anObject | (FLAnalysis newWith: self firstInMapperChain root: anObject)	run;	yourself ]
]

Class FLAnalyzer >> firstInMapperChain
[
^ self mappers first
]

Class FLAnalyzer >> considerGlobal: aSymbol
[
globalSymbols add: aSymbol
]

Class FLAnalyzer >> when: aCondition substituteBy: aFactory
[
pluggableSubstitutions add: aCondition -> aFactory
]

Class FLAnalyzer >> useLightMappers
[
globalMappersFactory := [ self lightGlobalMappers ].generalMapperFactory := [ FLLightGeneralMapper new ]
]

Class FLAnalyzer >> fuelAccept: aGeneralMapper
[
^ aGeneralMapper visitSubstitution: self by: nil
]

Class FLAnalyzer >> mappers
[
^ OrderedCollection new	addAll: self pluggableSubstitutionMappers;	addAll: self globalMappers;	add: self generalMapper;	reduceRight: [ :left :right | left next: right ];	yourself
]

Class FLAnalyzer >> globalSymbols
[
	"Answer the collection of symbols whose associations and values in Smalltalk globals will be considered as globals by Fuel."
^ globalSymbols
]

Class FLAnalyzer >> pluggableSubstitutionMappers
[
^ pluggableSubstitutions collect: [ :aLink | FLPluggableSubstitutionMapper when: aLink key substituteBy: aLink value ]
]

Class FLAnalyzer >> globalMappers
[
^ globalMappersFactory value
]

Class FLAnalyzer >> initialize
[
super initialize.self setDefaultAnalysis.self useLightMappers.pluggableSubstitutions := OrderedCollection new.internalClasses := IdentitySet new.internalMethods := IdentitySet new.globalSymbols := self class defaultGlobalSymbols asIdentitySet
]

Class FLAnalyzer >> generalMapper
[
^ generalMapperFactory value
]

Class FLAnalyzer >> lightGlobalMappers
[
^ globalSymbols isEmpty	ifTrue: [ #() ]	ifFalse: [ Array with: (FLLightGlobalMapper for: globalSymbols) ]
]

Class FLAnalyzer >> analysisFor: anObject
[
^ analysisFactory value: anObject
]

Metaclass
	name: #FLAnalyzer;
	instanceVariables: #().

Metaclass FLAnalyzer >> defaultGlobalSymbols
[
^ #(#Smalltalk #SourceFiles #Transcript #Undeclared #Display #TextConstants #ActiveWorld #ActiveHand #ActiveEvent #Sensor #Processor #ImageImports #SystemOrganization #World)	select: [ :each | Smalltalk globals includesKey: each ]
]

Metaclass FLAnalyzer >> newDefault
[
	"Returns an instance with default configuration."
^ self new
]

