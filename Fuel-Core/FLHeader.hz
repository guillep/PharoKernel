Class	name: #FLHeader;	superclass: #ClassObject;	instanceSpecification: #(#pointers #words );	instanceVariables: #(#preMaterializationActions #additionalObjects #postMaterializationActions #materialization );	classVariables: #();	package: #'Fuel-Core'.Class FLHeader >> at: key putAdditionalObject: anObject[	"This is useful if we want to attach objects to a package that will also be serialized. The way they are stored is key-value."additionalObjects at: key put: anObject]Class FLHeader >> addPostMaterializationAction: aCleanBlockClosure[	"The closure may (or not) have one parameter and it will be the materialization."aCleanBlockClosure isClean	ifFalse: [ 		self			error: 'Post materializaton actions have to be clean closures. For more details see method BlocKClosure >> #isClean' ].postMaterializationActions add: aCleanBlockClosure]Class FLHeader >> materialization: aMaterialization[	"This is just set once the materialization had happened"materialization := aMaterialization]Class FLHeader >> initialize[additionalObjects := IdentityDictionary new.preMaterializationActions := OrderedCollection new.postMaterializationActions := OrderedCollection new]Class FLHeader >> executePostMaterializationActions[postMaterializationActions do: [ :each | each cull: materialization ]]Class FLHeader >> executePreMaterializationActions[preMaterializationActions do: [ :each | each value ]]Class FLHeader >> addPreMaterializationAction: aCleanBlockClosure[aCleanBlockClosure isClean	ifFalse: [ self error: 'Pre materializaton actions have to be clean closures. For more details see method BlocKClosure >> #isClean' ].preMaterializationActions add: aCleanBlockClosure]Class FLHeader >> additionalObjectAt: key[^ additionalObjects at: key]Metaclass	name: #FLHeader;	instanceVariables: #().