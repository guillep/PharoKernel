Class
	name: #FLAnalysis;
	superclass: #ClassObject;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#objectStack #firstMapper #clusterization #root );
	classVariables: #();
	package: #'Fuel-Core'.

Class FLAnalysis >> clusterization
[
^ clusterization
]

Class FLAnalysis >> fuelAccept: aGeneralMapper
[
^ aGeneralMapper visitSubstitution: self by: nil
]

Class FLAnalysis >> initializeWith: aMapper root: anObject
[
self initialize.firstMapper := aMapper.aMapper analysis: self.root := anObject.objectStack := FLSimpleStack new.clusterization := FLClusterization new
]

Class FLAnalysis >> mapAndTrace: anObject
[
	"Map an object to its cluster. Trace its references."
firstMapper mapAndTrace: anObject
]

Class FLAnalysis >> run
[
objectStack push: root.[ objectStack isEmpty ] whileFalse: [ self mapAndTrace: objectStack pop ]
]

Class FLAnalysis >> trace: anObject
[
objectStack push: anObject
]

Metaclass
	name: #FLAnalysis;
	instanceVariables: #().

Metaclass FLAnalysis >> newWith: aMapper root: anObject
[
^ self basicNew	initializeWith: aMapper root: anObject;	yourself
]

