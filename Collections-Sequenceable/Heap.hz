Class
	name: #Heap;
	superclass: #ClassCollection;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#array #tally #sortBlock #indexUpdateBlock );
	classVariables: #();
	package: #'Collections-Sequenceable'.

Class Heap >> at: index put: newObject
[
	"Heap are not designed to be accessed sequentially.	Please consider using #add: instead."
self shouldNotImplement
]

Class Heap >> privateReverseSort
[
	"Arrange to have the array sorted in reverse order.	WARNING: this method breaks the heap invariants. It's up to the sender to restore them afterwards."
| oldTally |oldTally := tally.[ tally > 1 ]	whileTrue: [ 		array swap: 1 with: tally.		tally := tally - 1.		self downHeapSingle: 1 ].tally := oldTally
]

Class Heap >> upHeap: anIndex
[
	"Check the heap upwards for correctness starting at anIndex.	 Everything below anIndex is ok."
| value k kDiv2 tmp |anIndex = 0	ifTrue: [ ^ self ].k := anIndex.value := array at: anIndex.[ k > 1 and: [ self sorts: value before: (tmp := array at: (kDiv2 := k bitShift: -1)) ] ]	whileTrue: [ 		array at: k put: tmp.		self updateObjectIndex: k.		k := kDiv2 ].array at: k put: value.self updateObjectIndex: k
]

Class Heap >> do: aBlock
[
	"Evaluate aBlock with each of the receiver's elements as the argument."
1 to: tally do: [ :i | aBlock value: (array at: i) ]
]

Class Heap >> sortBlock: aBlock
[
sortBlock := aBlock.self reSort
]

Class Heap >> fullySort
[
	"Fully sort the heap.	This method preserves the heap invariants and can thus be sent safely"
self privateReverseSort.1 to: tally // 2 do: [ :i | array swap: i with: 1 + tally - i ]
]

Class Heap >> collect: aBlock
[
^ self collect: aBlock as: Array
]

Class Heap >> add: anObject
[
	"Include newObject as one of the receiver's elements. Answer newObject."
tally = array size	ifTrue: [ self grow ].array at: (tally := tally + 1) put: anObject.self updateObjectIndex: tally.self upHeap: tally.^ anObject
]

Class Heap >> setCollection: aCollection tally: newTally
[
array := aCollection.tally := newTally
]

Class Heap >> isHeap
[
^ true
]

Class Heap >> removeAll
[
array atAllPut: nil.tally := 0
]

Class Heap >> at: index
[
	"Heap are not designed to be accessed sequentially."
self shouldNotImplement
]

Class Heap >> postCopy
[
super postCopy.array := array copy
]

Class Heap >> updateObjectIndex: index
[
	"If indexUpdateBlock is not nil, notify the object at index of its new position in the heap array."
indexUpdateBlock ifNotNil: [ indexUpdateBlock value: (array at: index) value: index ]
]

Class Heap >> = anObject
[
	"Heap are considered equals only if they have same sort order and same elements."
self == anObject	ifTrue: [ ^ true ].anObject isHeap	ifFalse: [ ^ false ].sortBlock = anObject sortBlock	ifFalse: [ ^ false ].self size = anObject size	ifFalse: [ ^ false ].^ (self asArray sort: sortBlock) = (anObject asArray sort: sortBlock)
]

Class Heap >> sortBlock
[
^ sortBlock
]

Class Heap >> trim
[
	"Remove any empty slots in the receiver."
self growTo: self size
]

Class Heap >> isEmpty
[
	"Answer whether the receiver contains any elements."
^ tally = 0
]

Class Heap >> grow
[
	"Become larger."
self growTo: self size + self growSize
]

Class Heap >> setCollection: aCollection
[
array := aCollection.tally := 0
]

Class Heap >> growTo: newSize
[
	"Grow to the requested size."
| newArray |newArray := Array new: (newSize max: tally).newArray	replaceFrom: 1	to: array size	with: array	startingAt: 1.array := newArray
]

Class Heap >> downHeapSingle: anIndex
[
	"This version is optimized for the case when only one element in the receiver can be at a wrong position. It avoids one comparison at each node when travelling down the heap and checks the heap upwards after the element is at a bottom position. Since the probability for being at the bottom of the heap is much larger than for being somewhere in the middle this version should be faster."
| value k n j |anIndex = 0	ifTrue: [ ^ self ].n := tally bitShift: -1.k := anIndex.value := array at: anIndex.[ k <= n ]	whileTrue: [ 		j := k + k.	"use max(j,j+1)"		(j < tally and: [ self sorts: (array at: j + 1) before: (array at: j) ])			ifTrue: [ j := j + 1 ].		array at: k put: (array at: j).		self updateObjectIndex: k.	"and try again with j"		k := j ].array at: k put: value.self updateObjectIndex: k.self upHeap: k
]

Class Heap >> removeFirst
[
	"Remove the first element from the receiver"
self emptyCheck.^ self privateRemoveAt: 1
]

Class Heap >> growSize
[
	"Return the size by which the receiver should grow if there are no empty slots left."
^ array size max: 5
]

Class Heap >> indexUpdateBlock: aBlockOrNil
[
indexUpdateBlock := aBlockOrNil
]

Class Heap >> sorts: element1 before: element2
[
	"Return true if element1 should be sorted before element2.	This method defines the sort order in the receiver"
^ sortBlock == nil	ifTrue: [ element1 <= element2 ]	ifFalse: [ sortBlock value: element1 value: element2 ]
]

Class Heap >> select: aBlock
[
	"Evaluate aBlock with each of my elements as the argument. Collect into	a new collection like the receiver, only those elements for which aBlock	evaluates to true."
| newCollection |newCollection := self copyEmpty.self	do: [ :each | 		(aBlock value: each)			ifTrue: [ newCollection add: each ] ].^ newCollection
]

Class Heap >> downHeap: anIndex
[
	"Check the heap downwards for correctness starting at anIndex.	 Everything above (i.e. left of) anIndex is ok."
| value k n j |anIndex = 0	ifTrue: [ ^ self ].n := tally bitShift: -1.k := anIndex.value := array at: anIndex.[ k <= n ]	whileTrue: [ 		j := k + k.	"use max(j,j+1)"		(j < tally and: [ self sorts: (array at: j + 1) before: (array at: j) ])			ifTrue: [ j := j + 1 ].	"check if position k is ok"		(self sorts: value before: (array at: j))			ifTrue: [ 				"yes -> break loop"				n := k - 1 ]			ifFalse: [ 				"no -> make room at j by moving j-th element to k-th position"				array at: k put: (array at: j).				self updateObjectIndex: k.	"and try again with j"				k := j ] ].array at: k put: value.self updateObjectIndex: k
]

Class Heap >> privateRemoveAt: index
[
	"Remove the element at the given index and make sure the sorting order is okay"
| removed |removed := array at: index.array at: index put: (array at: tally).array at: tally put: nil.tally := tally - 1.index > tally	ifFalse: [ 		"Use #downHeapSingle: since only one element has been removed"		self downHeapSingle: index ].^ removed
]

Class Heap >> size
[
	"Answer how many elements the receiver contains."
^ tally
]

Class Heap >> array
[
^ array
]

Class Heap >> copyEmpty
[
	"Answer a copy of the receiver without any of the receiver's elements."
^ self class sortBlock: sortBlock
]

Class Heap >> reSort
[
	"Resort the entire heap"
self isEmpty	ifTrue: [ ^ self ].tally // 2 to: 1 by: -1 do: [ :i | self downHeap: i ]
]

Class Heap >> first
[
	"Return the first element in the receiver"
^ array at: 1
]

Class Heap >> remove: oldObject ifAbsent: aBlock
[
	"Remove oldObject as one of the receiver's elements. If several of the 	elements are equal to oldObject, only one is removed. If no element is 	equal to oldObject, answer the result of evaluating anExceptionBlock. 	Otherwise, answer the argument, oldObject."
1 to: tally do: [ :i | 	(array at: i) = oldObject		ifTrue: [ ^ self privateRemoveAt: i ] ].^ aBlock value
]

Metaclass
	name: #Heap;
	instanceVariables: #().

Metaclass Heap >> new
[
^ self new: 10
]

Metaclass Heap >> withAll: aCollection sortBlock: sortBlock
[
	"Create a new heap with all the elements from aCollection"
^ self basicNew	setCollection: aCollection asArray copy tally: aCollection size;	sortBlock: sortBlock;	yourself
]

Metaclass Heap >> withAll: aCollection
[
	"Create a new heap with all the elements from aCollection"
^ self basicNew	setCollection: aCollection asArray copy tally: aCollection size;	reSort;	yourself
]

Metaclass Heap >> new: n
[
^ super new setCollection: (Array new: n)
]

Metaclass Heap >> sortBlock: aBlock
[
	"Create a new heap sorted by the given block"
^ self new sortBlock: aBlock
]

