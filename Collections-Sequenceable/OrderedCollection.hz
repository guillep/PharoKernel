Class	name: #OrderedCollection;	superclass: #ClassSequenceableCollection;	instanceSpecification: #(#pointers #words );	instanceVariables: #(#array #firstIndex #lastIndex );	classVariables: #();	package: #'Collections-Sequenceable'.Class OrderedCollection >> collector[	"Private"^ array]Class OrderedCollection >> removeLast: n[	"Remove last n object into an array with last in last position"| list |list := self class arrayType new: n.n to: 1 by: -1 do: [ :i | list at: i put: self removeLast ].^ list]Class OrderedCollection >> addAll: aCollection[	"Add each element of aCollection at my end. Answer	aCollection."^ self addAllLast: aCollection]Class OrderedCollection >> errorConditionNotSatisfied[self error: 'no element satisfies condition']Class OrderedCollection >> resetTo: index[firstIndex := index.lastIndex := firstIndex - 1]Class OrderedCollection >> select: selectBlock thenCollect: collectBlock[	" Utility method to improve readability.	Do not create the intermediate collection. "| newCollection |newCollection := self copyEmpty.firstIndex to: lastIndex do: [ :index | 	| element |	element := array at: index.	(selectBlock value: element)		ifTrue: [ newCollection addLast: (collectBlock value: element) ] ].^ newCollection]Class OrderedCollection >> capacity[	"Answer the current capacity of the receiver."^ array size]Class OrderedCollection >> collect: collectBlock thenSelect: selectBlock[	" Utility method to improve readability.	Do not create the intermediate collection."| newCollection |newCollection := self copyEmpty.firstIndex to: lastIndex do: [ :index | 	| newElement |	newElement := collectBlock value: (array at: index).	(selectBlock value: newElement)		ifTrue: [ newCollection addLast: newElement ] ].^ newCollection]Class OrderedCollection >> sort[	"Sort the receiver into ascending order using the '<=' operator."self sort: [ :a :b | a <= b ]]Class OrderedCollection >> addAllFirst: anOrderedCollection[	"Add each element of anOrderedCollection at the beginning of the 	receiver. Answer anOrderedCollection."anOrderedCollection reverseDo: [ :each | self addFirst: each ].^ anOrderedCollection]Class OrderedCollection >> select: aBlock[	"Evaluate aBlock with each of my elements as the argument. Collect into	a new collection like the receiver, only those elements for which aBlock	evaluates to true."| newCollection element |newCollection := self copyEmpty.firstIndex to: lastIndex do: [ :index | 	(aBlock value: (element := array at: index))		ifTrue: [ newCollection addLast: element ] ].^ newCollection]Class OrderedCollection >> do: aBlock[	"Override the superclass for performance reasons."| index |index := firstIndex.[ index <= lastIndex ]	whileTrue: [ 		aBlock value: (array at: index).		index := index + 1 ]]Class OrderedCollection >> postCopyFrom: startIndex to: endIndex[	"finish copying the array in a certain range."endIndex < startIndex	ifFalse: [ 		"Because actual size of the array may be greater than used size,		postCopyFrom:to: may fail to fail and answer an incorrect result		if this sanity check were not applied"		(startIndex between: 1 and: self size)			ifFalse: [ ^ self error: 'startIndex is out of bounds' ].		(endIndex between: 1 and: self size)			ifFalse: [ ^ self error: 'endIndex is out of bounds' ] ].	"Add a protection that lacks in Array>>postcopy"array := array copyFrom: startIndex + firstIndex - 1 to: (endIndex max: startIndex - 1) + firstIndex - 1.firstIndex := 1.lastIndex := array size]Class OrderedCollection >> addFirst: newObject[	"Add newObject to the beginning of the receiver. Answer newObject."firstIndex = 1	ifTrue: [ self makeRoomAtFirst ].firstIndex := firstIndex - 1.array at: firstIndex put: newObject.^ newObject]Class OrderedCollection >> at: index ifAbsentPut: block[	"Return value at index, however, if value does not exist (nil or out of bounds) then add block's value at index (growing self if necessary)"| v |index <= self size	ifTrue: [ ^ (v := self at: index) ifNotNil: [ v ] ifNil: [ self at: index put: block value ] ].[ self size < index ] whileTrue: [ self add: nil ].^ self at: index put: block value]Class OrderedCollection >> removeAt: index[| removed |removed := self at: index.self removeIndex: index + firstIndex - 1.^ removed]Class OrderedCollection >> ensureBoundsFrom: fromIndex to: toIndex[fromIndex < 1	ifTrue: [ ^ self errorSubscriptBounds: fromIndex ].toIndex + firstIndex - 1 > lastIndex	ifTrue: [ ^ self errorSubscriptBounds: toIndex ]]Class OrderedCollection >> addAllFirstUnlessAlreadyPresent: anOrderedCollection[	"Add each element of anOrderedCollection at the beginning of the receiver, preserving the order, but do not add any items that are already in the receiver.  Answer anOrderedCollection."anOrderedCollection	reverseDo: [ :each | 		(self includes: each)			ifFalse: [ self addFirst: each ] ].^ anOrderedCollection]Class OrderedCollection >> size[	"Answer how many elements the receiver contains."^ lastIndex - firstIndex + 1]Class OrderedCollection >> add: newObject before: oldObject[	"Add the argument, newObject, as an element of the receiver. Put it in 	the sequence just preceding oldObject. Answer newObject."| index |index := self find: oldObject.self insert: newObject before: index.^ newObject]Class OrderedCollection >> removeFirst: n[	"Remove first n object into an array"| list |list := self class arrayType new: n.1 to: n do: [ :i | list at: i put: self removeFirst ].^ list]Class OrderedCollection >> sorted: aSortBlockOrNil[	"Return a new sequenceable collection which contains the same elements as self but its elements are sorted by aSortBlockOrNil. The block should take two arguments and return true if the first element should preceed the second one. If aSortBlock is nil then <= is used for comparison."^ self copy sort: aSortBlockOrNil]Class OrderedCollection >> copyEmpty[	"Answer a copy of the receiver that contains no elements."^ self species new]Class OrderedCollection >> setContents: anArray[array := anArray.firstIndex := 1.lastIndex := array size]Class OrderedCollection >> copyWith: newElement[	"Answer a copy of the receiver that is 1 bigger than the receiver and 	includes the argument, newElement, at the end."| newCollection |newCollection := self copy.newCollection add: newElement.^ newCollection]Class OrderedCollection >> reversed[	"Answer a copy of the receiver with element order reversed.  "| newCol |newCol := self species new.self reverseDo: [ :elem | newCol addLast: elem ].^ newCol	"#(2 3 4 'fred') reversed"]Class OrderedCollection >> reverseDo: aBlock[	"Override the superclass for performance reasons."| index |index := lastIndex.[ index >= firstIndex ]	whileTrue: [ 		aBlock value: (array at: index).		index := index - 1 ]]Class OrderedCollection >> with: otherCollection collect: twoArgBlock[	"Collect and return the result of evaluating twoArgBlock with 	corresponding elements from this collection and otherCollection."| result |otherCollection size = self size	ifFalse: [ self error: 'otherCollection must be the same size' ].result := self species new: self size.1 to: self size do: [ :index | result addLast: (twoArgBlock value: (self at: index) value: (otherCollection at: index)) ].^ result]Class OrderedCollection >> withIndexCollect: elementAndIndexBlock[	"Just like with:collect: except that the iteration index supplies the second argument to the block. Override superclass in order to use addLast:, not at:put:."| newCollection |newCollection := self species new: self size.firstIndex to: lastIndex do: [ :index | newCollection addLast: (elementAndIndexBlock value: (array at: index) value: index - firstIndex + 1) ].^ newCollection]Class OrderedCollection >> removeAllSuchThat: aBlock[	"Remove each element of the receiver for which aBlock evaluates to true.	The method in Collection is O(N^2), this is O(N)."| n |n := firstIndex.firstIndex to: lastIndex do: [ :index | 	(aBlock value: (array at: index))		ifFalse: [ 			array at: n put: (array at: index).			n := n + 1 ] ].array from: n to: lastIndex put: nil.lastIndex := n - 1]Class OrderedCollection >> at: anInteger[	"Answer my element at index anInteger. at: is used by a knowledgeable	client to access an existing element"self ensureBoundsFrom: anInteger to: anInteger.^ array at: anInteger + firstIndex - 1]Class OrderedCollection >> removeLast[	"Remove the last element of the receiver and answer it. If the receiver is 	empty, create an error notification."| lastObject |self emptyCheck.lastObject := array at: lastIndex.array at: lastIndex put: nil.lastIndex := lastIndex - 1.^ lastObject]Class OrderedCollection >> makeRoomAtLast[	"Make some empty slots at the end of the array. If we have more than 50% free space, then just move the elements, so that the last 50% of the slots are free, otherwise add new free slots to the end by growing. Precondition: lastIndex = array size"| tally newFirstIndex newLastIndex |tally := self size.tally * 2 >= lastIndex	ifTrue: [ ^ self growAtLast ].tally = 0	ifTrue: [ ^ self resetTo: 1 ].newLastIndex := lastIndex // 2.newFirstIndex := newLastIndex - lastIndex + firstIndex.array	replaceFrom: newFirstIndex	to: newLastIndex	with: array	startingAt: firstIndex.array from: newLastIndex + 1 to: lastIndex put: nil.firstIndex := newFirstIndex.lastIndex := newLastIndex]Class OrderedCollection >> growAtFirst[	"Add new empty slots to the front of array, while keeping the empty slots at the end."| newArray newFirstIndex newLastIndex |newArray := self class arrayType new: (array size * 2 max: 1).newFirstIndex := newArray size - array size + firstIndex.newLastIndex := newFirstIndex + lastIndex - firstIndex.newArray	replaceFrom: newFirstIndex	to: newLastIndex	with: array	startingAt: firstIndex.array := newArray.firstIndex := newFirstIndex.lastIndex := newLastIndex]Class OrderedCollection >> hasContentsInExplorer[^ self notEmpty]Class OrderedCollection >> find: oldObject[	"  This method answers an index in the range firstIndex .. lastIndex, which is meant for internal use only.     Never use this method in your code, the methods for public use are:        #indexOf:        #indexOf:ifAbsent: "| index |index := firstIndex.[ index <= lastIndex ]	whileTrue: [ 		(array at: index) = oldObject			ifTrue: [ ^ index ].		index := index + 1 ].self errorNotFound: oldObject]Class OrderedCollection >> add: newObject beforeIndex: index[	"Add the argument, newObject, as an element of the receiver. Put it in 	the sequence just before index. Answer newObject."(index between: 1 and: self size + 1)	ifFalse: [ ^ self errorSubscriptBounds: index ].self insert: newObject before: firstIndex + index - 1.^ newObject]Class OrderedCollection >> add: newObject afterIndex: index[	"Add the argument, newObject, as an element of the receiver. Put it in 	the sequence just after index. Answer newObject."(index between: 0 and: self size)	ifFalse: [ ^ self errorSubscriptBounds: index ].self insert: newObject before: firstIndex + index.^ newObject]Class OrderedCollection >> setCollection: anArray[array := anArray.self reset]Class OrderedCollection >> at: anInteger put: anObject[	"Put anObject at element index anInteger. at:put: cannot be used to	append, front or back, to an ordered collection; it is used by a	knowledgeable client to replace an element."self ensureBoundsFrom: anInteger to: anInteger.^ array at: anInteger + firstIndex - 1 put: anObject]Class OrderedCollection >> postCopy[array := array copy]Class OrderedCollection >> addLast: newObject[	"Add newObject to the end of the receiver. Answer newObject."lastIndex = array size	ifTrue: [ self makeRoomAtLast ].lastIndex := lastIndex + 1.array at: lastIndex put: newObject.^ newObject]Class OrderedCollection >> mergeSortFrom: startIndex to: stopIndex by: aBlock[	"Sort the given range of indices using the mergesort algorithm.	Mergesort is a worst-case O(N log N) sorting algorithm that usually	does only half as many comparisons as heapsort or quicksort."	"Details: recursively split the range to be sorted into two halves,	mergesort each half, then merge the two halves together. An extra 	copy of the data is used as temporary storage and successive merge 	phases copy data back and forth between the receiver and this copy.	The recursion is set up so that the final merge is performed into the	receiver, resulting in the receiver being completely sorted."self size <= 1	ifTrue: [ ^ self ].	"nothing to do"startIndex = stopIndex	ifTrue: [ ^ self ].[ startIndex >= 1 and: [ startIndex < stopIndex ] ] assert.	"bad start index"[ stopIndex <= self size ] assert.	"bad stop index"self	mergeSortFrom: startIndex	to: stopIndex	src: self copy	dst: self	by: aBlock]Class OrderedCollection >> addAllLast: aCollection[	"Add each element of aCollection at the end of the receiver. 	Answer aCollection."aCollection do: [ :each | self addLast: each ].^ aCollection]Class OrderedCollection >> sort: aSortBlock[	"Sort this array using aSortBlock. The block should take two arguments	and return true if the first element should preceed the second one."self size <= 1	ifTrue: [ ^ self ].	"nothing to do"array	mergeSortFrom: firstIndex	to: lastIndex	src: array shallowCopy	dst: array	by: aSortBlock]Class OrderedCollection >> copyFrom: startIndex to: endIndex[	"Answer a copy of the receiver that contains elements from position	startIndex to endIndex."^ self shallowCopy postCopyFrom: startIndex to: endIndex]Class OrderedCollection >> removeIndex: removedIndex[	"  removedIndex is an index in the range firstIndex .. lastIndex, such an index is not known from outside the collection.    Never use this method in your code, it is meant for private use by OrderedCollection only.     The method for public use is:        #removeAt: "array	replaceFrom: removedIndex	to: lastIndex - 1	with: array	startingAt: removedIndex + 1.array at: lastIndex put: nil.lastIndex := lastIndex - 1]Class OrderedCollection >> add: newObject after: oldObject[	"Add the argument, newObject, as an element of the receiver. Put it in 	the sequence just succeeding oldObject. Answer newObject."| index |index := self find: oldObject.self insert: newObject before: index + 1.^ newObject]Class OrderedCollection >> add: newObject[^ self addLast: newObject]Class OrderedCollection >> removeFirst[	"Remove the first element of the receiver and answer it. If the receiver is 	empty, create an error notification."| firstObject |self emptyCheck.firstObject := array at: firstIndex.array at: firstIndex put: nil.firstIndex := firstIndex + 1.^ firstObject]Class OrderedCollection >> collect: aBlock[	"Evaluate aBlock with each of my elements as the argument. Collect the 	resulting values into a collection that is like me. Answer the new 	collection. Override superclass in order to use addLast:, not at:put:."| newCollection |newCollection := self species new: self size.firstIndex to: lastIndex do: [ :index | newCollection addLast: (aBlock value: (array at: index)) ].^ newCollection]Class OrderedCollection >> makeRoomAtFirst[	"Make some empty slots at the front of the array. If we have more than 50% free space, then just move the elements, so that the first 50% of the slots are free, otherwise add new free slots to the front by growing. Precondition: firstIndex = 1"| tally newFirstIndex newLastIndex |tally := self size.tally * 2 >= array size	ifTrue: [ ^ self growAtFirst ].tally = 0	ifTrue: [ ^ self resetTo: array size + 1 ].newFirstIndex := array size // 2 + 1.newLastIndex := newFirstIndex - firstIndex + lastIndex.0 to: tally - 1 do: [ :offset | array at: newLastIndex - offset put: (array at: lastIndex - offset) ].array from: firstIndex to: newFirstIndex - 1 put: nil.firstIndex := newFirstIndex.lastIndex := newLastIndex]Class OrderedCollection >> join: aCollection[| result |result := self class new.aCollection do: [ :each | each appendTo: result ] separatedBy: [ self appendTo: result ].^ result]Class OrderedCollection >> removeAll[	"remove all the elements from this collection.	Keep same amount of storage"self setCollection: (self class arrayType new: array size)]Class OrderedCollection >> remove: oldObject ifAbsent: absentBlock[| index |index := firstIndex.[ index <= lastIndex ]	whileTrue: [ 		oldObject = (array at: index)			ifTrue: [ 				self removeIndex: index.				^ oldObject ]			ifFalse: [ index := index + 1 ] ].^ absentBlock value]Class OrderedCollection >> growAtLast[	"Add new empty slots to the end of array, while keeping the empty slots at the front."| newArray |newArray := self class arrayType new: (array size * 2 max: 1).newArray	replaceFrom: firstIndex	to: lastIndex	with: array	startingAt: firstIndex.array := newArray]Class OrderedCollection >> insert: anObject before: spot[	"  spot is an index in the range firstIndex .. lastIndex, such an index is not known from outside the collection.      Never use this method in your code, it is meant for private use by OrderedCollection only.     The methods for use are:        #add:before:   to insert an object before another object        #add:beforeIndex:   to insert an object before a given position. "| delta "index" spotIndex |spotIndex := spot.delta := spotIndex - firstIndex.firstIndex = 1	ifTrue: [ 		self makeRoomAtFirst.		spotIndex := firstIndex + delta ].firstIndex := firstIndex - 1.array	replaceFrom: firstIndex	to: spotIndex - 2	with: array	startingAt: firstIndex + 1.array at: spotIndex - 1 put: anObject.	"	index := firstIndex := firstIndex - 1.	[index < (spotIndex - 1)]		whileTrue: 			[array at: index put: (array at: index + 1).			index := index + 1].	array at: index put: anObject."^ anObject]Class OrderedCollection >> copyReplaceFrom: start to: stop with: replacementCollection[	"Answer a copy of the receiver with replacementCollection's elements in	place of the receiver's start'th to stop'th elements. This does not expect	a 1-1 map from replacementCollection to the start to stop elements, so it	will do an insert or append."| newOrderedCollection delta startIndex stopIndex |"if start is less than 1, ignore stop and assume this is inserting at the front. 	if start greater than self size, ignore stop and assume this is appending. 	otherwise, it is replacing part of me and start and stop have to be within my 	bounds. "delta := 0.startIndex := start.stopIndex := stop.start < 1	ifTrue: [ startIndex := stopIndex := 0 ]	ifFalse: [ 		startIndex > self size			ifTrue: [ startIndex := stopIndex := self size + 1 ]			ifFalse: [ 				(stopIndex < (startIndex - 1) or: [ stopIndex > self size ])					ifTrue: [ self errorOutOfBounds ].				delta := stopIndex - startIndex + 1 ] ].newOrderedCollection := self species new: self size + replacementCollection size - delta.1 to: startIndex - 1 do: [ :index | newOrderedCollection add: (self at: index) ].1 to: replacementCollection size do: [ :index | newOrderedCollection add: (replacementCollection at: index) ].stopIndex + 1 to: self size do: [ :index | newOrderedCollection add: (self at: index) ].^ newOrderedCollection]Class OrderedCollection >> asArray[^ (Array new: self size)	replaceFrom: 1	to: self size	with: array	startingAt: firstIndex]Class OrderedCollection >> collect: aBlock from: fromIndex to: toIndex[	"Override superclass in order to use addLast:, not at:put:."| result |self ensureBoundsFrom: fromIndex to: toIndex.result := self species new: toIndex - fromIndex + 1.firstIndex + fromIndex - 1 to: firstIndex + toIndex - 1 do: [ :index | result addLast: (aBlock value: (array at: index)) ].^ result]Class OrderedCollection >> reset[	"Quickly remove all elements. The objects will be still referenced, but will not be 	accessible."self resetTo: 1]Metaclass	name: #OrderedCollection;	instanceVariables: #().Metaclass OrderedCollection >> new[^ self new: 10]Metaclass OrderedCollection >> ofSize: n[	"Create a new collection of size n with nil as its elements.	This method exists because OrderedCollection new: n creates an	empty collection,  not one of size n."| collection |collection := self new: n.collection setContents: collection collector.^ collection]Metaclass OrderedCollection >> newFrom: aCollection[	"Answer an instance of me containing the same elements as aCollection."| newCollection |newCollection := self new: aCollection size.newCollection addAll: aCollection.^ newCollection	"	OrderedCollection newFrom: {1. 2. 3}	{1. 2. 3} as: OrderedCollection	{4. 2. 7} as: SortedCollection"]Metaclass OrderedCollection >> arrayType[^ Array]Metaclass OrderedCollection >> new: anInteger[^ self basicNew setCollection: (self arrayType new: anInteger)]Metaclass OrderedCollection >> new: anInteger withAll: anObject[^ self basicNew setContents: (self arrayType new: anInteger withAll: anObject)]