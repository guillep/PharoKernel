Class	name: #TextStream;	superclass: #ClassWriteStream;	instanceSpecification: #(#pointers #words );	instanceVariables: #();	classVariables: #();	package: #'Collections-Streams'.Class TextStream >> applyAttribute: att beginningAt: startPos[collection addAttribute: att from: startPos to: self position]Class TextStream >> nextPutAll: aCollection[	"Optimized access to get around Text at:Put: overhead"| n |n := aCollection size.position + n > writeLimit	ifTrue: [ self growTo: position + n + 10 ].collection	replaceFrom: position + 1	to: position + n	with: aCollection	startingAt: 1.position := position + n.^ aCollection]Class TextStream >> withAttribute: att do: strmBlock[| pos1 val |pos1 := self position.val := strmBlock value.collection addAttribute: att from: pos1 + 1 to: self position.^ val]Class TextStream >> withAttributes: attributes do: streamBlock[| pos1 val |pos1 := self position.val := streamBlock value.attributes do: [ :attribute | collection addAttribute: attribute from: pos1 + 1 to: self position ].^ val]Metaclass	name: #TextStream;	instanceVariables: #().