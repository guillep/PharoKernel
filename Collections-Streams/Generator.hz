Class
	name: #Generator;
	superclass: #ClassStream;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#block #next #continue #home );
	classVariables: #();
	package: #'Collections-Streams'.

Class Generator >> atEnd
[
	"Answer whether the receiver can access any more objects."
^ continue isNil
]

Class Generator >> close
[
	"Close the receiving generator and unwind its ensure-blocks."
continue ifNotNil: [ continue unwindTo: home ].continue := block := next := nil
]

Class Generator >> contents
[
	"Answer the contents of this generator. Do not call this method on infinite generators."
| stream |stream := (Array new: 10) writeStream.[ self atEnd ] whileFalse: [ stream nextPut: self next ].^ stream contents
]

Class Generator >> fork
[
| result |home := thisContext.block reentrant value: self.thisContext swapSender: continue.result := next.continue := next := home := nil.^ result
]

Class Generator >> initializeOn: aBlock
[
block := aBlock.self reset
]

Class Generator >> next
[
	"Generate and answer the next object in the receiver."
^ self atEnd	ifFalse: [ 		home swapSender: thisContext sender.		continue := thisContext swapSender: continue ]
]

Class Generator >> nextPut: anObject
[
	"Add anObject into the generator. A synonym to #yield: and value:."
| previous |previous := next.next := anObject.continue := thisContext swapSender: continue.^ previous
]

Class Generator >> peek
[
	"Answer the upcoming object of the receiver."
^ next
]

Class Generator >> printOn: aStream
[
aStream	nextPutAll: self class name;	nextPutAll: ' on: ';	print: block
]

Class Generator >> reset
[
	"Reset the generator, i.e., start it over"
continue ifNotNil: [ continue unwindTo: home ].next := nil.continue := thisContext.[ self fork ] value
]

Class Generator >> size
[
	"A generator does not know its size."
^ self shouldNotImplement
]

Class Generator >> value: anObject
[
	"Allows passing generators as arguments to methods expecting blocks.	A synonym for #yield: / #nextPut:."
^ self nextPut: anObject
]

Class Generator >> yield: anObject
[
	"Yield the next value to the consumer of the generator.	A synonym for #nextPut:"
^ self nextPut: anObject
]

Metaclass
	name: #Generator;
	instanceVariables: #().

Metaclass Generator >> on: aBlock
[
^ self basicNew initializeOn: aBlock
]

