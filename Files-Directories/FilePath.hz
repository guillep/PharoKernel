Class
	name: #FilePath;
	superclass: #ClassObject;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#squeakPathName #vmPathName #converter );
	classVariables: #();
	package: #'Files-Directories'.

Class FilePath >> pathName: p isEncoded: isEncoded
[
converter := LanguageEnvironment defaultFileNameConverter.isEncoded	ifTrue: [ 		squeakPathName := p convertFromWithConverter: converter.		vmPathName := p ]	ifFalse: [ 		squeakPathName := p isOctetString			ifTrue: [ p asOctetString ]			ifFalse: [ p ].		vmPathName := squeakPathName convertToWithConverter: converter ]
]

Class FilePath >> pathName
[
^ squeakPathName
]

Class FilePath >> isNullPath
[
	"an empty path is used to represent the root path(s) when calling the primitive to list directory entries. Some users need to check for this and this is cleaner than grabbing the pathname and assuming it is a plain String"
^ self pathName isEmpty
]

Class FilePath >> printOn: aStream
[
aStream nextPutAll: 'FilePath('''.aStream nextPutAll: squeakPathName.aStream nextPutAll: ''')'
]

Class FilePath >> copySystemToVm
[
(self class instVarNames includes: 'systemPathName')	ifTrue: [ vmPathName := self instVarNamed: 'systemPathName' ]
]

Class FilePath >> asSqueakPathName
[
^ self pathName
]

Class FilePath >> asVmPathName
[
^ vmPathName
]

Class FilePath >> asString
[
^ self asSqueakPathName
]

Metaclass
	name: #FilePath;
	instanceVariables: #().

Metaclass FilePath >> pathName: pathName
[
^ self pathName: pathName isEncoded: false
]

Metaclass FilePath >> classVersion
[
^ 1
]

Metaclass FilePath >> pathName: pathName isEncoded: aBoolean
[
^ self new	pathName: pathName isEncoded: aBoolean;	yourself
]

