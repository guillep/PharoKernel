Class
	name: #MethodAdded;
	superclass: #ClassSystemAnnouncement;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#method #methodClass #protocol #selector );
	classVariables: #();
	package: #'System-Announcements'.

Class MethodAdded >> method
[
^ method
]

Class MethodAdded >> method: aCompiledMethod
[
method := aCompiledMethod
]

Class MethodAdded >> methodAffected
[
^ self method
]

Class MethodAdded >> methodClass
[
^ methodClass
]

Class MethodAdded >> methodClass: aClass
[
methodClass := aClass
]

Class MethodAdded >> protocol
[
^ protocol
]

Class MethodAdded >> protocol: aProtocolName
[
protocol := aProtocolName
]

Class MethodAdded >> selector
[
^ selector
]

Class MethodAdded >> selector: aSelector
[
selector := aSelector
]

Metaclass
	name: #MethodAdded;
	instanceVariables: #().

Metaclass MethodAdded >> method: aCompiledMethod selector: aSelector class: aClass
[
self flag: #look.	"Is it ok to send an event with no protocol?"^ self	method: aCompiledMethod	selector: aSelector	protocol: nil	class: aClass	requestor: nil
]

Metaclass MethodAdded >> method: aCompiledMethod selector: aSelector protocol: aProtocolName class: aClass
[
self flag: #look.	"Is it ok to send an event with no requestor?"^ self	method: aCompiledMethod	selector: aSelector	protocol: aProtocolName	class: aClass	requestor: nil
]

Metaclass MethodAdded >> method: aCompiledMethod selector: aSelector protocol: aProtocolName class: aClass requestor: aRequestor
[
^ self new	method: aCompiledMethod;	selector: aSelector;	protocol: aProtocolName;	methodClass: aClass;	yourself
]

