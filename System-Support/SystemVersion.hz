Class
	name: #SystemVersion;
	superclass: #ClassObject;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#version #date #highestUpdate #updates #type #major #minor #suffix );
	classVariables: #(#Current );
	package: #'System-Support'.

Class SystemVersion >> date
[
^ date
]

Class SystemVersion >> date: newDate
[
date := newDate
]

Class SystemVersion >> datedVersion
[
	"Answer the version of this release."
^ self version asString , ' of ' , self date printString
]

Class SystemVersion >> dottedMajorMinor
[
	"Return the major/minor version number of the form X.Y, without any 'alpha' or 'beta' or other suffix. 	If the receiver needs upgrading, do it. Remove the guard in 1.3."
	"SystemVersion current majorMinor"
self upgrade.^ String	streamContents: [ :str | 		str			nextPutAll: self major printString;			nextPut: $.;			nextPutAll: self minor printString ]
]

Class SystemVersion >> highestUpdate
[
	"Returns the highest number of available updates"
| sortedUpdates |highestUpdate	ifNil: [ 		sortedUpdates := self updates asSortedCollection.		highestUpdate := sortedUpdates isEmpty			ifTrue: [ 0 ]			ifFalse: [ sortedUpdates last ] ].^ highestUpdate
]

Class SystemVersion >> highestUpdate: anInteger
[
highestUpdate := anInteger
]

Class SystemVersion >> imageVersionString
[
	"Print the version compatibile with naming the image."
^ String	streamContents: [ :str | 		str			nextPutAll: self type;			nextPut: $-;			nextPutAll: self major printString;			nextPut: $.;			nextPutAll: self minor printString;			nextPut: $-;			nextPutAll: self highestUpdate printString;			nextPut: $-;			nextPutAll: self suffix ]
]

Class SystemVersion >> includesUpdate: anUpdate
[
^ self updates includes: anUpdate
]

Class SystemVersion >> initialize
[
super initialize.date := Date today.updates := Set new
]

Class SystemVersion >> major
[
	"Answer the major number of a version. 1 in '1.2'"
^ major
]

Class SystemVersion >> major: anObject
[
	"Set the value of major"
major := anObject
]

Class SystemVersion >> majorMinor
[
	"Return the major/minor version number of the form X.Y, without any 'alpha' or 'beta' or other suffix. 	If the receiver needs upgrading, do it. Remove the guard in 1.3."
	"SystemVersion current majorMinor"
^ self majorMinor: '.'
]

Class SystemVersion >> majorMinor: aSeparatingString
[
	"Return the major/minor version number of the form XaSeparatingStringY, without any 'alpha' or 'beta' or other suffix. If the receiver needs upgrading, do it. Remove the guard in 1.3."
	"SystemVersion current majorMinor: '-'"
	"SystemVersion current majorMinor: ''"
self upgrade.^ String	streamContents: [ :str | 		str			nextPutAll: self major printString;			nextPutAll: aSeparatingString;			nextPutAll: self minor printString ]
]

Class SystemVersion >> majorMinorVersion
[
	"Return the major/minor version number of the form X.Y, without any 'alpha' or 'beta' or other suffix. 	If the receiver needs upgrading, do it. Remove the guard in 1.3."
	"SystemVersion current majorMinorVersion"
self upgrade.^ String	streamContents: [ :str | 		str			nextPutAll: self type;			nextPutAll: self major printString;			nextPut: $.;			nextPutAll: self minor printString ]
]

Class SystemVersion >> minor
[
	"Answer the minor number of a version. 2 in '1.2'"
^ minor
]

Class SystemVersion >> minor: anObject
[
	"Set the value of minor"
minor := anObject
]

Class SystemVersion >> printOn: stream
[
stream	nextPutAll: self datedVersion;	nextPutAll: ' update ' , self highestUpdate printString
]

Class SystemVersion >> registerUpdate: update
[
self updates add: update.self resetHighestUpdate
]

Class SystemVersion >> resetHighestUpdate
[
highestUpdate := nil
]

Class SystemVersion >> shortVersionString
[
	"Print a short version string.  Compatibile with senders that concatenate this with 	#lastUpdateString or #highestUpdate. Essentially the old version format. Guard 	against no state being set."
self type ifNil: [ ^ 'No version set' ].^ String	streamContents: [ :str | 		str			nextPutAll: self type;			nextPutAll: self major printString;			nextPut: $.;			nextPutAll: self minor printString;			nextPutAll: self suffix ]
]

Class SystemVersion >> suffix
[
	"Answer the suffix (alpha, beta, rc  of a version. beta in '1.2beta'"
^ suffix
]

Class SystemVersion >> suffix: anObject
[
	"Set the value of suffix"
suffix := anObject
]

Class SystemVersion >> type
[
	"Answer the value of type"
^ type
]

Class SystemVersion >> type: anObject
[
	"Set the value of type"
type := anObject
]

Class SystemVersion >> unregisterUpdate: update
[
self updates remove: update ifAbsent: [  ]
]

Class SystemVersion >> updates
[
^ updates
]

Class SystemVersion >> upgrade
[
| parts |version ifNil: [ ^ self ].parts := self class parseShortVersionString: version.self type: parts first.self major: parts second.self minor: parts third.self suffix: parts fourth.version := nil
]

Class SystemVersion >> version
[
	"Answer the short version string. If the receiver needs upgrading, do it."
^ self shortVersionString
]

Metaclass
	name: #SystemVersion;
	instanceVariables: #().

Metaclass SystemVersion >> current
[
Current ifNil: [ Current := SystemVersion new ].^ Current
]

Metaclass SystemVersion >> fromShortVersionString: aString
[
	"Create a new SystemVersion from the given short version string. Useful for testing."
| parts |parts := self parseShortVersionString: aString.^ self new	type: parts first;	major: parts second;	minor: parts third;	suffix: parts fourth;	yourself
]

Metaclass SystemVersion >> newVersion: versionName
[
	"Install a new SystemVersion as the current version. Only preserve the higest update recorded.	This method is a candidate for being removed, I am not sure it ever makes sense to do this."
| newVersion |newVersion := self fromShortVersionString: versionName.newVersion highestUpdate: self current highestUpdate.Current := newVersion
]

Metaclass SystemVersion >> parseShortVersionString: aString
[
	"Answer the parts of aString, expected in short format <type><major>.<minor><suffix>."
| stream length type major minor suffix |stream := aString readStream.[ stream peek isDigit ] whileFalse: [ stream next ].length := stream position.stream reset.type := stream next: length.major := (stream upTo: $.) asInteger.stream := stream upToEnd readStream.[ stream peek notNil and: [ stream peek isDigit ] ] whileTrue: [ stream next ].length := stream position.stream reset.minor := (stream next: length) asInteger.suffix := stream upToEnd.^ {type.major.minor.suffix}
]

Metaclass SystemVersion >> parseVersionString: versionString
[
	"Answer the version of this release as version, date, update."
	"SystemVersion parseVersionString: 'Squeak3.1alpha of 28 February 2001 [latest update: #3966]' "
| version date update |[ | stream |stream := versionString readStream.version := stream upToAll: ' of '.date := Date readFrom: stream.stream upToAll: ' #'.update := Number readFrom: stream ]	on: Error	do: [ ^ nil ].^ {version.date.update}
]

