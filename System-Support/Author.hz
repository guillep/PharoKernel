Class
	name: #Author;
	superclass: #ClassObject;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#fullName );
	classVariables: #();
	package: #'System-Support'.

Class Author >> reset
[
fullName := ''
]

Class Author >> ifUnknownAuthorUse: aString during: aBlock
[
	"If no author is set use the name aString while executing aBlock."
	"for compatibility with 1.0"
| previous |fullName isEmptyOrNil	ifFalse: [ ^ aBlock value ].fullName := aString.^ aBlock	ensure: [ self reset ]
]

Class Author >> fullNamePerSe
[
	"Answer the currently-prevailing author full name, such as it is, empty or not"
^ fullName
]

Class Author >> fullName
[
	"Answer the full name to be used to identify the current code author."
[ fullName isEmptyOrNil ]	whileTrue: [ 		self requestFullName.		(fullName isNil or: [ fullName = 'FirstnameLastname' translated ])			ifTrue: [ 				fullName := nil.				^ 'Anonymous' ] ].^ fullName
]

Class Author >> checkAndSetFullNameWith: aString
[
| s allowed |aString ifNil: [ ^ self ].s := ''.allowed := ($A to: $Z) , ($a to: $z) , ($0 to: $9).aString	do: [ :c | 		(allowed includes: c)			ifTrue: [ s := s , c asString ] ].self fullName: s
]

Class Author >> messagePrompt
[
^ 'Please type your full name. It will be used to sign the changes you make to the image.Spaces, accents, dashes, underscore and similar characters are not allowed'
]

Class Author >> initialize
[
super initialize.fullName := ''
]

Class Author >> requestFullName
[
| initialAnswer |initialAnswer := fullName isEmptyOrNil	ifTrue: [ 'FirstnameLastname' translated ]	ifFalse: [ fullName ].self	checkAndSetFullNameWith:		(UIManager default request: self messagePrompt initialAnswer: initialAnswer title: 'Author identification' translated)
]

Class Author >> useAuthor: aString during: aBlock
[
| previous |previous := fullName.fullName := aString.^ aBlock	ensure: [ fullName := previous ]
]

Class Author >> fullName: aString
[
fullName := aString
]

Metaclass
	name: #Author;
	instanceVariables: #(#uniqueInstance ).

Metaclass Author >> reset
[
^ uniqueInstance := nil
]

Metaclass Author >> fullNamePerSe
[
^ Author uniqueInstance fullNamePerSe
]

Metaclass Author >> changeStamp
[
	"Answer a string to be pasted into source code to mark who changed it and when."
^ Author fullName , ' ' , Date today mmddyyyy , ' '	, ((String streamContents: [ :s | Time now print24: true on: s ]) copyFrom: 1 to: 5)
]

Metaclass Author >> uniqueInstance: anInstance
[
	"Needed by AuthorTest to restore saved instance"
^ uniqueInstance := anInstance
]

Metaclass Author >> fullName
[
^ Author uniqueInstance fullName
]

Metaclass Author >> fixStamp: changeStamp
[
| parts |parts := changeStamp findTokens: ' '.(parts size > 0 and: [ parts last first isLetter ])	ifTrue: [ 		"Put initials first in all time stamps..."		^ String			streamContents: [ :s | 				s nextPutAll: parts last.				parts allButLast					do: [ :p | 						s							space;							nextPutAll: p ] ] ].^ changeStamp
]

Metaclass Author >> changeStampPerSe
[
	"Answer a string to be pasted into source code to mark who changed it and when."
^ (Author fullNamePerSe ifNil: [ '.' ]) , ' ' , Date today mmddyyyy , ' '	, ((String streamContents: [ :s | Time now print24: true on: s ]) copyFrom: 1 to: 5)
]

Metaclass Author >> requestFullName
[
^ Author uniqueInstance requestFullName
]

Metaclass Author >> uniqueInstance
[
^ uniqueInstance ifNil: [ uniqueInstance := super new ]
]

Metaclass Author >> useAuthor: aString during: aBlock
[
^ self uniqueInstance useAuthor: aString during: aBlock
]

Metaclass Author >> new
[
self error: 'Author is a singleton -- send uniqueInstance instead'
]

Metaclass Author >> fullName: aString
[
^ Author uniqueInstance checkAndSetFullNameWith: aString
]

