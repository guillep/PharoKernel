Class
	name: #SystemDictionary;
	superclass: #ClassIdentityDictionary;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#cachedClassNames #cachedNonClassNames );
	classVariables: #();
	package: #'System-Support'.

Class SystemDictionary >> at: aKey put: anObject
[
	"Override from Dictionary to check Undeclared and fix up	references to undeclared variables."
| index element |(self includesKey: aKey)	ifFalse: [ 		self declare: aKey from: Undeclared.		self flushClassNameCache ].super at: aKey put: anObject.^ anObject
]

Class SystemDictionary >> classNamed: className
[
^ self classOrTraitNamed: className
]

Class SystemDictionary >> renameClass: aClass from: oldName to: newName
[
	"Rename the class, aClass, to have the title newName."
| oldref category |category := self organization categoryOfElement: oldName.self organization classify: newName under: category.self organization removeElement: oldName.oldref := self associationAt: oldName.self removeKey: oldName.oldref key: newName.self add: oldref.	"Old association preserves old refs"Smalltalk renamedClass: aClass from: oldName to: newName.self flushClassNameCache.SystemAnnouncer uniqueInstance	classRenamed: aClass	from: oldName	to: newName	inCategory: category
]

Class SystemDictionary >> associationOrUndeclaredAt: key
[
	"return an association or install in undeclared.  Used for mating up ImageSegments."
^ self	associationAt: key	ifAbsent: [ 		Undeclared at: key put: nil.		Undeclared associationAt: key ]
]

Class SystemDictionary >> renameClassNamed: oldName as: newName
[
	"Invoked from fileouts:  if there is currently a class in the system named oldName, then rename it to newName.  If anything untoward happens, report it in the Transcript.  "
| oldClass |(oldClass := self at: oldName asSymbol ifAbsent: [ nil ]) == nil	ifTrue: [ 		self crTrace: 'Class-rename for ' , oldName , ' ignored because ' , oldName , ' does not exist.'.		^ self ].oldClass rename: newName
]

Class SystemDictionary >> environment
[
	"for conversion from SmalltalkImage to SystemDictionary"
^ self
]

Class SystemDictionary >> classAndTraitNames
[
	"Answer a sorted collection of all class and trait (not including class-traits) names. The performance of 	this algorithm is O(n) if the classNames are already cached, otherwise O(n*log(n)) where n is self size."
| classNames traitNames result temporary |classNames := self classNames.traitNames := self traitNames.temporary := Array new: classNames size + traitNames size.result := temporary shallowCopy.temporary	replaceFrom: 1		to: classNames size		with: classNames		startingAt: 1;	replaceFrom: classNames size + 1		to: temporary size		with: traitNames		startingAt: 1;	mergeFirst: 1		middle: classNames size		last: temporary size		into: result		by: nil.^ result
]

Class SystemDictionary >> classNames
[
	"Answer a sorted collection of all class names. Use the return value of #fillCaches to avoid concurrency issues."
^ cachedClassNames ifNil: [ self fillCaches at: 1 ]
]

Class SystemDictionary >> allClassesDo: aBlock
[
	"Evaluate the argument, aBlock, for each class in the system."
^ self classNames do: [ :name | aBlock value: (self at: name) ]
]

Class SystemDictionary >> renameClass: aClass from: oldName
[
	"Rename the class, aClass, to have the title newName."
^ self renameClass: aClass from: oldName to: aClass name
]

Class SystemDictionary >> allTraitsDo: aBlock
[
	"Evaluate the argument, aBlock, for each trait in the system."
^ self traitNames do: [ :name | aBlock value: (self at: name) ]
]

Class SystemDictionary >> removeKey: key ifAbsent: aBlock
[
	"Remove key (and its associated value) from the receiver. If key is not in	the receiver, answer the result of evaluating aBlock. Otherwise, answer	the value externally named by key."
self flushClassNameCache.^ super removeKey: key ifAbsent: aBlock
]

Class SystemDictionary >> renameClass: aClass as: newName
[
	"Rename the class, aClass, to have the title newName."
^ self renameClass: aClass from: aClass name to: newName
]

Class SystemDictionary >> allTraits
[
	"Return all traits defined in the Smalltalk SystemDictionary"
^ self traitNames collect: [ :each | self at: each ]
]

Class SystemDictionary >> veryDeepCopyWith: deepCopier
[
	"Return self.  I can't be copied.  Do not record me."

]

Class SystemDictionary >> fillCaches
[
	"Fill cachedClassNames and cachedNonClassNames. Return an array with the calculated values."
| classNames nonClassNames |classNames := OrderedCollection new: self size.nonClassNames := OrderedCollection new.self	keysAndValuesDo: [ :key :value | 		"The key == value name test below addresses two separate issues:			1) Obsolete classes, where key = #Foo and value name = 'AnObsoleteFoo'			2) Aliases, i.e., Smalltalk at: #OtherName put: aClass"		((value isKindOf: (self class environment at: #Class)) and: [ key == value name ])			ifTrue: [ classNames add: key ]			ifFalse: [ nonClassNames add: key ] ].	"The expression (self class environment at: #Class) deserves some explanation.		For bootstrapping we need to have a different Class when executing value isKindOf: Class :		In such expression Class represents a kind of fixed point: the class of the class of the system. 		When bootstrapping we want the class Class of the current kernel defined in the current namespace.		Since the current namespace should contains the class that describes itself as well as a new Class class.		we are done :). - StephaneDucasse"classNames sort.cachedNonClassNames := nonClassNames sort.cachedClassNames := classNames.^ {classNames.nonClassNames}
]

Class SystemDictionary >> classOrTraitNamed: aString
[
	"aString is either a class or trait name or a class or trait name followed by ' class' or 'classTrait' respectively.	Answer the class or metaclass it names."
| meta baseName |(aString endsWith: ' class')	ifTrue: [ 		meta := true.		baseName := aString copyFrom: 1 to: aString size - 6 ]	ifFalse: [ 		(aString endsWith: ' classTrait')			ifTrue: [ 				meta := true.				baseName := aString copyFrom: 1 to: aString size - 11 ]			ifFalse: [ 				meta := false.				baseName := aString ] ].^ self	at: baseName asSymbol	ifPresent: [ :global | 		(global isBehavior or: [ global isTrait ])			ifTrue: [ 				meta					ifFalse: [ global ]					ifTrue: [ global classSide ] ] ]
]

Class SystemDictionary >> hasBindingThatBeginsWith: aString
[
	"Use the cached class and non-class names for better performance."
| name searchBlock |searchBlock := [ :element | (element beginsWith: aString)	ifTrue: [ 0 ]	ifFalse: [ 		aString < element			ifTrue: [ -1 ]			ifFalse: [ 1 ] ] ].name := self classNames findBinary: searchBlock ifNone: [ nil ].name ifNotNil: [ ^ true ].name := self nonClassNames findBinary: searchBlock ifNone: [ nil ].^ name notNil
]

Class SystemDictionary >> flushClassNameCache
[
	"Smalltalk flushClassNameCache"
	"Force recomputation of the cached list of class names and non-class names."
cachedClassNames := cachedNonClassNames := nil
]

Class SystemDictionary >> bindingOf: varName
[
	"SystemDictionaries includes symbols only"
^ super bindingOf: varName asSymbol
]

Class SystemDictionary >> forgetClass: aClass logged: aBool
[
	"Delete the class, aClass, from the system.	Note that this doesn't do everything required to dispose of a class - to do that use Class>>removeFromSystem."
aBool	ifTrue: [ SystemAnnouncer uniqueInstance classRemoved: aClass fromCategory: aClass category ].self organization removeElement: aClass name.Smalltalk removeFromStartUpList: aClass.Smalltalk removeFromShutDownList: aClass.self removeKey: aClass name ifAbsent: [  ].self flushClassNameCache
]

Class SystemDictionary >> hasClassNamed: aString
[
	"Answer whether there is a class of the given name, but don't intern aString if it's not alrady interned."
Symbol hasInterned: aString ifTrue: [ :aSymbol | ^ (self at: aSymbol ifAbsent: [ nil ]) isKindOf: Class ].^ false
]

Class SystemDictionary >> removeClassNamed: aName
[
	"Invoked from fileouts:  if there is currently a class in the system named aName, then remove it.  If anything untoward happens, report it in the Transcript.  "
| oldClass |(oldClass := self at: aName asSymbol ifAbsent: [ nil ]) == nil	ifTrue: [ 		self crTrace: 'Removal of class named ' , aName , ' ignored because ' , aName , ' does not exist.'.		^ self ].oldClass removeFromSystem
]

Class SystemDictionary >> organization
[
	"Return the organizer for the receiver"
^ self at: #SystemOrganization
]

Class SystemDictionary >> allClasses
[
	"Return all the class defines in the Smalltalk SystemDictionary"
^ self classNames collect: [ :name | self at: name ]
]

Class SystemDictionary >> organization: anOrganization
[
	"Return the organizer for the receiver"
anOrganization environment: self.^ self at: #SystemOrganization put: anOrganization
]

Class SystemDictionary >> allClassesAndTraitsDo: aBlock
[
	"Evaluate the argument, aBlock, for each class and trait in the system."
^ self classAndTraitNames do: [ :each | aBlock value: (self at: each) ]
]

Class SystemDictionary >> allClassesAndTraits
[
	"Return all the classes and traits defined in the Smalltalk SystemDictionary"
^ self classAndTraitNames collect: [ :each | self at: each ]
]

Class SystemDictionary >> poolUsers
[
	"Answer a dictionary of pool name -> classes that refer to it.	Also includes any globally know dictionaries (such as	Smalltalk, Undeclared etc) which although not strictly	accurate is potentially useful information"
	"Smalltalk poolUsers"
| poolUsers |poolUsers := Dictionary new.self keys	do: [ :k | 		| pool refs |		"yes, using isKindOf: is tacky but for reflective code like			this it is very useful. If you really object you can:-			a) go boil your head.			b) provide a better answer.			your choice."		(((pool := self at: k) isKindOf: Dictionary) or: [ pool isKindOf: SharedPool class ])			ifTrue: [ 				refs := self systemNavigation allClasses					select: [ :c | c sharedPools identityIncludes: pool ]					thenCollect: [ :c | c name ].				refs add: (self systemNavigation allReferencesTo: (self associationAt: k)).				poolUsers at: k put: refs ] ].^ poolUsers
]

Class SystemDictionary >> printElementsOn: aStream
[
aStream nextPutAll: '(lots of globals)'
]

Class SystemDictionary >> traitNames
[
	"Answer a SortedCollection of all traits (not including class-traits) names."
^ self nonClassNames	select: [ :name | self at: name ifPresent: [ :global | global isTrait and: [ global isObsolete not ] ] ifAbsent: [ false ] ]
]

Class SystemDictionary >> nonClassNames
[
	"Answer a sorted collection of all non-class names. Use the return value of #fillCaches to avoid concurrency issues."
^ cachedNonClassNames ifNil: [ self fillCaches at: 2 ]
]

Metaclass
	name: #SystemDictionary;
	instanceVariables: #().

Metaclass SystemDictionary >> withOrganizer: anOrganizer
[
| dictionary |dictionary := self new.dictionary organization: anOrganizer.	"update too the back pointer"^ dictionary
]

