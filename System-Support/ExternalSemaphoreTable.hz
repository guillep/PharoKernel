Class	name: #ExternalSemaphoreTable;	superclass: #ClassObject;	instanceSpecification: #(#pointers #words );	instanceVariables: #();	classVariables: #(#ProtectRemove #ProtectAdd );	package: #'System-Support'.Metaclass	name: #ExternalSemaphoreTable;	instanceVariables: #().Metaclass ExternalSemaphoreTable >> collectionBasedOn: externalObjects withRoomFor: anObject[	"Called if no slots to put anObject in have been found in externalObjects "	"Return a externalObject collection which does, either:		- Same collection with some slots freed up by finalization logic		- A larger array, which has replaced the parameter as canonical externalObject array.	An error must be raised if this method is incapable of fulfilling its duties"| newObjects newSize |"grow linearly"newSize := externalObjects size + 20.(self freedSlotsIn: externalObjects ratherThanIncreaseSizeTo: newSize)	ifTrue: [ newObjects := externalObjects ]	ifFalse: [ 		newObjects := externalObjects species new: newSize.		newObjects			replaceFrom: 1			to: externalObjects size			with: externalObjects			startingAt: 1.		self unprotectedExternalObjects: newObjects ].^ newObjects]Metaclass ExternalSemaphoreTable >> slotFor: anObject in: aCollection[	"find the first empty slot, or nil if there is none"	"The following was written in an atomic fashion using special methods with no suspension points, not sure if on purpose, but keeping it that way for now.	Uses should be protected by the ProtectTable semaphore anyhow, but... it's too much work to reason 100% about it"| firstEmptyIndex |1 to: aCollection size do: [ :i | 	| obj |	obj := aCollection at: i.	obj == anObject		ifTrue: [ ^ i ].	"object already there, just return its index"	(firstEmptyIndex == nil and: [ obj == nil ])		ifTrue: [ firstEmptyIndex := i ] ].^ firstEmptyIndex]Metaclass ExternalSemaphoreTable >> unprotectedExternalObjects[^ Smalltalk specialObjectsArray at: 39]Metaclass ExternalSemaphoreTable >> safelyRegisterExternalObject: anObject[	"Register the given object in the external objects array and return its index. If it is already there, just return its index."| objects firstEmptyIndex obj sz newObjects |objects := self unprotectedExternalObjects.	"find the first empty slot"firstEmptyIndex := (self slotFor: anObject in: objects)	ifNil: [ 		"if object has no empty slots,  we need to get a collection which does"		objects := self collectionBasedOn: objects withRoomFor: anObject.		self slotFor: anObject in: objects ].objects at: firstEmptyIndex put: anObject.^ firstEmptyIndex]Metaclass ExternalSemaphoreTable >> unprotectedExternalObjects: aCollection[^ Smalltalk specialObjectsArray at: 39 put: aCollection]Metaclass ExternalSemaphoreTable >> unregisterExternalObject: anObject[ProtectRemove critical: [ self safelyUnregisterExternalObject: anObject ]]Metaclass ExternalSemaphoreTable >> clearExternalObjects[	"Clear the array of objects that have been registered for use in non-Smalltalk code."	"Only lock additions, removals executing in parallel would have little effect on the resulting array"ProtectAdd critical: [ self unprotectedExternalObjects: Array new ]]Metaclass ExternalSemaphoreTable >> safelyUnregisterExternalObject: anObject[	"Unregister the given object in the external objects array. Do nothing if it isn't registered.	JMM change to return if we clear the element, since it should only appear once in the array"| objects |anObject ifNil: [ ^ self ].objects := self unprotectedExternalObjects.1 to: objects size do: [ :i | 	(objects at: i) == anObject		ifTrue: [ 			objects at: i put: nil.			^ self ] ]]Metaclass ExternalSemaphoreTable >> externalObjects[	"Not really sure why this is protected, once called you are out of protection of the locks anyways, and any use of the object is dangerous...	Only additions can potentially change the actual array in use though, so only lock that."^ ProtectAdd critical: [ self unprotectedExternalObjects ]]Metaclass ExternalSemaphoreTable >> initialize[ProtectAdd := Semaphore forMutualExclusion.ProtectRemove := Semaphore forMutualExclusion]Metaclass ExternalSemaphoreTable >> registerExternalObject: anObject[^ ProtectAdd critical: [ self safelyRegisterExternalObject: anObject ]]Metaclass ExternalSemaphoreTable >> freedSlotsIn: externalObjects ratherThanIncreaseSizeTo: newSize[	"In some VM's, the external object table has a max size, which has to be increased for vm to reference them correctly."	"In that case, try to gc to free slots first before actually increasing the max size"	"Return whether I ended up freeing slots by GC'ing, or one should increase the size of "^ Smalltalk vm maxExternalSemaphores	ifNotNil: [ :maxSize | 		maxSize < newSize			and: [ 				| needToGrow |				Smalltalk garbageCollect.	"Do we have free slots now? If not, performing the GC didn't help and we still have to grow."				needToGrow := externalObjects includes: nil.				needToGrow					ifTrue: [ 						"If we did GC, warn we had to gc so actions could be taken if appropriate."						self							traceCr: TimeStamp now printString;							traceCr: 'WARNING:  Had to GC to make room for more external objects.';							traceCr: 'If this happens often, it would be a good idea to either:';							traceCr: '- Raise the maxExternalObjects size.';							traceCr: '- Write your code to explicitly release them rather than wait for finalization.' ]					ifFalse: [ Smalltalk vm maxExternalSemaphores: newSize ].				needToGrow ] ]	ifNil: [ false ]]