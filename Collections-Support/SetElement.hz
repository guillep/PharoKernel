Class
	name: #SetElement;
	superclass: #ClassObject;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#enclosedElement );
	classVariables: #(#NilElement );
	package: #'Collections-Support'.

Class SetElement >> hash
[
^ enclosedElement hash
]

Class SetElement >> = anObject
[
^ anObject class = self class and: [ enclosedElement = anObject enclosedSetElement ]
]

Class SetElement >> enclosedSetElement
[
^ enclosedElement
]

Class SetElement >> asSetElement
[
	"A receiver has to be included into a set, as a distinct object.	We need to wrap receiver in own turn, otherwise #enclosedSetElement will return wrong object for that set"
^ SetElement with: self
]

Class SetElement >> enclosedSetElement: anObject
[
enclosedElement := anObject
]

Metaclass
	name: #SetElement;
	instanceVariables: #().

Metaclass SetElement >> withNil
[
^ NilElement
]

Metaclass SetElement >> initialize
[
NilElement := self with: nil
]

Metaclass SetElement >> with: anObject
[
^ self new enclosedSetElement: anObject
]

