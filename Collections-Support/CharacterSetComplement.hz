Class
	name: #CharacterSetComplement;
	superclass: #ClassCollection;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#absent #byteArrayMapCache );
	classVariables: #();
	package: #'Collections-Support'.

Class CharacterSetComplement >> do: aBlock
[
	"evaluate aBlock with each character in the set.	don't do it, there are too many..."
self shouldNotImplement
]

Class CharacterSetComplement >> hasWideCharacters
[
	"This is a guess that absent is not holding each and every possible wideCharacter..."
^ true
]

Class CharacterSetComplement >> add: aCharacter
[
	"a character is present if not absent, so adding a character is removing it from the absent"
(absent includes: aCharacter)	ifTrue: [ 		byteArrayMapCache := nil.		absent remove: aCharacter ].^ aCharacter
]

Class CharacterSetComplement >> removeAll
[
self becomeForward: CharacterSet new
]

Class CharacterSetComplement >> storeOn: aStream
[
	"Store a description of the elements of the complement rather than self."
aStream nextPut: $(.absent storeOn: aStream.aStream	nextPut: $);	space;	nextPutAll: #complement
]

Class CharacterSetComplement >> postCopy
[
super postCopy.absent := absent copy
]

Class CharacterSetComplement >> reject: aBlock
[
	"Implementation note: rejecting present is selecting absent"
^ (absent select: aBlock) complement
]

Class CharacterSetComplement >> byteArrayMap
[
	"return a ByteArray mapping each ascii value to a 1 if that ascii value is in the set, and a 0 if it isn't.  Intended for use by primitives only"
^ byteArrayMapCache ifNil: [ byteArrayMapCache := absent byteArrayMap collect: [ :i | 1 - i ] ]
]

Class CharacterSetComplement >> = anObject
[
	"Implementation note: we do not test if equal to a WideCharacterSet,	because it is unlikely that WideCharacterSet is as complete as self"
^ self class == anObject class and: [ absent = anObject complement ]
]

Class CharacterSetComplement >> hash
[
^ absent hash bitXor: self class hash
]

Class CharacterSetComplement >> complement
[
	"return a character set containing precisely the characters the receiver does not"
^ absent copy
]

Class CharacterSetComplement >> remove: aCharacter
[
	"This means aCharacter is now absent from myself.	It must be added to my absent."
byteArrayMapCache := nil.^ absent add: aCharacter
]

Class CharacterSetComplement >> complement: aCharacterSet
[
	"initialize with the complement"
byteArrayMapCache := nil.absent := aCharacterSet
]

Class CharacterSetComplement >> select: aBlock
[
	"Implementation note: selecting present is rejecting absent"
^ (absent reject: aBlock) complement
]

Class CharacterSetComplement >> findFirstInByteString: aByteString startingAt: startIndex
[
	"Double dispatching: since we know this is a ByteString, we can use a superfast primitive using a ByteArray map with 0 slots for byte characters not included and 1 for byte characters included in the receiver."
^ ByteString findFirstInString: aByteString inSet: self byteArrayMap startingAt: startIndex
]

Class CharacterSetComplement >> printOn: aStream
[
	"Print a description of the complement rather than self.	Rationale: self would be too long to print."
aStream nextPut: $(.absent printOn: aStream.aStream	nextPut: $);	space;	nextPutAll: #complement
]

Class CharacterSetComplement >> size
[
	"Is this 2**32-absent size ?"
^ self shouldNotImplement
]

Class CharacterSetComplement >> includes: aCharacter
[
^ (absent includes: aCharacter) not
]

Class CharacterSetComplement >> remove: aCharacter ifAbsent: aBlock
[
(self includes: aCharacter)	ifFalse: [ ^ aBlock value ].^ self remove: aCharacter
]

Metaclass
	name: #CharacterSetComplement;
	instanceVariables: #().

Metaclass CharacterSetComplement >> of: aCharacterSet
[
	"answer the complement of aCharacterSet"
^ super new complement: aCharacterSet
]

