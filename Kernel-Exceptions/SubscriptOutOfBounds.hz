Class
	name: #SubscriptOutOfBounds;
	superclass: #ClassError;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#subscript #lowerBound #upperBound );
	classVariables: #();
	package: #'Kernel-Exceptions'.

Class SubscriptOutOfBounds >> lowerBound
[
^ lowerBound
]

Class SubscriptOutOfBounds >> lowerBound: anObject
[
lowerBound := anObject
]

Class SubscriptOutOfBounds >> standardMessageText
[
	"Generate a standard textual description"
^ String	streamContents: [ :stream | 		self subscript ifNil: [ stream << 'subscript' ] ifNotNil: [ stream print: self subscript ].		(self lowerBound notNil and: [ self upperBound notNil ])			ifTrue: [ 				stream << ' is not between '.				stream print: self lowerBound.				stream << ' and '.				stream print: self upperBound ] ]
]

Class SubscriptOutOfBounds >> subscript: anObject
[
subscript := anObject
]

Class SubscriptOutOfBounds >> upperBound
[
^ upperBound
]

Class SubscriptOutOfBounds >> upperBound: anObject
[
upperBound := anObject
]

Class SubscriptOutOfBounds >> messageText
[
	"Overwritten to initialiaze the message text to a standard text if it has not yet been set"
^ messageText ifNil: [ messageText := self standardMessageText ]
]

Class SubscriptOutOfBounds >> subscript
[
^ subscript
]

Metaclass
	name: #SubscriptOutOfBounds;
	instanceVariables: #().

Metaclass SubscriptOutOfBounds >> signalFor: subscript
[
^ self signalFor: subscript lowerBound: nil upperBound: nil
]

Metaclass SubscriptOutOfBounds >> signalFor: subscript lowerBound: lowerBound upperBound: upperBound in: object
[
^ self new	signaler: object;	subscript: subscript;	lowerBound: lowerBound;	upperBound: upperBound;	signal
]

Metaclass SubscriptOutOfBounds >> signalFor: subscript lowerBound: lowerBound upperBound: upperBound
[
^ self	signalFor: subscript	lowerBound: lowerBound	upperBound: upperBound	in: nil
]

