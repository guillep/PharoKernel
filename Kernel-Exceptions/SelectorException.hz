Class
	name: #SelectorException;
	superclass: #ClassError;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#selector );
	classVariables: #();
	package: #'Kernel-Exceptions'.

Class SelectorException >> messageText
[
	"Overwritten to initialiaze the message text to a standard text if it has not yet been set"
^ messageText ifNil: [ messageText := self standardMessageText ]
]

Class SelectorException >> selector: aSelector
[
selector := aSelector
]

Class SelectorException >> standardMessageText
[
	"Generate a standard textual description"
^ String	streamContents: [ :stream | 		stream << 'for '.		stream print: self selector.		stream << ' in '.		stream print: self signaler class ]
]

Class SelectorException >> selector
[
^ selector
]

Metaclass
	name: #SelectorException;
	instanceVariables: #().

Metaclass SelectorException >> signalFor: aSelector
[
	"Create and signal an exception for aSelector in the default receiver."
^ self new	selector: aSelector;	signal
]

Metaclass SelectorException >> signalFor: aSelector in: aReceiver
[
	"Create and signal an exception for aSelector in aReceiver."
^ self new	object: aSelector;	signaler: aReceiver;	signal
]

