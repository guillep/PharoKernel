Class	name: #Stopwatch;	superclass: #ClassObject;	instanceSpecification: #(#pointers #words );	instanceVariables: #(#timespans #state );	classVariables: #();	package: #'Kernel-Chronology'.Class Stopwatch >> reset[self suspend.timespans := nil]Class Stopwatch >> duration[| ts last |self isSuspended	ifTrue: [ 		(ts := self timespans) isEmpty			ifTrue: [ ts := {(Timespan starting: DateAndTime now duration: Duration zero)} ] ]	ifFalse: [ 		last := self timespans last.		ts := self timespans allButLast			add:					(last							duration: DateAndTime now - last start;							yourself);			yourself ].^ (ts collect: [ :t | t duration ]) sum]Class Stopwatch >> state[^ state ifNil: [ state := #suspended ]]Class Stopwatch >> state: aSymbol[state := aSymbol]Class Stopwatch >> printOn: aStream[super printOn: aStream.aStream	nextPut: $(;	nextPutAll: self state;	nextPut: $:;	print: self duration;	nextPut: $)]Class Stopwatch >> end[^ self timespans last next]Class Stopwatch >> isSuspended[^ self state = #suspended]Class Stopwatch >> activate[self isSuspended	ifTrue: [ 		self timespans add: (Timespan starting: DateAndTime now duration: Duration zero).		self state: #active ]]Class Stopwatch >> isActive[^ self state = #active]Class Stopwatch >> timespans[^ timespans ifNil: [ timespans := OrderedCollection new ]]Class Stopwatch >> reActivate[self	suspend;	activate]Class Stopwatch >> start[^ self timespans first start]Class Stopwatch >> suspend[| ts |self isActive	ifTrue: [ 		ts := self timespans last.		ts duration: DateAndTime now - ts start.		self state: #suspended ]]Metaclass	name: #Stopwatch;	instanceVariables: #().