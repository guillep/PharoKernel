Class
	name: #ProtoObject;
	superclass: nil;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #();
	classVariables: #();
	package: #'Kernel-Objects'.

Class ProtoObject >> == anObject
[
	"Primitive. Answer whether the receiver and the argument are the same 	object (have the same object pointer). Do not redefine the message == in 	any other class! Essential. No Lookup. Do not override in any subclass. 	See Object documentation whatIsAPrimitive."
	<primitive: 110>
self primitiveFailed
]

Class ProtoObject >> basicIdentityHash
[
	"Answer a SmallInteger whose value is related to the receiver's identity.	This method must not be overridden, except by SmallInteger.	Primitive. Fails if the receiver is a SmallInteger. Essential.	See Object documentation whatIsAPrimitive.	Do not override. Use #identityHash unless you really know what you're doing.'"
	<primitive: 75>
self primitiveFailed
]

Class ProtoObject >> become: otherObject
[
	"Primitive. Swap the object pointers of the receiver and the argument.	All variables in the entire system that used to point to the 	receiver now point to the argument, and vice-versa.	Fails if either object is a SmallInteger"
(Array with: self) elementsExchangeIdentityWith: (Array with: otherObject)
]

Class ProtoObject >> cannotInterpret: aMessage
[
	"Handle the fact that there was an attempt to send the given message to the receiver but a null methodDictionary was encountered while looking up the message selector.  Hopefully this is the result of encountering a stub for a swapped out class which induces this exception on purpose."
	"If this is the result of encountering a swap-out stub, then simulating the lookup in Smalltalk should suffice to install the class properly, and the message may be resent."
(self class lookupSelector: aMessage selector) == nil	ifFalse: [ 		"Simulated lookup succeeded -- resend the message."		^ aMessage sentTo: self ].	"Could not recover by simulated lookup -- it's an error"Error signal: 'MethodDictionary fault'.	"Try again in case an error handler fixed things"^ aMessage sentTo: self
]

Class ProtoObject >> doOnlyOnce: aBlock
[
	"If the 'one-shot' mechanism is armed, evaluate aBlock once and disarm the one-shot mechanism.  To rearm the mechanism, evaluate  'self rearmOneShot' manually."
(Smalltalk globals at: #OneShotArmed ifAbsent: [ true ])	ifTrue: [ 		Smalltalk globals at: #OneShotArmed put: false.		aBlock value ]
]

Class ProtoObject >> doesNotUnderstand: aMessage
[
^ MessageNotUnderstood new	message: aMessage;	receiver: self;	signal
]

Class ProtoObject >> flag: aSymbol
[
	"Send this message, with a relevant symbol as argument, to flag a message for subsequent retrieval.  For example, you might put the following line in a number of messages:	self flag: #returnHereUrgently	Then, to retrieve all such messages, browse all senders of #returnHereUrgently."

]

Class ProtoObject >> identityHash
[
	"Answer a SmallInteger whose value is related to the receiver's identity.	This method must not be overridden, except by SmallInteger.		Do not override."
^ self basicIdentityHash bitShift: 18
]

Class ProtoObject >> ifNil: nilBlock
[
	"Return self, or evaluate the block if I'm == nil (q.v.)"
^ self
]

Class ProtoObject >> ifNil: nilBlock ifNotNil: ifNotNilBlock
[
	"Evaluate the block, unless I'm == nil (q.v.)"
^ ifNotNilBlock cull: self
]

Class ProtoObject >> ifNotNil: ifNotNilBlock
[
	"Evaluate the block, unless I'm == nil (q.v.)"
^ ifNotNilBlock cull: self
]

Class ProtoObject >> ifNotNil: ifNotNilBlock ifNil: nilBlock
[
	"If I got here, I am not nil, so evaluate the block ifNotNilBlock"
^ ifNotNilBlock cull: self
]

Class ProtoObject >> initialize
[
	"Subclasses should redefine this method to perform initializations on instance creation"

]

Class ProtoObject >> instVarsInclude: anObject
[
	"Answers true if anObject is among my named or indexed instance variables, and false otherwise"
	<primitive: 132>
1 to: self class instSize do: [ :i | 	(self instVarAt: i) == anObject		ifTrue: [ ^ true ] ].1 to: self basicSize do: [ :i | 	(self basicAt: i) == anObject		ifTrue: [ ^ true ] ].^ false
]

Class ProtoObject >> isNil
[
	"Coerces nil to true and everything else to false."
^ false
]

Class ProtoObject >> nextInstance
[
	"Primitive. Answer the next instance after the receiver in the 	enumeration of all instances of this class. Fails if all instances have been 	enumerated. Essential. See Object documentation whatIsAPrimitive."
	<primitive: 78>
^ nil
]

Class ProtoObject >> nextObject
[
	"Primitive. Answer the next object after the receiver in the 	enumeration of all objects. Return 0 when all objects have been 	enumerated."
	<primitive: 139>
self primitiveFailed
]

Class ProtoObject >> pointersTo
[
^ self pointersToExcept: #()
]

Class ProtoObject >> pointersToExcept: objectsToExclude
[
	"Find all objects in the system that hold a pointer to me, excluding those listed"
| c pointers object objectsToAlwaysExclude |Smalltalk garbageCollect.pointers := OrderedCollection new.	"SystemNavigation >> #allObjectsDo: is inlined here with a slight modification: the marker object is pointers. This gives better results, because the value of pointers, it's inner objects and transient method contexts will not be iterated over."object := self someObject.[ object == pointers ]	whileFalse: [ 		(object pointsTo: self)			ifTrue: [ pointers add: object ].		object := object nextObject ].objectsToAlwaysExclude := {thisContext.(thisContext sender).(thisContext sender sender).objectsToExclude}.c := thisContext.^ (pointers	removeAllSuchThat: [ :ea | 		ea == thisContext sender			or: [ 				"warning: this expression is dependent on closure structure of this method"				(objectsToAlwaysExclude identityIncludes: ea) or: [ objectsToExclude identityIncludes: ea ] ] ]) asArray
]

Class ProtoObject >> pointsTo: anObject
[
	"Answers true if I hold a reference to anObject, or false otherwise"
^ (self instVarsInclude: anObject) or: [ ^ self class == anObject and: [ self class isCompact not ] ]
]

Class ProtoObject >> rearmOneShot
[
	"Call this manually to arm the one-shot mechanism; use the mechanism in code by calling		self doOnlyOnce: <a block>"
Smalltalk globals at: #OneShotArmed put: true	"self rearmOneShot"
]

Class ProtoObject >> tryPrimitive: primIndex withArgs: argumentArray
[
	"This method is a template that the Smalltalk simulator uses to 	execute primitives. See Object documentation whatIsAPrimitive."
	<primitive: 118 error: #code>
^ ContextPart primitiveFailTokenFor: code
]

Class ProtoObject >> withArgs: argArray executeMethod: compiledMethod
[
	"Execute compiledMethod against the receiver and args in argArray"
	<primitive: 188>
self primitiveFailed
]

Class ProtoObject >> ~~ anObject
[
	"Answer whether the receiver and the argument are different objects	(do not have the same object pointer)."
	"This seemingly redundant implementation is for performance (and possibly other) reasons. See http://forum.world.st/About-and-td3898409.html for more details"
self == anObject	ifTrue: [ ^ false ]	ifFalse: [ ^ true ]
]

Metaclass
	name: #ProtoObject;
	instanceVariables: #().

