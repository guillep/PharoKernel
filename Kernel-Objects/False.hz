Class	name: #False;	superclass: #ClassBoolean;	instanceSpecification: #(#pointers #words );	instanceVariables: #();	classVariables: #();	package: #'Kernel-Objects'.Class False >> and: alternativeBlock[	"Nonevaluating conjunction -- answer with false since the receiver is false."^ self]Class False >> printOn: aStream[aStream nextPutAll: 'false']Class False >> asBit[^ 0]Class False >> xor: aBoolean[	"Posted by Eliot Miranda to squeak-dev on 3/24/2009"^ aBoolean value]Class False >> ifTrue: trueAlternativeBlock ifFalse: falseAlternativeBlock[	"Answer the value of falseAlternativeBlock. Execution does not	actually reach here because the expression is compiled in-line."^ falseAlternativeBlock value]Class False >> ifTrue: alternativeBlock[	"Since the condition is false, answer the value of the false alternative, 	which is nil. Execution does not actually reach here because the	expression is compiled in-line."^ nil]Class False >> ifFalse: alternativeBlock[	"Answer the value of alternativeBlock. Execution does not actually	reach here because the expression is compiled in-line."^ alternativeBlock value]Class False >> ifFalse: falseAlternativeBlock ifTrue: trueAlternativeBlock[	"Answer the value of falseAlternativeBlock. Execution does not	actually reach here because the expression is compiled in-line."^ falseAlternativeBlock value]Class False >> & aBoolean[	"Evaluating conjunction -- answer false since receiver is false."^ self]Class False >> or: alternativeBlock[	"Nonevaluating disjunction -- answer value of alternativeBlock."^ alternativeBlock value]Class False >> not[	"Negation -- answer true since the receiver is false."^ true]Class False >> | aBoolean[	"Evaluating disjunction (OR) -- answer with the argument, aBoolean."^ aBoolean]Metaclass	name: #False;	instanceVariables: #().