Class	name: #WeakActionSequence;	superclass: #ClassArray;	instanceSpecification: #(#variable #pointers #words );	instanceVariables: #();	classVariables: #();	package: #'Kernel-Objects'.Class WeakActionSequence >> value[	"Answer the result of evaluating the elements of the receiver.	Actually, return just the last result."| answer |self	do: [ :each | 		each isValid			ifTrue: [ answer := each value ] ].^ answer]Class WeakActionSequence >> asActionSequence[^ self]Class WeakActionSequence >> valueWithArguments: anArray[	"Return the last result"| answer |self	do: [ :each | 		each isValid			ifTrue: [ answer := each valueWithArguments: anArray ] ].^ answer]Class WeakActionSequence >> asMinimalRepresentation[| valid |valid := self select: [ :e | e isValid ].valid size = 0	ifTrue: [ ^ nil ].valid size = 1	ifTrue: [ ^ valid first ].^ valid]Class WeakActionSequence >> printOn: aStream[self size < 2	ifTrue: [ ^ super printOn: aStream ].aStream nextPutAll: '#('.self do: [ :each | each printOn: aStream ] separatedBy: [ aStream cr ].aStream nextPut: $)]Class WeakActionSequence >> asActionSequenceTrappingErrors[^ WeakActionSequenceTrappingErrors withAll: self]Metaclass	name: #WeakActionSequence;	instanceVariables: #().