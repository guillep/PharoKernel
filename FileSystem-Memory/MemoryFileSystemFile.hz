Class
	name: #MemoryFileSystemFile;
	superclass: #ClassMemoryFileSystemEntry;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#bytes #size );
	classVariables: #();
	package: #'FileSystem-Memory'.

Class MemoryFileSystemFile >> readStream
[
^ ReadStream on: bytes from: 1 to: size
]

Class MemoryFileSystemFile >> copyFrom: from to: position
[
^ bytes copyFrom: from to: position
]

Class MemoryFileSystemFile >> internalSize
[
^ bytes size
]

Class MemoryFileSystemFile >> sizeIncrement
[
^ (bytes size min: 20) max: 1024
]

Class MemoryFileSystemFile >> bytes
[
^ bytes
]

Class MemoryFileSystemFile >> at: first write: aCollection startingAt: start count: count
[
| last |last := first + count - 1.last > bytes size	ifTrue: [ self grownBy: last - size ].bytes	replaceFrom: first	to: last	with: aCollection	startingAt: start.size := last
]

Class MemoryFileSystemFile >> grownBy: length
[
bytes := bytes grownBy: length.self modified
]

Class MemoryFileSystemFile >> fileSize
[
^ size
]

Class MemoryFileSystemFile >> at: index put: anObject
[
index > bytes size	ifTrue: [ self grow ].bytes	at: index	put:		(anObject isCharacter			ifTrue: [ anObject codePoint ]			ifFalse: [ anObject ]).size := size max: index
]

Class MemoryFileSystemFile >> initialize
[
super initialize.bytes := #[].size := 0
]

Class MemoryFileSystemFile >> isDirectory
[
^ false
]

Class MemoryFileSystemFile >> truncateTo: aSize
[
bytes size = aSize	ifTrue: [ ^ self ].bytes := bytes copyFrom: 1 to: aSize.size := bytes size.self modified
]

Class MemoryFileSystemFile >> at: index
[
self flag: #todo.	"out of bounds checks?"^ bytes at: index
]

Class MemoryFileSystemFile >> writeStream
[
self flag: #todo.	"need a nicer abstraction here to keep a shared bytes without calling grownBy on every at:put:"^ WriteStream on: self from: 1 to: size
]

Class MemoryFileSystemFile >> grow
[
self grownBy: self sizeIncrement
]

Class MemoryFileSystemFile >> at: index read: aCollection startingAt: start count: count
[
| max stop |max := size - index + 1 min: count.stop := start + max - 1.aCollection	replaceFrom: start	to: stop	with: bytes	startingAt: index.^ stop - start + 1
]

Class MemoryFileSystemFile >> updateSize: newSize
[
size := newSize.modificationTime := nil
]

Class MemoryFileSystemFile >> truncate
[
self truncateTo: size
]

Metaclass
	name: #MemoryFileSystemFile;
	instanceVariables: #().

