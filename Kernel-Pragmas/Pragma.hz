Class
	name: #Pragma;
	superclass: #ClassObject;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#method #keyword #arguments );
	classVariables: #();
	package: #'Kernel-Pragmas'.

Class Pragma >> hasLiteral: aLiteral
[
^ keyword == aLiteral or: [ arguments hasLiteral: aLiteral ]
]

Class Pragma >> key
[
	"Answer the keyword of the pragma (the selector of its message pattern).	 This accessor provides polymorphism with Associations used for properties."
^ keyword
]

Class Pragma >> analogousCodeTo: anObject
[
^ self class == anObject class and: [ keyword == anObject keyword and: [ arguments = anObject arguments ] ]
]

Class Pragma >> withArgumentsDo: aBlock
[
	"Pass the arguments of the receiving pragma into aBlock and answer the result."
^ aBlock valueWithArguments: self arguments
]

Class Pragma >> numArgs
[
	"Answer the number of arguments in the pragma."
^ self arguments size
]

Class Pragma >> method
[
	"Answer the compiled-method containing the pragma."
^ method
]

Class Pragma >> arguments
[
	"Answer the arguments of the receiving pragma. For a pragma defined as <key1: val1 key2: val2> this will answer #(val1 val2)."
^ arguments
]

Class Pragma >> keyword
[
	"Answer the keyword of the pragma (the selector of its message pattern).	 For a pragma defined as <key1: val1 key2: val2> this will answer #key1:key2:."
^ keyword
]

Class Pragma >> = aPragma
[
self == aPragma	ifTrue: [ ^ true ].self species == aPragma species	ifFalse: [ ^ false ].self method = aPragma method	ifFalse: [ ^ false ].self keyword = aPragma keyword	ifFalse: [ ^ false ].self arguments = aPragma arguments	ifFalse: [ ^ false ].^ true
]

Class Pragma >> methodClass
[
	"Answer the class of the method containing the pragma."
^ method methodClass
]

Class Pragma >> hash
[
| hash |hash := self method hash bitXor: self keyword hash.1 to: self basicSize do: [ :index | hash := hash bitXor: (self basicAt: index) hash ].^ hash
]

Class Pragma >> hasLiteralSuchThat: aBlock
[
	"Answer true if litBlock returns true for any literal in the receiver, even if embedded in further array structure.	 This method is only intended for private use by CompiledMethod hasLiteralSuchThat:"
^ (aBlock value: keyword) or: [ arguments hasLiteralSuchThat: aBlock ]
]

Class Pragma >> setMethod: aCompiledMethod
[
method := aCompiledMethod
]

Class Pragma >> sendTo: anObject
[
	"Send the pragma keyword together with its arguments to anObject and answer the result."
^ anObject perform: self keyword withArguments: self arguments
]

Class Pragma >> message
[
	"Answer the message of the receiving pragma."
^ Message selector: self keyword arguments: self arguments
]

Class Pragma >> setKeyword: aSymbol
[
keyword := aSymbol
]

Class Pragma >> printOn: aStream
[
aStream nextPut: $<.self keyword precedence = 1	ifTrue: [ aStream nextPutAll: self keyword ]	ifFalse: [ 		self keyword keywords			with: self arguments			do: [ :key :arg | 				aStream					nextPutAll: key;					space;					print: arg;					space ].		aStream skip: -1 ].aStream nextPut: $>
]

Class Pragma >> argumentAt: anInteger
[
	"Answer one of the arguments of the pragma."
^ self arguments at: anInteger
]

Class Pragma >> setArguments: anArray
[
arguments := anArray
]

Class Pragma >> selector
[
	"Answer the selector of the method containing the pragma.	 Do not confuse this with the selector of the pragma's message pattern."
^ method selector
]

Metaclass
	name: #Pragma;
	instanceVariables: #().

Metaclass Pragma >> withPragmasIn: aClass do: aBlock
[
aClass selectorsAndMethodsDo: [ :selector :method | method pragmas do: aBlock ]
]

Metaclass Pragma >> allNamed: aSymbol in: aClass sortedUsing: aSortBlock
[
	"Answer a collection of all pragmas found in methods of aClass whose keyword is aSymbol, sorted according to aSortBlock."
^ (self allNamed: aSymbol in: aClass) sort: aSortBlock
]

Metaclass Pragma >> keyword: aSymbol arguments: anArray
[
^ self new	setKeyword: aSymbol;	setArguments: anArray;	yourself
]

Metaclass Pragma >> allNamed: aSymbol in: aClass sortedByArgument: anInteger
[
	"Answer a collection of all pragmas found in methods of aClass whose keyword is aSymbol, sorted according to argument anInteger."
^ self allNamed: aSymbol in: aClass sortedUsing: [ :a :b | (a argumentAt: anInteger) < (b argumentAt: anInteger) ]
]

Metaclass Pragma >> allNamed: aSymbol in: aClass
[
	"Answer a collection of all pragmas found in methods of aClass whose keyword is aSymbol."
^ Array	streamContents: [ :stream | 		self			withPragmasIn: aClass			do: [ :pragma | 				pragma keyword = aSymbol					ifTrue: [ stream nextPut: pragma ] ] ]
]

Metaclass Pragma >> for: aMethod selector: aSelector arguments: anArray
[
^ self new	setMethod: aMethod;	setKeyword: aSelector;	setArguments: anArray;	yourself
]

Metaclass Pragma >> allNamed: aSymbol from: aSubClass to: aSuperClass sortedUsing: aSortBlock
[
	"Answer a collection of all pragmas found in methods of all classes between aSubClass and aSuperClass (inclusive) whose keyword is aSymbol, sorted according to aSortBlock."
^ (self allNamed: aSymbol from: aSubClass to: aSuperClass) sort: aSortBlock
]

Metaclass Pragma >> allNamed: aSymbol from: aSubClass to: aSuperClass sortedByArgument: anInteger
[
	"Answer a collection of all pragmas found in methods of all classes between aSubClass and aSuperClass (inclusive) whose keyword is aSymbol, sorted according to argument anInteger."
^ self	allNamed: aSymbol	from: aSubClass	to: aSuperClass	sortedUsing: [ :a :b | (a argumentAt: anInteger) < (b argumentAt: anInteger) ]
]

Metaclass Pragma >> allNamed: aSymbol from: aSubClass to: aSuperClass
[
	"Answer a collection of all pragmas found in methods of all classes between aSubClass and aSuperClass (inclusive) whose keyword is aSymbol."
^ Array	streamContents: [ :stream | 		aSubClass			withAllSuperclassesDo: [ :class | 				self					withPragmasIn: class					do: [ :pragma | 						pragma keyword = aSymbol							ifTrue: [ stream nextPut: pragma ] ].				aSuperClass = class					ifTrue: [ ^ stream contents ] ] ]
]

