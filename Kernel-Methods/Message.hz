Class
	name: #Message;
	superclass: #ClassObject;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#selector #args #lookupClass );
	classVariables: #();
	package: #'Kernel-Methods'.

Class Message >> analogousCodeTo: anObject
[
	"For MethodPropertires comparison."
^ self class == anObject class	and: [ selector == anObject selector and: [ args = anObject arguments and: [ lookupClass == anObject lookupClass ] ] ]
]

Class Message >> argument
[
	"Answer the first (presumably sole) argument"
^ args at: 1
]

Class Message >> sendTo: receiver
[
	"answer the result of sending this message to receiver"
^ receiver perform: selector withArguments: args
]

Class Message >> setSelector: aSymbol
[
selector := aSymbol
]

Class Message >> printOn: stream
[
args isEmpty	ifTrue: [ ^ stream nextPutAll: selector ].args	with: selector keywords	do: [ :arg :word | 		stream nextPutAll: word.		stream space.		arg printOn: stream.		stream space ].stream skip: -1
]

Class Message >> selector
[
	"Answer the selector of the receiver."
^ selector
]

Class Message >> sends: aSelector
[
	"answer whether this message's selector is aSelector"
^ selector == aSelector
]

Class Message >> sentTo: receiver
[
	"answer the result of sending this message to receiver"
lookupClass == nil	ifTrue: [ ^ receiver perform: selector withArguments: args ]	ifFalse: [ ^ receiver perform: selector withArguments: args inSuperclass: lookupClass ]
]

Class Message >> lookupClass: aClass
[
lookupClass := aClass
]

Class Message >> argument: newValue
[
	"Change the first argument to newValue and answer self"
args at: 1 put: newValue
]

Class Message >> setSelector: aSymbol arguments: anArray
[
selector := aSymbol.args := anArray
]

Class Message >> hasArguments
[
^ args size > 0
]

Class Message >> arguments
[
	"Answer the arguments of the receiver."
^ args
]

Class Message >> numArgs
[
	"Answer the number of arguments in this message"
^ args size
]

Class Message >> storeOn: aStream
[
	"Refer to the comment in Object|storeOn:."
aStream	nextPut: $(;	nextPutAll: self class name;	nextPutAll: ' selector: ';	store: selector;	nextPutAll: ' arguments: ';	store: args;	nextPut: $)
]

Class Message >> lookupClass
[
^ lookupClass
]

Metaclass
	name: #Message;
	instanceVariables: #().

Metaclass Message >> selector: aSymbol arguments: anArray
[
	"Answer an instance of me with selector, aSymbol, and arguments, 	anArray."
^ self new setSelector: aSymbol arguments: anArray
]

Metaclass Message >> selector: aSymbol
[
	"Answer an instance of me with unary selector, aSymbol."
^ self new setSelector: aSymbol arguments: (Array new: 0)
]

Metaclass Message >> selector: aSymbol argument: anObject
[
	"Answer an instance of me whose selector is aSymbol and single 	argument is anObject."
^ self new setSelector: aSymbol arguments: (Array with: anObject)
]

