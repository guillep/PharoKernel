Class
	name: #MethodDictionary;
	superclass: #ClassDictionary;
	instanceSpecification: #(#variable #pointers #words );
	instanceVariables: #();
	classVariables: #();
	package: #'Kernel-Methods'.

Class MethodDictionary >> at: key put: value
[
	"Set the value at key to be value."
| index |index := self findElementOrNil: key.(self basicAt: index)	ifNil: [ 		tally := tally + 1.		self basicAt: index put: key ]	ifNotNil: [ (array at: index) flushCache ].array at: index put: value.self fullCheck.^ value
]

Class MethodDictionary >> fixCollisionsFrom: start
[
	"The element at start has been removed and replaced by nil.	This method moves forward from there, relocating any entries	that had been placed below due to collisions with this one."
| key index |index := start.[ (key := self basicAt: (index := index \\ array size + 1)) == nil ]	whileFalse: [ 		| newIndex |		(newIndex := self findElementOrNil: key) = index			ifFalse: [ self swap: index with: newIndex ] ]
]

Class MethodDictionary >> keysAndValuesDo: aBlock
[
	"Enumerate the receiver with all the keys and values passed to the block"
tally = 0	ifTrue: [ ^ self ].1 to: self basicSize do: [ :i | (self basicAt: i) ifNotNil: [ :key | aBlock value: key value: (array at: i) ] ]
]

Class MethodDictionary >> rehash
[
| newInstance |newInstance := self species newForCapacity: self basicSize.1 to: self basicSize do: [ :index | (self basicAt: index) ifNotNil: [ :key | newInstance at: key put: (array at: index) ] ].self copyFrom: newInstance
]

Class MethodDictionary >> at: key ifAbsent: aBlock
[
| index |index := self findElementOrNil: key.(self basicAt: index) ifNil: [ ^ aBlock value ].^ array at: index
]

Class MethodDictionary >> associationAt: key ifAbsent: aBlock
[
	"Answer the association with the given key.       If key is not found, return the result of evaluating aBlock."
^ (array at: (self scanFor: key)) ifNil: [ aBlock value ] ifNotNil: [ :value | key -> value ]
]

Class MethodDictionary >> add: anAssociation
[
^ self at: anAssociation key put: anAssociation value
]

Class MethodDictionary >> at: key ifPresent: aBlock
[
^ (array at: (self findElementOrNil: key)) ifNotNil: [ :value | aBlock cull: value ]
]

Class MethodDictionary >> removeAll
[
	"Remove all elements from this collection. Preserve the capacity"
| newSelf |tally = 0	ifTrue: [ ^ self ].newSelf := self species newForCapacity: self basicSize.self copyFrom: newSelf
]

Class MethodDictionary >> removeKey: key ifAbsent: errorBlock
[
	"The interpreter might be using this MethodDictionary while	this method is running! Therefore we perform the removal	in a copy, and then atomically copy that copy"
| copy removedValue |copy := self copy.removedValue := copy removeDangerouslyKey: key ifAbsent: [ ^ errorBlock value ].self copyFrom: copy.^ removedValue
]

Class MethodDictionary >> valuesDo: aBlock
[
tally = 0	ifTrue: [ ^ self ].1 to: self basicSize do: [ :i | (array at: i) ifNotNil: [ :value | aBlock value: value ] ]
]

Class MethodDictionary >> associationsDo: aBlock
[
tally = 0	ifTrue: [ ^ self ].1 to: self basicSize do: [ :i | (self basicAt: i) ifNotNil: [ :key | aBlock value: (Association key: key value: (array at: i)) ] ]
]

Class MethodDictionary >> postCopy
[
array := array copy
]

Class MethodDictionary >> keyAtValue: value ifAbsent: exceptionBlock
[
	"Answer the key whose value equals the argument, value. If there is	none, answer the result of evaluating exceptionBlock."
1 to: self basicSize do: [ :index | 	value = (array at: index)		ifTrue: [ (self basicAt: index) ifNotNil: [ :theKey | ^ theKey ] ] ].^ exceptionBlock value
]

Class MethodDictionary >> swap: oneIndex with: otherIndex
[
| element |element := self basicAt: oneIndex.self basicAt: oneIndex put: (self basicAt: otherIndex).self basicAt: otherIndex put: element.array swap: oneIndex with: otherIndex
]

Class MethodDictionary >> grow
[
| newSelf |newSelf := self species newForCapacity: self basicSize * 2.1 to: self basicSize do: [ :i | (self basicAt: i) ifNotNil: [ :key | newSelf at: key put: (array at: i) ] ].self becomeForward: newSelf
]

Class MethodDictionary >> scanFor: anObject
[
	"Scan the key array for the first slot containing either a nil (indicating an empty slot) or an element that matches anObject. Answer the index of that slot or zero if no slot is found. This method will be overridden in various subclasses that have different interpretations for matching elements."
| element start finish |finish := array size.start := anObject basicIdentityHash \\ finish + 1.	"Search from (hash mod size) to the end."start to: finish do: [ :index | 	((element := self basicAt: index) isNil or: [ element == anObject ])		ifTrue: [ ^ index ] ].	"Search from 1 to where we started."1 to: start - 1 do: [ :index | 	((element := self basicAt: index) isNil or: [ element == anObject ])		ifTrue: [ ^ index ] ].^ 0	"No match AND no empty slot"
]

Class MethodDictionary >> isHealthy
[
	"Test that selector hashes match their positions stored in dictionary,	answer true if everything ok, false otherwise		MethodDictionary allInstances select: [:dict |		dict isHealthy not ]	"
1 to: self basicSize do: [ :i | 	| selector |	selector := self basicAt: i.	selector		ifNotNil: [ 			(self scanFor: selector) == i				ifFalse: [ ^ false ] ] ].^ true
]

Class MethodDictionary >> includesKey: aSymbol
[
	"This override assumes that pointsTo is a fast primitive"
aSymbol ifNil: [ ^ false ].^ self pointsTo: aSymbol
]

Class MethodDictionary >> keyAtIdentityValue: value ifAbsent: exceptionBlock
[
	"Answer the key whose value equals the argument, value. If there is	none, answer the result of evaluating exceptionBlock."
1 to: self basicSize do: [ :index | 	value == (array at: index)		ifTrue: [ (self basicAt: index) ifNotNil: [ :theKey | ^ theKey ] ] ].^ exceptionBlock value
]

Class MethodDictionary >> compact
[
	"Make sure that I have the highest possible load factor (between 37.5% and 75%)."
| newInstance |newInstance := self compactWithoutBecome.newInstance capacity = self capacity	ifTrue: [ self copyFrom: newInstance ]	ifFalse: [ self becomeForward: newInstance ]
]

Class MethodDictionary >> keysDo: aBlock
[
tally = 0	ifTrue: [ ^ self ].1 to: self basicSize do: [ :i | (self basicAt: i) ifNotNil: [ :key | aBlock value: key ] ]
]

Class MethodDictionary >> removeDangerouslyKey: key ifAbsent: aBlock
[
	"This is not really dangerous.  But if normal removal	were done WHILE a MethodDict were being used, the	system might crash.  So instead we make a copy, then do	this operation (which is NOT dangerous in a copy that is	not being used), and then use the copy after the removal."
| index element |index := self findElementOrNil: key.(self basicAt: index) ifNil: [ ^ aBlock value ].element := array at: index.array at: index put: nil.self basicAt: index put: nil.tally := tally - 1.self fixCollisionsFrom: index.^ element
]

Class MethodDictionary >> compactWithoutBecome
[
	"Return a copy of self which has the highest possible load factor (between 37.5% and 75%)."
| newInstance |newInstance := self species new: self size.1 to: self basicSize do: [ :index | (self basicAt: index) ifNotNil: [ :key | newInstance at: key put: (array at: index) ] ].^ newInstance
]

Metaclass
	name: #MethodDictionary;
	instanceVariables: #().

Metaclass MethodDictionary >> new
[
	"Create a new instance with 32 slots, which can hold at most 24 methods before growing is necessary."
^ self newForCapacity: 32
]

Metaclass MethodDictionary >> newForCapacity: capacity
[
	"Create an instance with the given capacity which must be a power of two."
^ (self basicNew: capacity) initialize: capacity
]

Metaclass MethodDictionary >> new: numberOfElements
[
	"Create an instance large enough to hold numberOfElements methods without growing."
^ self newForCapacity: (self sizeFor: numberOfElements)
]

Metaclass MethodDictionary >> sizeFor: numberOfElements
[
	"Return the minimum capacity of a dictionary that can hold numberOfElements elements. At least 25% of the array must be empty and the return value must be a nonnegative power of 2. Notice that the max: 1 is because a MethodDictionaries can never be entirely empty, as the #grow method requires it not to be (since it does self basicSize * 2)"
^ (numberOfElements * 4 // 3 max: 1) asLargerPowerOfTwo
]

Metaclass MethodDictionary >> compactAllInstances
[
| instancesToExchange newInstances |instancesToExchange := Array	streamContents: [ :oldStream | 		newInstances := Array			streamContents: [ :newStream | 				self allInstances					do: [ :each | 						| newInstance |						newInstance := each compactWithoutBecome.						newInstance capacity = each capacity							ifTrue: [ each copyFrom: newInstance ]							ifFalse: [ 								oldStream nextPut: each.								newStream nextPut: newInstance ] ] ] ].instancesToExchange elementsForwardIdentityTo: newInstances
]

