Class	name: #InstructionClient;	superclass: #ClassObject;	instanceSpecification: #(#pointers #words );	instanceVariables: #();	classVariables: #();	package: #'Kernel-Methods'.Class InstructionClient >> pushNewArrayOfSize: numElements[	"Push New Array of size numElements bytecode."]Class InstructionClient >> blockReturnTop[	"Return Top Of Stack bytecode."]Class InstructionClient >> jump: offset if: condition[	"Conditional Jump bytecode."]Class InstructionClient >> doDup[	"Duplicate Top Of Stack bytecode."]Class InstructionClient >> popIntoTemporaryVariable: offset[	"Remove Top Of Stack And Store Into Temporary Variable bytecode."]Class InstructionClient >> pushConstant: value[	"Push Constant, value, on Top Of Stack bytecode."]Class InstructionClient >> methodReturnReceiver[	"Return Self bytecode."]Class InstructionClient >> pushTemporaryVariable: offset[	"Push Contents Of Temporary Variable Whose Index Is the 	argument, offset, On Top Of Stack bytecode."]Class InstructionClient >> pushReceiver[	"Push Active Context's Receiver on Top Of Stack bytecode."]Class InstructionClient >> storeIntoRemoteTemp: remoteTempIndex inVectorAt: tempVectorIndex[	"Store Top Of Stack And Store Into Offset of Temp Vector bytecode."]Class InstructionClient >> pushActiveContext[	"Push Active Context On Top Of Its Own Stack bytecode."]Class InstructionClient >> storeIntoLiteralVariable: anAssociation[	"Store Top Of Stack Into Literal Variable Of Method bytecode."]Class InstructionClient >> storeIntoTemporaryVariable: offset[	"Store Top Of Stack Into Temporary Variable Of Method bytecode."]Class InstructionClient >> pushReceiverVariable: offset[	"Push Contents Of the Receiver's Instance Variable Whose Index 	is the argument, offset, On Top Of Stack bytecode."]Class InstructionClient >> storeIntoReceiverVariable: offset[	"Store Top Of Stack Into Instance Variable Of Method bytecode."]Class InstructionClient >> jump: offset[	"Unconditional Jump bytecode."]Class InstructionClient >> pushLiteralVariable: anAssociation[	"Push Contents Of anAssociation On Top Of Stack bytecode."]Class InstructionClient >> pushRemoteTemp: remoteTempIndex inVectorAt: tempVectorIndex[	"Push Contents at Offset in Temp Vector bytecode."]Class InstructionClient >> methodReturnTop[	"Return Top Of Stack bytecode."]Class InstructionClient >> popIntoRemoteTemp: remoteTempIndex inVectorAt: tempVectorIndex[	"Remove Top Of Stack And Store Into Offset of Temp Vector bytecode."]Class InstructionClient >> popIntoLiteralVariable: anAssociation[	"Remove Top Of Stack And Store Into Literal Variable bytecode."]Class InstructionClient >> send: selector super: supered numArgs: numberArguments[	"Send Message With Selector, selector, bytecode. The argument, 	supered, indicates whether the receiver of the message is specified with 	'super' in the source method. The arguments of the message are found in 	the top numArguments locations on the stack and the receiver just 	below them."]Class InstructionClient >> methodReturnConstant: value[	"Return Constant bytecode."]Class InstructionClient >> popIntoReceiverVariable: offset[	"Remove Top Of Stack And Store Into Instance Variable bytecode."]Class InstructionClient >> doPop[	"Remove Top Of Stack bytecode."]Class InstructionClient >> pushClosureCopyNumCopiedValues: numCopied numArgs: numArgs blockSize: blockSize[	"Push Closure bytecode."]Class InstructionClient >> pushConsArrayWithElements: numElements[	"Push Cons Array of size numElements popping numElements items from the stack into the array bytecode."]Metaclass	name: #InstructionClient;	instanceVariables: #().