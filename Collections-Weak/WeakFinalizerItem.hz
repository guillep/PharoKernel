Class	name: #WeakFinalizerItem;	superclass: #ClassObject;	instanceSpecification: #(#variable #weak #pointers #words );	instanceVariables: #(#list #next #executor );	classVariables: #();	package: #'Collections-Weak'.Class WeakFinalizerItem >> postCopy[executor hasMultipleExecutors	ifTrue: [ executor := executor copy ]]Class WeakFinalizerItem >> copyWithList: aList[^ self copy list: aList]Class WeakFinalizerItem >> list[^ list]Class WeakFinalizerItem >> next[^ next]Class WeakFinalizerItem >> add: newExecutor[executor	ifNil: [ executor := newExecutor ]	ifNotNil: [ 		executor hasMultipleExecutors			ifTrue: [ executor add: newExecutor ]			ifFalse: [ executor := ObjectFinalizerCollection with: executor with: newExecutor ] ]]Class WeakFinalizerItem >> executor[^ executor]Class WeakFinalizerItem >> finalizeValues[	" cleanup the receiver, so it could be reused "| ex |ex := executor.executor := nil.next := nil.ex finalize]Class WeakFinalizerItem >> list: weakFinalizationList object: anObject executor: anExecutor[self assert: weakFinalizationList class == WeakFinalizationList.list := weakFinalizationList.self at: 1 put: anObject.executor := anExecutor]Class WeakFinalizerItem >> list: weakFinalizationList object: anObject[self assert: weakFinalizationList class == WeakFinalizationList.list := weakFinalizationList.self at: 1 put: anObject]Class WeakFinalizerItem >> object[^ self at: 1]Class WeakFinalizerItem >> list: aList[list := aList]Class WeakFinalizerItem >> clear[list := next := nil]Metaclass	name: #WeakFinalizerItem;	instanceVariables: #().Metaclass WeakFinalizerItem >> new[^ self basicNew: 1]