Class
	name: #HzMethodBuilderByCompiling;
	superclass: #ClassObject;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#builder #packages );
	classVariables: #();
	package: #'Seed-HazelBuilder'.

Class HzMethodBuilderByCompiling >> builder: aBuilder
[
builder := aBuilder
]

Class HzMethodBuilderByCompiling >> buildPackagesList
[
| classes |classes := builder behaviorDefinitions.^ ((Smalltalk at: #MCWorkingCopy ifAbsent: [ ^ #() ]) allManagers	select: [ :m | classes anySatisfy: [ :c | m packageInfo includesClassNamed: c name ] ]	thenCollect: [ :m | m packageInfo packageName asUppercase ]) asSet asOrderedCollection
]

Class HzMethodBuilderByCompiling >> createNewMethod: aCompiledMethod ofBehavior: aBehavior
[
| methodNode newCompiledMethod |methodNode := (Smalltalk at: #OCClosureCompiler) new	compile: aCompiledMethod sourceCode	in: aBehavior	classified: #whoCares	notifying: nil	ifFail: [  ].self haltIf: [ methodNode properties pragmas notEmpty ].newCompiledMethod := methodNode generate.	"	self fixMethodPropertiesOfMethod: newCompiledMethod."^ newCompiledMethod
]

Class HzMethodBuilderByCompiling >> fixMethodPropertiesOfMethod: aMethod
[
| literal methodProperties |1 to: aMethod literals size - 1 do: [ :idx | 	literal := aMethod literalAt: idx.	(literal isKindOf: AdditionalMethodState)		ifTrue: [ 			methodProperties := builder kernelSpec				copyAdditionalMethodState: literal				inMethod: aMethod				forBootstrapEnvironment: builder bootstrapEnvironment.			aMethod literalAt: idx put: methodProperties ] ]
]

Class HzMethodBuilderByCompiling >> packages
[
^ packages ifNil: [ packages := self buildPackagesList ]
]

Class HzMethodBuilderByCompiling >> methodsForBehavior: aBehavior
[
	"Get all the methods we consider we want from the current environment and return a copy, binded to the new class"
^ (aBehavior methods reject: [ :m | (self shouldMethodBeRemoved: m) or: [ m selector = #trace:on: ] ])	collect: [ :m | self createNewMethod: m ofBehavior: aBehavior ]
]

Class HzMethodBuilderByCompiling >> shouldMethodBeRemoved: aMethod
[
| category |category := aMethod category ifNil: [ ^ false ].(category asUppercase beginsWith: '*ImageWriter' asUppercase)	ifTrue: [ ^ false ].Smalltalk at: #MCWorkingCopy ifAbsent: [ ^ false ].	"Remove bad extensions"(category beginsWith: '*')	ifTrue: [ 		| copy |		copy := category allButFirst.		[ 		(self packages anySatisfy: [ :cat | copy asUppercase beginsWith: cat asUppercase ])			ifTrue: [ ^ false ].		copy := '-' join: (copy subStrings: '-') allButLast ] doWhileTrue: [ copy notEmpty ].		^ true ].^ false
]

Metaclass
	name: #HzMethodBuilderByCompiling;
	instanceVariables: #().

