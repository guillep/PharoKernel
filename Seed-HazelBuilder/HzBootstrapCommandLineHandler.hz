Class
	name: #HzBootstrapCommandLineHandler;
	superclass: #ClassCommandLineHandler;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#methodBuilder );
	classVariables: #();
	package: #'Seed-HazelBuilder'.

Class HzBootstrapCommandLineHandler >> methodBuilder: aMethodBuilder
[
methodBuilder := aMethodBuilder
]

Class HzBootstrapCommandLineHandler >> bootstrap
[
| seed |NonInteractiveTranscript stdout install.'bootstrapped.image' asFileReference ensureDeleted.'bootstrapped.changes' asFileReference ensureDeleted.seed := PharoInternalSeed basicGrowableSeed.HazelBuilderExample new	methodBuilder: methodBuilder;	buildImageWithSeed: seed
]

Class HzBootstrapCommandLineHandler >> activate
[
[ self bootstrap ]	on: Error	do: [ :exception | 		| strm aContext cnt |		strm := Transcript.		strm			nextPutAll: exception printString;			cr.		strm			nextPutAll: '=-=-=-=-=-=-=-BEGIN STACK TRACE -=-=-=-=-=-=-=-=';			cr.		aContext := exception signalerContext.		cnt := 0.		[ aContext notNil and: [ (cnt := cnt + 1) < 40 ] ]			whileTrue: [ 				"aContext printDetails: strm."				"variable values"				strm cr.				aContext := aContext sender ].		strm			cr;			nextPutAll: '--- The full stack ---';			cr.		aContext := exception signalerContext.		cnt := 0.		[ aContext == nil ]			whileFalse: [ 				cnt := cnt + 1.				cnt = 40					ifTrue: [ 						strm							nextPutAll:									' - - - - - - - - - - - - - - -  				- - - - - - - - - - - - - - - - - -';							cr ].				strm					print: aContext;					cr.	"just class>>selector"				cnt > 200					ifTrue: [ 						strm nextPutAll: '-- and more not shown --'.						^ self ].				aContext := aContext sender ].		strm			nextPutAll: '=-=-=-=-=-=-=-END STACK TRACE -=-=-=-=-=-=-=-=';			cr ].self quit
]

Class HzBootstrapCommandLineHandler >> initialize
[
methodBuilder := HzMethodBuilderByCopy new
]

Metaclass
	name: #HzBootstrapCommandLineHandler;
	instanceVariables: #().

Metaclass HzBootstrapCommandLineHandler >> priority
[
^ 1
]

Metaclass HzBootstrapCommandLineHandler >> isResponsibleFor: commandLineArguments
[
^ commandLineArguments arguments anySatisfy: [ :arg | #('-b' '--bootstrap') includes: arg ]
]

Metaclass HzBootstrapCommandLineHandler >> description
[
^ 'run the bootstrap to create a kernel image'
]

Metaclass HzBootstrapCommandLineHandler >> commandName
[
^ 'bootstrap'
]

