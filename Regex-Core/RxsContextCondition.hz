Class	name: #RxsContextCondition;	superclass: #ClassRxsNode;	instanceSpecification: #(#pointers #words );	instanceVariables: #(#kind );	classVariables: #();	package: #'Regex-Core'.Class RxsContextCondition >> beAny[	"Matches anything but a newline."kind := #syntaxAny]Class RxsContextCondition >> beEndOfWord[	"Matches empty string at the end of a word."kind := #syntaxEndOfWord]Class RxsContextCondition >> beNonWordBoundary[	"Analog of \B."kind := #syntaxNonWordBoundary]Class RxsContextCondition >> beBeginningOfLine[	"Matches empty string at the beginning of a line."kind := #syntaxBeginningOfLine]Class RxsContextCondition >> isNullable[^ #syntaxAny ~~ kind]Class RxsContextCondition >> beEndOfLine[	"Matches empty string at the end of a line."kind := #syntaxEndOfLine]Class RxsContextCondition >> beBeginningOfWord[	"Matches empty string at the beginning of a word."kind := #syntaxBeginningOfWord]Class RxsContextCondition >> beWordBoundary[	"Analog of \w (alphanumeric plus _)."kind := #syntaxWordBoundary]Class RxsContextCondition >> dispatchTo: aBuilder[^ aBuilder perform: kind]Metaclass	name: #RxsContextCondition;	instanceVariables: #().