Class
	name: #RxmLink;
	superclass: #ClassObject;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#next );
	classVariables: #();
	package: #'Regex-Core'.

Class RxmLink >> matchAgainst: aMatcher
[
	"If a link does not match the contents of the matcher's stream,	answer false. Otherwise, let the next matcher in the chain match."
^ next matchAgainst: aMatcher
]

Class RxmLink >> next
[
^ next
]

Class RxmLink >> pointTailTo: anRxmLink
[
	"Propagate this message along the chain of links.	Point `next' reference of the last link to <anRxmLink>.	If the chain is already terminated, blow up."
next == nil	ifTrue: [ next := anRxmLink ]	ifFalse: [ next pointTailTo: anRxmLink ]
]

Class RxmLink >> terminateWith: aTerminator
[
	"Propagate this message along the chain of links, and	make aTerminator the `next' link of the last link in the chain.	If the chain is already reminated with the same terminator, 	do not blow up."
next == nil	ifTrue: [ next := aTerminator ]	ifFalse: [ next terminateWith: aTerminator ]
]

Class RxmLink >> next: aLink
[
	"Set the next link, either an RxmLink or an RxmTerminator."
next := aLink
]

Metaclass
	name: #RxmLink;
	instanceVariables: #().

