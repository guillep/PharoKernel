Class	name: #RxsRange;	superclass: #ClassRxsNode;	instanceSpecification: #(#pointers #words );	instanceVariables: #(#first #last );	classVariables: #();	package: #'Regex-Core'.Class RxsRange >> isEnumerable[^ true]Class RxsRange >> enumerateTo: aSet ignoringCase: aBoolean[	"Add all of the elements I represent to the collection."first asInteger to: last asInteger do: [ :charCode | 	| character |	character := charCode asCharacter.	aBoolean		ifTrue: [ 			aSet				add: character asUppercase;				add: character asLowercase ]		ifFalse: [ aSet add: character ] ]]Class RxsRange >> initializeFirst: aCharacter last: anotherCharacter[first := aCharacter.last := anotherCharacter]Metaclass	name: #RxsRange;	instanceVariables: #().Metaclass RxsRange >> from: aCharacter to: anotherCharacter[^ self new initializeFirst: aCharacter last: anotherCharacter]