Class
	name: #RxsCharacter;
	superclass: #ClassRxsNode;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#character );
	classVariables: #();
	package: #'Regex-Core'.

Class RxsCharacter >> isNullable
[
^ false
]

Class RxsCharacter >> isEnumerable
[
^ true
]

Class RxsCharacter >> character
[
^ character
]

Class RxsCharacter >> isAtomic
[
	"A character is always atomic."
^ true
]

Class RxsCharacter >> enumerateTo: aSet ignoringCase: aBoolean
[
aBoolean	ifTrue: [ 		aSet			add: character asUppercase;			add: character asLowercase ]	ifFalse: [ aSet add: character ]
]

Class RxsCharacter >> initializeCharacter: aCharacter
[
	"See class comment for instance variable description."
character := aCharacter
]

Class RxsCharacter >> dispatchTo: aMatcher
[
	"Inform the matcher of the kind of the node, and it	will do whatever it has to."
^ aMatcher syntaxCharacter: self
]

Metaclass
	name: #RxsCharacter;
	instanceVariables: #().

Metaclass RxsCharacter >> with: aCharacter
[
^ self new initializeCharacter: aCharacter
]

