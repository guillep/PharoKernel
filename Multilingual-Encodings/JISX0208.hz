Class
	name: #JISX0208;
	superclass: #ClassEncodedCharSet;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #();
	classVariables: #();
	package: #'Multilingual-Encodings'.

Metaclass
	name: #JISX0208;
	instanceVariables: #().

Metaclass JISX0208 >> charAtKuten: anInteger
[
| a b |a := anInteger \\ 100.b := anInteger // 100.a > 94 | (b > 94)	ifTrue: [ self error: 'character code is not valid' ].^ Character leadingChar: self leadingChar code: (b - 1) * 94 + a - 1
]

Metaclass JISX0208 >> isBreakableAt: index in: text
[
| prev |index = 1	ifTrue: [ ^ false ].prev := text at: index - 1.prev leadingChar ~= 1	ifTrue: [ ^ true ].^ false
]

Metaclass JISX0208 >> isLetter: char
[
| value leading |leading := char leadingChar.value := char charCode.leading = 0	ifTrue: [ ^ super isLetter: char ].value := value // 94 + 1.^ 1 <= value and: [ value < 84 ]
]

Metaclass JISX0208 >> compoundTextSequence
[
^ compoundTextSequence
]

Metaclass JISX0208 >> initialize
[
	"	self initialize"
compoundTextSequence := String	streamContents: [ :s | 		s nextPut: (Character value: 27).		s nextPut: $$.		s nextPut: $B ]
]

Metaclass JISX0208 >> nextPutValue: ascii toStream: aStream withShiftSequenceIfNeededForTextConverterState: state
[
| c1 c2 |state charSize: 2.state g0Leading ~= self leadingChar	ifTrue: [ 		state g0Leading: self leadingChar.		state g0Size: 2.		aStream basicNextPutAll: compoundTextSequence ].c1 := ascii // 94 + 33.c2 := ascii \\ 94 + 33.^ aStream	basicNextPut: (Character value: c1);	basicNextPut: (Character value: c2)
]

Metaclass JISX0208 >> ucsTable
[
^ UCSTable jisx0208Table
]

Metaclass JISX0208 >> leadingChar
[
^ 1
]

Metaclass JISX0208 >> unicodeLeadingChar
[
^ JapaneseEnvironment leadingChar
]

Metaclass JISX0208 >> stringFromKutenArray: anArray
[
| s |s := WideString new: anArray size.1 to: anArray size do: [ :i | s at: i put: (self charAtKuten: (anArray at: i)) ].^ s
]

Metaclass JISX0208 >> printingDirection
[
^ #right
]

