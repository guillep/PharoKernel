Class
	name: #ByteString;
	superclass: #ClassString;
	instanceSpecification: #(#variable #byte );
	instanceVariables: #();
	classVariables: #(#NonAsciiMap );
	package: #'Collections-Strings'.

Class ByteString >> asByteArray
[
| ba sz |sz := self byteSize.ba := ByteArray new: sz.ba	replaceFrom: 1	to: sz	with: self	startingAt: 1.^ ba
]

Class ByteString >> asOctetString
[
^ self
]

Class ByteString >> at: index
[
	"Primitive. Answer the Character stored in the field of the receiver	indexed by the argument. Fail if the index argument is not an Integer or	is out of bounds. Essential. See Object documentation whatIsAPrimitive."
	<primitive: 63>
^ Character value: (super at: index)
]

Class ByteString >> at: index put: aCharacter
[
	"Primitive. Store the Character in the field of the receiver indicated by	the index. Fail if the index is not an Integer or is out of bounds, or if	the argument is not a Character. Essential. See Object documentation	whatIsAPrimitive."
	<primitive: 64>
aCharacter isCharacter	ifFalse: [ ^ self errorImproperStore ].aCharacter isOctetCharacter	ifFalse: [ 		"Convert to WideString"		self becomeForward: (WideString from: self).		^ self at: index put: aCharacter ].index isInteger	ifTrue: [ self errorSubscriptBounds: index ]	ifFalse: [ self errorNonIntegerIndex ]
]

Class ByteString >> beginsWith: prefix
[
	"Answer whether the receiver begins with the given prefix string.	The comparison is case-sensitive."
	"IMPLEMENTATION NOTE:	following algorithm is optimized in primitive only in case self and prefix are bytes like.	Otherwise, if self is wide, then super outperforms,	Otherwise, if prefix is wide, primitive is not correct"
prefix class isBytes	ifFalse: [ ^ super beginsWith: prefix ].self size < prefix size	ifTrue: [ ^ false ].^ (self	findSubstring: prefix	in: self	startingAt: 1	matchTable: CaseSensitiveOrder) = 1
]

Class ByteString >> byteAt: index
[
	<primitive: 60>
^ (self at: index) asciiValue
]

Class ByteString >> byteAt: index put: value
[
	<primitive: 61>
self at: index put: value asCharacter.^ value
]

Class ByteString >> byteSize
[
^ self size
]

Class ByteString >> convertFromCompoundText
[
| readStream writeStream converter |readStream := self readStream.writeStream := String new writeStream.converter := CompoundTextConverter new.converter ifNil: [ ^ self ].[ readStream atEnd ] whileFalse: [ writeStream nextPut: (converter nextFromStream: readStream) ].^ writeStream contents
]

Class ByteString >> convertFromSystemString
[
| readStream writeStream converter |readStream := self readStream.writeStream := String new writeStream.converter := LanguageEnvironment defaultSystemConverter.converter ifNil: [ ^ self ].[ readStream atEnd ] whileFalse: [ writeStream nextPut: (converter nextFromStream: readStream) ].^ writeStream contents
]

Class ByteString >> findSubstring: key in: body startingAt: start matchTable: matchTable
[
key isWideString	ifTrue: [ 		^ super			findSubstring: key			in: body			startingAt: start			matchTable: matchTable ].^ self	findSubstringViaPrimitive: key	in: body	startingAt: start	matchTable: matchTable
]

Class ByteString >> findSubstringViaPrimitive: key in: body startingAt: start matchTable: matchTable
[
	"Answer the index in the string body at which the substring key first occurs, at or beyond start.  The match is determined using matchTable, which can be used to effect, eg, case-insensitive matches.  If no match is found, zero will be returned.	The algorithm below is not optimum -- it is intended to be translated to C which will go so fast that it wont matter."
	<primitive: 'primitiveFindSubstring' module: 'MiscPrimitivePlugin'>
	<var: #key declareC: 'unsigned char *key'>
	<var: #body declareC: 'unsigned char *body'>
	<var: #matchTable declareC: 'unsigned char *matchTable'>
| index |key size = 0	ifTrue: [ ^ 0 ].start to: body size - key size + 1 do: [ :startIndex | 	index := 1.	[ (matchTable at: (body at: startIndex + index - 1) asciiValue + 1) = (matchTable at: (key at: index) asciiValue + 1) ]		whileTrue: [ 			index = key size				ifTrue: [ ^ startIndex ].			index := index + 1 ] ].^ 0	"' ' findSubstring: 'abc' in: 'abcdefabcd' startingAt: 1 matchTable: CaseSensitiveOrder 1' ' findSubstring: 'abc' in: 'abcdefabcd' startingAt: 2 matchTable: CaseSensitiveOrder 7' ' findSubstring: 'abc' in: 'abcdefabcd' startingAt: 8 matchTable: CaseSensitiveOrder 0' ' findSubstring: 'abc' in: 'abcdefABcd' startingAt: 2 matchTable: CaseSensitiveOrder 0' ' findSubstring: 'abc' in: 'abcdefABcd' startingAt: 2 matchTable: CaseInsensitiveOrder 7"
]

Class ByteString >> hasWideCharacterFrom: start to: stop
[
	"Only WideStrings contain these characters"
^ false
]

Class ByteString >> indexOfAnyOf: aCollection startingAt: start
[
	"Use double dispatching for speed"
^ aCollection findFirstInByteString: self startingAt: start
]

Class ByteString >> indexOfAnyOf: aCollection startingAt: start ifAbsent: aBlock
[
	"Use double dispatching for speed"
| index |^ (index := aCollection findFirstInByteString: self startingAt: start) = 0	ifTrue: [ aBlock value ]	ifFalse: [ index ]
]

Class ByteString >> isAsciiString
[
^ (self class findFirstInString: self inSet: NonAsciiMap startingAt: 1) = 0
]

Class ByteString >> isByteString
[
	"Answer whether the receiver is a ByteString"
^ true
]

Class ByteString >> isOctetString
[
	"Answer whether the receiver can be represented as a byte string. 	This is different from asking whether the receiver *is* a ByteString 	(i.e., #isByteString)"
^ true
]

Class ByteString >> replaceFrom: start to: stop with: replacement startingAt: repStart
[
	"Primitive. This destructively replaces elements from start to stop in the receiver starting at index, repStart, in the collection, replacement. Answer the receiver. Range checks are performed in the primitive only. Optional. See Object documentation whatIsAPrimitive."
	<primitive: 105>
replacement class == WideString	ifTrue: [ self becomeForward: (WideString from: self) ].super	replaceFrom: start	to: stop	with: replacement	startingAt: repStart
]

Metaclass
	name: #ByteString;
	instanceVariables: #().

Metaclass ByteString >> compare: string1 with: string2 collated: order
[
	"Return 1, 2 or 3, if string1 is <, =, or > string2, with the collating order of characters given by the order array."
	<primitive: 'primitiveCompareString' module: 'MiscPrimitivePlugin'>
	<var: #string1 declareC: 'unsigned char *string1'>
	<var: #string2 declareC: 'unsigned char *string2'>
	<var: #order declareC: 'unsigned char *order'>
| len1 len2 c1 c2 |len1 := string1 size.len2 := string2 size.1 to: (len1 min: len2) do: [ :i | 	c1 := order at: (string1 basicAt: i) + 1.	c2 := order at: (string2 basicAt: i) + 1.	c1 = c2		ifFalse: [ 			c1 < c2				ifTrue: [ ^ 1 ]				ifFalse: [ ^ 3 ] ] ].len1 = len2	ifTrue: [ ^ 2 ].len1 < len2	ifTrue: [ ^ 1 ]	ifFalse: [ ^ 3 ]
]

Metaclass ByteString >> findFirstInString: aString inSet: inclusionMap startingAt: start
[
	<primitive: 'primitiveFindFirstInString' module: 'MiscPrimitivePlugin'>
	<var: #aString declareC: 'unsigned char *aString'>
	<var: #inclusionMap declareC: 'char *inclusionMap'>
| i stringSize |inclusionMap size ~= 256	ifTrue: [ ^ 0 ].i := start.stringSize := aString size.[ i <= stringSize and: [ (inclusionMap at: (aString at: i) asciiValue + 1) = 0 ] ] whileTrue: [ i := i + 1 ].i > stringSize	ifTrue: [ ^ 0 ].^ i
]

Metaclass ByteString >> indexOfAscii: anInteger inString: aString startingAt: start
[
	<primitive: 'primitiveIndexOfAsciiInString' module: 'MiscPrimitivePlugin'>
	<var: #aCharacter declareC: 'int anInteger'>
	<var: #aString declareC: 'unsigned char *aString'>
| stringSize |stringSize := aString size.start to: stringSize do: [ :pos | 	(aString at: pos) asciiValue = anInteger		ifTrue: [ ^ pos ] ].^ 0
]

Metaclass ByteString >> initialize
[
	"ByteString initialize"
| latin1 utf8 |NonAsciiMap := ByteArray new: 256.0 to: 255 do: [ :i | 	i < 128		ifTrue: [ NonAsciiMap at: i + 1 put: 0	"valid ascii subset" ]		ifFalse: [ NonAsciiMap at: i + 1 put: 1	"extended charset" ] ]
]

Metaclass ByteString >> nonAsciiMap
[
^ NonAsciiMap
]

Metaclass ByteString >> stringHash: aString initialHash: speciesHash
[
	<primitive: 'primitiveStringHash' module: 'MiscPrimitivePlugin'>
	<var: #aHash declareC: 'int speciesHash'>
	<var: #aString declareC: 'unsigned char *aString'>
| stringSize hash low |stringSize := aString size.hash := speciesHash bitAnd: 16rFFFFFFF.1 to: stringSize do: [ :pos | 	hash := hash + (aString at: pos) asciiValue.	"Begin hashMultiply"	low := hash bitAnd: 16383.	hash := 16r260D * low + ((16r260D * (hash bitShift: -14) + (16r0065 * low) bitAnd: 16383) * 16384) bitAnd: 16r0FFFFFFF ].^ hash
]

Metaclass ByteString >> translate: aString from: start to: stop table: table
[
	"translate the characters in the string by the given table, in place"
	<primitive: 'primitiveTranslateStringWithTable' module: 'MiscPrimitivePlugin'>
	<var: #table declareC: 'unsigned char *table'>
	<var: #aString declareC: 'unsigned char *aString'>
start to: stop do: [ :i | aString at: i put: (table at: (aString at: i) asciiValue + 1) ]
]

