Class	name: #FLLightGeneralMapper;	superclass: #ClassFLMapper;	instanceSpecification: #(#pointers #words );	instanceVariables: #(#wellKnownObjectCluster #globalInstanceSideCluster );	classVariables: #();	package: #'Fuel-Mappers'.Class FLLightGeneralMapper >> visitDictionary: aDictionary[self mapAndTraceByObjectClass: aDictionary to: FLDictionaryCollectionCluster]Class FLLightGeneralMapper >> visitClass: aClass[self mapAndTraceInstanceSideGlobal: aClass]Class FLLightGeneralMapper >> visitBytesObject: anObject[self mapAndTraceByObjectClass: anObject to: FLByteObjectCluster]Class FLLightGeneralMapper >> visitHookPrimitive: anObject[self mapAndTraceByObjectClass: anObject to: FLHookPrimitiveCluster]Class FLLightGeneralMapper >> clusterClassForCharacter: aCharacter[^ aCharacter isOctetCharacter	ifTrue: [ FLHookPrimitiveCluster ]	ifFalse: [ FLFixedObjectCluster ]]Class FLLightGeneralMapper >> visitFixedObject: anObject[self mapAndTraceByObjectClass: anObject to: FLFixedObjectCluster]Class FLLightGeneralMapper >> visitRectangle: aRectangle[self mapAndTraceByClusterName: aRectangle to: FLRectangleCluster]Class FLLightGeneralMapper >> visitMetaclass: aMetaclass[self mapAndTraceByClusterName: aMetaclass to: FLGlobalClassSideCluster]Class FLLightGeneralMapper >> visitSubstitution: anObject by: anotherObject[(self clusterKeyedByClusterName: FLSubstitutionCluster) add: anObject substitutedBy: anotherObject traceWith: analysis]Class FLLightGeneralMapper >> mapAndTrace: anObject[anObject fuelAccept: self]Class FLLightGeneralMapper >> visitSimpleCollection: aCollection[self mapAndTraceByObjectClass: aCollection to: FLSimpleCollectionCluster]Class FLLightGeneralMapper >> mapAndTraceInstanceSideGlobal: aClassOrTrait[(globalInstanceSideCluster ifNil: [ globalInstanceSideCluster := self clusterKeyedByClusterName: FLGlobalClassCluster ])	add: aClassOrTrait	traceWith: analysis]Class FLLightGeneralMapper >> visitCompiledMethod: aCompiledMethod[aCompiledMethod isInstalled	ifFalse: [ FLNotInstalledMethod signalWithSelector: aCompiledMethod selector ].self mapAndTraceByClusterName: aCompiledMethod to: FLGlobalCompiledMethodCluster]Class FLLightGeneralMapper >> visitVariableObject: anObject[self mapAndTraceByObjectClass: anObject to: FLVariableObjectCluster]Class FLLightGeneralMapper >> visitPoint: aPoint[self mapAndTraceByClusterName: aPoint to: FLPointCluster]Class FLLightGeneralMapper >> visitNotSerializable: anObject[FLNotSerializable signalWith: anObject]Class FLLightGeneralMapper >> visitGlobalSend: anObject name: globalName selector: aSymbol[(self clusterKeyedByClusterName: FLGlobalSendCluster)	add: anObject	name: globalName	selector: aSymbol	traceWith: analysis]Class FLLightGeneralMapper >> visitWordsObject: anObject[self mapAndTraceByObjectClass: anObject to: FLWordObjectCluster]Class FLLightGeneralMapper >> visitSmallInteger: aSmallInteger[self mapAndTraceByClusterName: aSmallInteger to: (self clusterClassForSmallInteger: aSmallInteger)]Class FLLightGeneralMapper >> visitWellKnownObject: anObject[wellKnownObjectCluster ifNil: [ wellKnownObjectCluster := self clusterKeyedByClusterName: FLWellKnownObjectsCluster ]	"Note: It is not necessary to explicitly add objects to this cluster"]Class FLLightGeneralMapper >> visitClassTrait: aClassTrait[self mapAndTraceByClusterName: aClassTrait to: FLGlobalClassSideCluster]Class FLLightGeneralMapper >> clusterClassForSmallInteger: aSmallInteger[aSmallInteger >= 0	ifTrue: [ 		aSmallInteger <= 255			ifTrue: [ ^ FLPositive8SmallIntegerCluster ].		aSmallInteger <= 65535			ifTrue: [ ^ FLPositive16SmallIntegerCluster ].		aSmallInteger <= 16777215			ifTrue: [ ^ FLPositive24SmallIntegerCluster ].		aSmallInteger <= 4294967295			ifTrue: [ ^ FLPositive32SmallIntegerCluster ] ].aSmallInteger >= -128	ifTrue: [ ^ FLNegative8SmallIntegerCluster ].aSmallInteger >= -32768	ifTrue: [ ^ FLNegative16SmallIntegerCluster ].aSmallInteger >= -8388608	ifTrue: [ ^ FLNegative24SmallIntegerCluster ].aSmallInteger >= -2147483648	ifTrue: [ ^ FLNegative32SmallIntegerCluster ]]Class FLLightGeneralMapper >> visitMethodContext: aMethodContext[self mapAndTraceByObjectClass: aMethodContext to: FLMethodContextCluster]Class FLLightGeneralMapper >> visitTrait: aTrait[self mapAndTraceInstanceSideGlobal: aTrait]Class FLLightGeneralMapper >> visitSubstitution: anObject by: anotherObject onRecursionDo: aBlock[| cluster |cluster := self clusterKeyedByClusterName: FLSubstitutionCluster.(cluster isSubstitute: anObject)	ifTrue: aBlock	ifFalse: [ cluster add: anObject substitutedBy: anotherObject traceWith: analysis ]]Class FLLightGeneralMapper >> visitCharacter: aCharacter[self flag: #todo.	"confusing"self mapAndTraceByObjectClass: aCharacter to: (self clusterClassForCharacter: aCharacter)]Class FLLightGeneralMapper >> visitWeakObject: anObject[self mapAndTraceByObjectClass: anObject to: FLWeakVariableObjectCluster]Metaclass	name: #FLLightGeneralMapper;	instanceVariables: #().