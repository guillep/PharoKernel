Class
	name: #SharedPool;
	superclass: #ClassObject;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #();
	classVariables: #();
	package: #'Kernel-Classes'.

Metaclass
	name: #SharedPool;
	instanceVariables: #().

Metaclass SharedPool >> bindingOf: varName
[
	"Answer the binding of some variable resolved in the scope of the receiver"
| aSymbol binding |aSymbol := varName asSymbol.	"First look in classVar dictionary."binding := self classPool bindingOf: aSymbol.binding ifNotNil: [ ^ binding ].	"Next look in shared pools."self sharedPools	do: [ :pool | 		binding := pool bindingOf: aSymbol.		binding ifNotNil: [ ^ binding ] ].	"subclassing and environment are not preserved"^ nil
]

Metaclass SharedPool >> bindingsDo: aBlock
[
^ self classPool bindingsDo: aBlock
]

Metaclass SharedPool >> classBindingOf: varName
[
	"For initialization messages grant the regular scope"
^ super bindingOf: varName
]

Metaclass SharedPool >> hasBindingThatBeginsWith: aString
[
	"Answer true if the receiver has a binding that begins with aString, false otherwise"
	"First look in classVar dictionary."
(self classPool hasBindingThatBeginsWith: aString)	ifTrue: [ ^ true ].	"Next look in shared pools."self sharedPools	do: [ :pool | 		(pool hasBindingThatBeginsWith: aString)			ifTrue: [ ^ true ] ].^ false
]

Metaclass SharedPool >> includesKey: aName
[
	"does this pool include aName"
^ (self bindingOf: aName) notNil
]

Metaclass SharedPool >> keysDo: aBlock
[
	"A hopefully temporary fix for an issue arising from miss-spelled variable names in code being compiled. The correction code (see Class>possibleVariablesFor:continuedFrom: assumes that sharedPools are Dictionaries. The proper fix would involve making sure all pools are actually subclasses of SharedPool, which they are not currently."
self bindingsDo: [ :b | aBlock value: b key ]
]

