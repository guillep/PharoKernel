Class	name: #InputEventFetcher;	superclass: #ClassObject;	instanceSpecification: #(#pointers #words );	instanceVariables: #(#eventHandlers #fetcherProcess #inputSemaphore );	classVariables: #(#Default );	sharedPools: #(#EventSensorConstants );	package: #'Kernel-Processes'.Class InputEventFetcher >> primGetNextEvent: array[	"Store the next OS event available into the provided array.	Essential."	<primitive: 94>array at: 1 put: EventTypeNone.^ nil]Class InputEventFetcher >> registerHandler: handler[self eventHandlers add: handler]Class InputEventFetcher >> primInterruptSemaphore: aSemaphore[	"Primitive. Install the argument as the semaphore to be signalled whenever the user presses the interrupt key. The semaphore will be signaled once each time the interrupt key is pressed."	<primitive: 134>^ self primitiveFailed	"Note: This primitive was marked obsolete but is still used and actually quite useful. It could bre replace with a check in the event loop though, without a need for the now obsolete event tickler as event fetching isn't bound to the Morphic loop."]Class InputEventFetcher >> startUp[inputSemaphore := Semaphore new.self primSetInputSemaphore: (Smalltalk registerExternalObject: inputSemaphore).inputSemaphore initSignals.self installEventLoop]Class InputEventFetcher >> waitForInput[inputSemaphore wait]Class InputEventFetcher >> terminateEventLoop[	"Terminate the event loop process. Terminate the old process if any."	"InputEventFetcher default terminateEventLoop"fetcherProcess ifNotNil: [ fetcherProcess terminate ]]Class InputEventFetcher >> eventHandlers[^ eventHandlers ifNil: [ eventHandlers := OrderedCollection new ]]Class InputEventFetcher >> primSetInputSemaphore: semaIndex[	"Set the input semaphore the VM should use for asynchronously signaling the availability of events. Primitive. Optional."	<primitive: 93>^ nil]Class InputEventFetcher >> fetcherProcess[^ fetcherProcess]Class InputEventFetcher >> installEventLoop[	"Initialize the event loop process. Terminate the old process if any."	"InputEventFetcher default installEventLoop"self terminateEventLoop.fetcherProcess := [ self eventLoop ] forkAt: Processor lowIOPriority.fetcherProcess name: 'Input events fetching process']Class InputEventFetcher >> unregisterHandler: handler[self eventHandlers remove: handler ifAbsent: [  ]]Class InputEventFetcher >> signalEvent: eventBuffer[	"Signal the event buffer to all registered event handlers.	Handlers need make sure to copy the buffer or extract the data otherwise, as the buffer will be reused."self eventHandlers do: [ :handler | handler handleEvent: eventBuffer ]]Class InputEventFetcher >> shutDown[self terminateEventLoop.inputSemaphore ifNotNil: [ Smalltalk unregisterExternalObject: inputSemaphore ]]Class InputEventFetcher >> eventLoop[	"Fetch pending raw events from the VM.	 This method is run at high priority."| eventBuffer |eventBuffer := Array new: 8.[ true ]	whileTrue: [ 		| type window |		self waitForInput.		[ 		self primGetNextEvent: eventBuffer.		type := eventBuffer at: 1.		type = EventTypeNone ]			whileFalse: [ 				"Patch up the window index in case we don't get one"				window := eventBuffer at: 8.				(window isNil or: [ window isZero ])					ifTrue: [ eventBuffer at: 8 put: 1 ].				self signalEvent: eventBuffer ] ]]Metaclass	name: #InputEventFetcher;	instanceVariables: #().Metaclass InputEventFetcher >> startUp[	"InputEventFetcher startUp"self default startUp]Metaclass InputEventFetcher >> default[	"InputEventFetcher default"^ Default ifNil: [ Default := InputEventFetcher new ]]Metaclass InputEventFetcher >> deinstall[	"InputEventFetcher deinstall"Default	ifNotNil: [ 		Default shutDown.		Smalltalk removeFromStartUpList: Default class.		Smalltalk removeFromShutDownList: Default class.		Default := nil ].Smalltalk removeFromStartUpList: self.Smalltalk removeFromShutDownList: self]Metaclass InputEventFetcher >> shutDown[	"InputEventFetcher shutDown"self default shutDown]Metaclass InputEventFetcher >> install[	"InputEventFetcher install"Smalltalk addToStartUpList: self after: Cursor.Smalltalk addToShutDownList: self after: Form.Default := self new.Default startUp]