Class	name: #Process;	superclass: #ClassLink;	instanceSpecification: #(#pointers #words );	instanceVariables: #(#suspendedContext #priority #myList #threadId #errorHandler #name #env );	classVariables: #(#PSKeys #PSKeysSema );	package: #'Kernel-Processes'.Class Process >> resume[	"Allow the process that the receiver represents to continue. Put  	the receiver in line to become the activeProcess. Check for a nil 	suspendedContext, which indicates a previously terminated Process that 	would cause a vm crash if the resume attempt were permitted"suspendedContext ifNil: [ ^ self primitiveFailed ].^ self primitiveResume]Class Process >> isActiveProcess[^ self == Processor activeProcess]Class Process >> run[	"Suspend current process and execute self instead"| proc |proc := Processor activeProcess.[ proc suspend.self resume ] forkAt: Processor highestPriority]Class Process >> primitiveResume[	"Primitive. Allow the process that the receiver represents to continue. Put 	the receiver in line to become the activeProcess. Fail if the receiver is 	already waiting in a queue (in a Semaphore or ProcessScheduler). 	Essential. See Object documentation whatIsAPrimitive."	<primitive: 87>self primitiveFailed]Class Process >> environmentKeyNotFound[self error: 'Environment key not found']Class Process >> priority[	"Answer the priority of the receiver."^ priority]Class Process >> stepToHome: aContext[	"Resume self until the home of top context is aContext.  Top context may be a block context."| home ctxt |home := aContext home.[ ctxt := self step.home == ctxt home ]	whileFalse: [ 		home isDead			ifTrue: [ ^ self suspendedContext ] ].^ self suspendedContext]Class Process >> activateReturn: aContext value: value[	"Activate 'aContext return: value', so execution will return to aContext's sender"^ suspendedContext := suspendedContext activateReturn: aContext value: value]Class Process >> suspend[	"Primitive. Stop the process that the receiver represents in such a way 	that it can be restarted at a later time (by sending the receiver the 	message resume). If the receiver represents the activeProcess, suspend it. 	Otherwise remove the receiver from the list of waiting processes.	The return value of this method is the list the receiver was previously on (if any)."	<primitive: 88>| oldList |myList ifNil: [ ^ nil ].	"This is fallback code for VMs which only support the old primitiveSuspend which 	would not accept processes that are waiting to be run."	"this allows us to use suspend multiple times"oldList := myList.myList := nil.oldList remove: self ifAbsent: [  ].^ oldList]Class Process >> copyStack[^ self copy install: suspendedContext copyStack]Class Process >> popTo: aContext value: aValue[	"Replace the suspendedContext with aContext, releasing all contexts 	between the currently suspendedContext and it."| callee |self == Processor activeProcess	ifTrue: [ ^ self error: 'The active process cannot pop contexts' ].callee := (self calleeOf: aContext) ifNil: [ ^ self ].	"aContext is on top"self return: callee value: aValue]Class Process >> browserPrintString[^ self browserPrintStringWith: suspendedContext]Class Process >> printOn: aStream[super printOn: aStream.aStream nextPutAll: ' in '.suspendedContext printOn: aStream]Class Process >> suspendedContext[	"Answer the context the receiver has suspended."^ suspendedContext]Class Process >> debug[self debugWithTitle: 'Debug']Class Process >> name: aString[name := aString]Class Process >> name[^ name ifNil: [ self hash asString forceTo: 10 paddingStartWith: $  ]]Class Process >> suspendedContext: aContext[suspendedContext := aContext]Class Process >> resetPSValueAt: index[	"NOTE: this method are PRIVATE. "env ifNil: [ ^ self ].index > env size	ifTrue: [ ^ self ].env at: index put: nil]Class Process >> completeStep: aContext[	"Resume self until aContext is on top, or if already on top, complete next step"| callee |self suspendedContext == aContext	ifFalse: [ ^ self complete: (self calleeOf: aContext) ].callee := self step.callee == aContext	ifTrue: [ ^ callee ].aContext isDead	ifTrue: [ ^ self suspendedContext ].	"returned"^ self complete: callee	"finish send"]Class Process >> pvtSignal: anException list: aList[	"Private. This method is used to signal an exception from another	process...the receiver must be the active process.  If the receiver 	was previously waiting on a Semaphore, then return the process	to the waiting state after signaling the exception and if the Semaphore	has not been signaled in the interim"	"Since this method is not called in a normal way, we need to take care	that it doesn't directly return to the caller (because I believe that could	have the potential to push an unwanted object on the caller's stack)."| blocker |self isActiveProcess	ifFalse: [ ^ self ].anException signal.blocker := Semaphore new.[ self suspend.suspendedContext := suspendedContext swapSender: nil.aList class == Semaphore	ifTrue: [ 		aList isSignaled			ifTrue: [ 				aList wait.	"Consume the signal that would have restarted the receiver"				self resume ]			ifFalse: [ 				"Add us back to the Semaphore's list (and remain blocked)"				myList := aList.				aList add: self ] ]	ifFalse: [ self resume ] ] fork.blocker wait]Class Process >> signalException: anException[	"Signal an exception in the receiver process...if the receiver is currently	suspended, the exception will get signaled when the receiver is resumed.  If 	the receiver is blocked on a Semaphore, it will be immediately re-awakened	and the exception will be signaled; if the exception is resumed, then the receiver	will return to a blocked state unless the blocking Semaphore has excess signals"| oldList |"If we are the active process, go ahead and signal the exception"self isActiveProcess	ifTrue: [ ^ anException signal ].	"Suspend myself first to ensure that I won't run away in the	midst of the following modifications."myList ifNotNil: [ oldList := self suspend ].	"Add a new method context to the stack that will signal the exception"suspendedContext := MethodContext	sender: suspendedContext	receiver: self	method: (self class lookupSelector: #pvtSignal:list:)	arguments: (Array with: anException with: oldList).	"If we are on a list to run, then suspend and restart the receiver 	(this lets the receiver run if it is currently blocked on a semaphore).  If	we are not on a list to be run (i.e. this process is suspended), then when the	process is resumed, it will signal the exception"oldList ifNotNil: [ self resume ]]Class Process >> return: aContext value: value[	"Pop thread down to aContext's sender.  Execute any unwind blocks on the way.  See #popTo: comment and #runUntilErrorOrReturnFrom: for more details."suspendedContext == aContext	ifTrue: [ ^ suspendedContext := aContext return: value from: aContext ].self activateReturn: aContext value: value.^ self complete: aContext]Class Process >> suspendingList[	"Answer the list on which the receiver has been suspended."^ myList]Class Process >> psValueAt: index put: value[	"Set a value for given index in process-specific storage"	"NOTE: this method are PRIVATE. Do not use it directly, instead use ProcessSpecificVariable (or its subclasses) "env ifNil: [ env := WeakArray new: PSKeys size ].env size < PSKeys size	ifTrue: [ env := env grownBy: PSKeys size - env size ].^ env at: index put: value]Class Process >> calleeOf: aContext[	"Return the context whose sender is aContext.  Return nil if aContext is on top.  Raise error if aContext is not in process chain."suspendedContext == aContext	ifTrue: [ ^ nil ].^ (suspendedContext findContextSuchThat: [ :c | c sender == aContext ])	ifNil: [ self error: 'aContext not in process chain' ]]Class Process >> terminate[	"Stop the process that the receiver represents forever.  Unwind to execute pending ensure:/ifCurtailed: blocks before terminating."| ctxt unwindBlock oldList |self isActiveProcess	ifTrue: [ 		ctxt := thisContext.		[ 		ctxt := ctxt findNextUnwindContextUpTo: nil.		ctxt isNil ]			whileFalse: [ 				(ctxt tempAt: 2)					ifNil: [ 						ctxt tempAt: 2 put: nil.						unwindBlock := ctxt tempAt: 1.						thisContext terminateTo: ctxt.						unwindBlock value ] ].		thisContext terminateTo: nil.		self suspend ]	ifFalse: [ 		"Always suspend the process first so it doesn't accidentally get woken up"		oldList := self suspend.		suspendedContext			ifNotNil: [ 				"Figure out if we are terminating the process while waiting in Semaphore>>critical:				In this case, pop the suspendedContext so that we leave the ensure: block inside				Semaphore>>critical: without signaling the semaphore."				(oldList class == Semaphore and: [ suspendedContext method == (Semaphore compiledMethodAt: #critical:) ])					ifTrue: [ suspendedContext := suspendedContext home ].	"If we are terminating a process halfways through an unwind, try to complete that unwind block first."				(suspendedContext findNextUnwindContextUpTo: nil)					ifNotNil: [ :outer | 						(suspendedContext findContextSuchThat: [ :c | c closure == (outer tempAt: 1) ])							ifNotNil: [ :inner | 								"This is an unwind block currently under evaluation"								suspendedContext runUntilErrorOrReturnFrom: inner ] ].				ctxt := self popTo: suspendedContext bottomContext.				ctxt == suspendedContext bottomContext					ifFalse: [ self debug: ctxt title: 'Unwind error during termination' ] ] ]]Class Process >> longPrintOn: stream[| ctxt |super printOn: stream.stream cr.ctxt := self suspendedContext.[ ctxt == nil ]	whileFalse: [ 		stream space.		ctxt printOn: stream.		stream cr.		ctxt := ctxt sender ]]Class Process >> debugWithTitle: title[	"Open debugger on self"| context |context := self isActiveProcess	ifTrue: [ thisContext ]	ifFalse: [ self suspendedContext ].self debug: context title: title full: true]Class Process >> isSuspended[^ myList isNil or: [ myList isEmpty ]]Class Process >> complete: aContext[	"Run self until aContext is popped or an unhandled error is raised.  Return self's new top context, unless an unhandled error was raised then return the signaler context (rather than open a debugger)."| ctxt pair error |ctxt := suspendedContext.suspendedContext := nil.	"disable this process while running its stack in active process below"pair := ctxt runUntilErrorOrReturnFrom: aContext.suspendedContext := pair first.error := pair second.error ifNotNil: [ ^ error signalerContext ].^ suspendedContext]Class Process >> popTo: aContext[	"Pop self down to aContext by remote returning from aContext's callee.  Unwind blocks will be executed on the way.	This is done by pushing a new context on top which executes 'aContext callee return' then resuming self until aContext is reached.  This way any errors raised in an unwind block will get handled by senders in self and not by senders in the activeProcess.	If an unwind block raises an error that is not handled then the popping stops at the error and the signalling context is returned, othewise aContext is returned."| callee |self == Processor activeProcess	ifTrue: [ ^ self error: 'The active process cannot pop contexts' ].callee := (self calleeOf: aContext) ifNil: [ ^ aContext ].	"aContext is on top"^ self return: callee value: callee receiver]Class Process >> step: aContext[	"Resume self until aContext is on top, or if already on top, do next step"^ self suspendedContext == aContext	ifTrue: [ self step ]	ifFalse: [ self complete: (self calleeOf: aContext) ]]Class Process >> browserPrintStringWith: anObject[| stream |stream := (String new: 100) writeStream.stream nextPut: $(.priority printOn: stream.self isSuspended	ifTrue: [ stream nextPut: $s ].stream nextPutAll: ') '.stream nextPutAll: self name.stream nextPut: $:.stream space.stream nextPutAll: anObject asString.^ stream contents]Class Process >> psValueAt: index[	"Answer a process-specific value at given index, or nil if value at given index is not defined"	"NOTE: this method are PRIVATE. Do not use it directly, instead use ProcessSpecificVariable (or its subclasses) "env ifNil: [ ^ nil ].^ env at: index ifAbsent: nil]Class Process >> install: aContext[	"Replace the suspendedContext with aContext."self == Processor activeProcess	ifTrue: [ ^ self error: 'The active process cannot install contexts' ].suspendedContext := aContext]Class Process >> priority: anInteger[	"Set the receiver's priority to anInteger."(anInteger >= Processor lowestPriority and: [ anInteger <= Processor highestPriority ])	ifTrue: [ priority := anInteger ]	ifFalse: [ self error: 'Invalid priority: ' , anInteger printString ]]Class Process >> restartTop[	"Rollback top context and replace with new method.  Assumes self is suspended"suspendedContext privRefresh]Class Process >> stepToSendOrReturn[^ suspendedContext := suspendedContext stepToSendOrReturn]Class Process >> isTerminated[self isActiveProcess	ifTrue: [ ^ false ].^ suspendedContext isNil	or: [ 		"If the suspendedContext is the bottomContext it is the block in Process>>newProcess.		   If so, and the pc is greater than the startpc, the bock has alrteady sent and returned		   from value and there is nothing more to do."		suspendedContext isBottomContext and: [ suspendedContext pc > suspendedContext startpc ] ]]Class Process >> restartTopWith: method[	"Rollback top context and replace with new method.  Assumes self is suspended"method isQuick	ifTrue: [ self popTo: suspendedContext sender ]	ifFalse: [ suspendedContext privRefreshWith: method ]]Class Process >> step[^ suspendedContext := suspendedContext step]Class Process >> debug: context title: title full: bool[Smalltalk tools debugger	openOn: self	context: context	label: title	contents: nil	fullView: bool]Class Process >> debug: context title: title[	"Open debugger on self with context shown on top"self debug: context title: title full: false]Class Process >> completeTo: aContext[	"Resume self until aContext is on top"self suspendedContext == aContext	ifTrue: [ ^ aContext ].^ self complete: (self calleeOf: aContext)]Class Process >> stepToCallee[	"Step until top context changes"| ctxt |ctxt := suspendedContext.[ ctxt == suspendedContext ] whileTrue: [ suspendedContext := suspendedContext step ].^ suspendedContext]Metaclass	name: #Process;	instanceVariables: #().Metaclass Process >> allocatePSKey: anObject[	"Add a new process-specific key. 	If an object already registered as a key, answer its index,	if object is not registered, first search for an empty slot for insertion and if not found, grow an array to add new object"| index |PSKeysSema ifNil: [ PSKeysSema := Semaphore forMutualExclusion ].PSKeysSema	critical: [ 		PSKeys			ifNil: [ 				PSKeys := WeakArray with: anObject.				index := 1 ]			ifNotNil: [ 				index := PSKeys indexOf: anObject.				index = 0					ifTrue: [ 						index := PSKeys indexOf: nil.						index = 0							ifTrue: [ index := (PSKeys := PSKeys copyWith: anObject) size ]							ifFalse: [ 								"Yes, this is slow, but we have to make sure that if we reusing index,							all existing processes having value at given index reset to nil.							We don't care if new processes will be created during this loop,							since their env variable will be initially nil anyways, hence nothing to reset "								Process allSubInstancesDo: [ :p | p resetPSValueAt: index ] ] ] ] ].^ index]Metaclass Process >> forContext: aContext priority: anInteger[	"Answer an instance of me that has suspended aContext at priority 	anInteger."| newProcess |newProcess := self new.newProcess suspendedContext: aContext.newProcess priority: anInteger.^ newProcess]