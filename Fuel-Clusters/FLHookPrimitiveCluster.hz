Class
	name: #FLHookPrimitiveCluster;
	superclass: #ClassFLPrimitiveCluster;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#theClass );
	classVariables: #();
	package: #'Fuel-Clusters'.

Class FLHookPrimitiveCluster >> clusterMaterializeStepWith: aDecoder
[
super clusterMaterializeStepWith: aDecoder.theClass := aDecoder nextEncodedReference
]

Class FLHookPrimitiveCluster >> clusterReferencesDo: aBlock
[
aBlock value: theClass
]

Class FLHookPrimitiveCluster >> clusterSerializeStepWith: anEncoder
[
super clusterSerializeStepWith: anEncoder.anEncoder encodeReferenceTo: theClass
]

Class FLHookPrimitiveCluster >> initializeAnalyzing: aClass
[
super initializeAnalyzing.theClass := aClass
]

Class FLHookPrimitiveCluster >> materializeInstanceWith: aDecoder
[
^ theClass materializeFrom: aDecoder
]

Class FLHookPrimitiveCluster >> printNameOn: aStream
[
	"Append to the argument, aStream, a sequence of characters that  	identifies the receiver."
super printNameOn: aStream.aStream nextPut: $[.theClass printOn: aStream.aStream nextPut: $]
]

Class FLHookPrimitiveCluster >> serializeInstance: anObject with: anEncoder
[
anObject serializeOn: anEncoder
]

Metaclass
	name: #FLHookPrimitiveCluster;
	instanceVariables: #().

Metaclass FLHookPrimitiveCluster >> clusterBucketIn: aClusterization
[
^ aClusterization primitivesBucket
]

Metaclass FLHookPrimitiveCluster >> newAnalyzing: aClass
[
^ self basicNew	initializeAnalyzing: aClass;	yourself
]

