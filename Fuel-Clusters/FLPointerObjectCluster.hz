Class	name: #FLPointerObjectCluster;	superclass: #ClassFLObjectCluster;	instanceSpecification: #(#pointers #words );	instanceVariables: #(#variablesMapping );	classVariables: #();	package: #'Fuel-Clusters'.Class FLPointerObjectCluster >> clusterMaterializeStepWith: aDecoder[super clusterMaterializeStepWith: aDecoder.variablesMapping := aDecoder variablesMappingFor: theClass]Class FLPointerObjectCluster >> clusterSerializeStepWith: anEncoder[super clusterSerializeStepWith: anEncoder.variablesMapping serializeOn: anEncoder]Class FLPointerObjectCluster >> referencesOf: anObject do: aBlock[variablesMapping referencesOf: anObject do: aBlock]Class FLPointerObjectCluster >> afterMaterializationStepWith: aDecoder[objects do: [ :anObject | anObject fuelAfterMaterialization ]]Class FLPointerObjectCluster >> serializeReferencesStepWith: anEncoder[objects do: [ :anObject | self serializeReferencesOf: anObject with: anEncoder ]]Class FLPointerObjectCluster >> materializeReferencesOf: anObject with: aDecoder[variablesMapping materializeReferencesOf: anObject with: aDecoder]Class FLPointerObjectCluster >> materializeReferencesStepWith: aDecoder[objects do: [ :anObject | self materializeReferencesOf: anObject with: aDecoder ]]Class FLPointerObjectCluster >> initializeAnalyzing: aClass[super initializeAnalyzing: aClass.variablesMapping := FLVariablesMapping newAnalyzing: theClass]Class FLPointerObjectCluster >> serializeReferencesOf: anObject with: anEncoder[variablesMapping serializeReferencesOf: anObject with: anEncoder]Metaclass	name: #FLPointerObjectCluster;	instanceVariables: #().