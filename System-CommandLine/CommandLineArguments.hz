Class
	name: #CommandLineArguments;
	superclass: #ClassObject;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#arguments );
	classVariables: #();
	package: #'System-CommandLine'.

Class CommandLineArguments >> allFilesWithExtension: anExtension
[
^ self arguments select: [ :arg | arg endsWith: anExtension ]
]

Class CommandLineArguments >> argumentAt: index
[
^ arguments at: index
]

Class CommandLineArguments >> arguments
[
^ arguments
]

Class CommandLineArguments >> commandLineArguments
[
	"self commandLineArguments"
| documentPath args |args := OrderedCollection withAll: Smalltalk arguments.documentPath := Smalltalk vm documentPath.documentPath isEmptyOrNil	ifFalse: [ args addFirst: documentPath ].^ args
]

Class CommandLineArguments >> copySubcommand
[
	"return a new copy of this CommandLine without the first arguments"
^ self class withArguments: arguments allButFirst
]

Class CommandLineArguments >> hasArguments
[
^ arguments size > 0
]

Class CommandLineArguments >> hasFileWithExtension: aFileExtension
[
	"return true if the first argument has the given file extension"
^ self arguments anySatisfy: [ :arg | arg endsWith: aFileExtension ]
]

Class CommandLineArguments >> hasOption: aString
[
| option |option := (aString size = 1	ifTrue: [ '-' ]	ifFalse: [ '--' ]) , aString.^ self arguments includes: option
]

Class CommandLineArguments >> includesSubCommand: aName
[
self	withFirstArgument: [ :arg | 		arg = aName			ifTrue: [ ^ true ] ].^ false
]

Class CommandLineArguments >> initialize
[
| documentPath |arguments := OrderedCollection withAll: Smalltalk arguments.documentPath := Smalltalk vm documentPath.documentPath isEmptyOrNil	ifFalse: [ arguments addFirst: documentPath ]
]

Class CommandLineArguments >> initializeWithArguments: aCollection
[
super initialize.arguments := aCollection
]

Class CommandLineArguments >> withFirstArgument: aBlock
[
self arguments ifEmpty: [ ^ self ].^ aBlock value: self arguments first
]

Metaclass
	name: #CommandLineArguments;
	instanceVariables: #(#singleton ).

Metaclass CommandLineArguments >> default
[
^ singleton ifNil: [ singleton := self new initialize ]
]

Metaclass CommandLineArguments >> withArguments: aCollection
[
^ self basicNew	initializeWithArguments: aCollection;	yourself
]

