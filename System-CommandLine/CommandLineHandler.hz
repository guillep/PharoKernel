Class	name: #CommandLineHandler;	superclass: #ClassObject;	instanceSpecification: #(#pointers #words );	instanceVariables: #(#commandLine #stdout );	classVariables: #();	package: #'System-CommandLine'.Class CommandLineHandler >> stdout[^ stdout]Class CommandLineHandler >> commandLine[^ commandLine]Class CommandLineHandler >> allHandlers[^ CommandLineHandler allHandlers]Class CommandLineHandler >> exitSucess[^ Smalltalk exitSucess]Class CommandLineHandler >> commandName[^ self class commandName]Class CommandLineHandler >> activate[self subclassResponsibility]Class CommandLineHandler >> initializeStdout[	"install the line end conversion and initialize the converter"FileStream stdout	wantsLineEndConversion: true;	converter.stdout := FileStream stdout]Class CommandLineHandler >> description[^ self class description]Class CommandLineHandler >> initialize[super initialize.self initializeStdout]Class CommandLineHandler >> quit[Smalltalk exitSucess]Class CommandLineHandler >> exitFailure[^ Smalltalk exitFailure]Class CommandLineHandler >> arguments[^ commandLine arguments]Class CommandLineHandler >> commandLine: aCommandLine[commandLine := aCommandLine]Class CommandLineHandler >> << aString[^ self stdout	nextPutAll: aString;	yourself]Metaclass	name: #CommandLineHandler;	instanceVariables: #().Metaclass CommandLineHandler >> allHandlers[^ self allSubclasses reject: [ :handler | handler isAbstract ]]Metaclass CommandLineHandler >> isAbstract[^ self = CommandLineHandler]Metaclass CommandLineHandler >> selectHandlersFor: aCommandLine[^ self allHandlers select: [ :handlerClass | handlerClass isResponsibleFor: aCommandLine ]]Metaclass CommandLineHandler >> description[	"This method should return a short one-line description of the command"^ nil]Metaclass CommandLineHandler >> prepareSubcommand: commandLineArguments[	"strip the subcommand name from the arguments"commandLineArguments	withFirstArgument: [ :arg | 		arg = self commandName			ifTrue: [ ^ commandLineArguments copySubcommand ] ].	"not a subcommand hence we keep the same args"^ commandLineArguments]Metaclass CommandLineHandler >> commandName[	" Overwrite this method to provide a short name for this command handler.	You may pass the commandName as first argument to the image to select this handler"^ self name]Metaclass CommandLineHandler >> activateWith: aCommandLine[^ self new	commandLine: (self prepareSubcommand: aCommandLine);	activate]Metaclass CommandLineHandler >> isResponsibleFor: aCommandLineArguments[^ aCommandLineArguments includesSubCommand: self commandName]Metaclass CommandLineHandler >> priority[^ 0]