Class
	name: #CommandLineHandler;
	superclass: #ClassObject;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#commandLine #stdout );
	classVariables: #();
	package: #'System-CommandLine'.

Class CommandLineHandler >> << aString
[
^ self stdout	nextPutAll: aString;	yourself
]

Class CommandLineHandler >> activate
[
self subclassResponsibility
]

Class CommandLineHandler >> allHandlers
[
^ CommandLineHandler allHandlers
]

Class CommandLineHandler >> arguments
[
^ commandLine arguments
]

Class CommandLineHandler >> commandLine
[
^ commandLine
]

Class CommandLineHandler >> commandLine: aCommandLine
[
commandLine := aCommandLine
]

Class CommandLineHandler >> commandName
[
^ self class commandName
]

Class CommandLineHandler >> description
[
^ self class description
]

Class CommandLineHandler >> exitFailure
[
^ Smalltalk exitFailure
]

Class CommandLineHandler >> exitSucess
[
^ Smalltalk exitSucess
]

Class CommandLineHandler >> initialize
[
super initialize.self initializeStdout
]

Class CommandLineHandler >> initializeStdout
[
	"install the line end conversion and initialize the converter"
FileStream stdout	wantsLineEndConversion: true;	converter.stdout := FileStream stdout
]

Class CommandLineHandler >> quit
[
Smalltalk exitSucess
]

Class CommandLineHandler >> stdout
[
^ stdout
]

Metaclass
	name: #CommandLineHandler;
	instanceVariables: #().

Metaclass CommandLineHandler >> activateWith: aCommandLine
[
^ self new	commandLine: (self prepareSubcommand: aCommandLine);	activate
]

Metaclass CommandLineHandler >> allHandlers
[
^ self allSubclasses reject: [ :handler | handler isAbstract ]
]

Metaclass CommandLineHandler >> commandName
[
	" Overwrite this method to provide a short name for this command handler.	You may pass the commandName as first argument to the image to select this handler"
^ self name
]

Metaclass CommandLineHandler >> description
[
	"This method should return a short one-line description of the command"
^ nil
]

Metaclass CommandLineHandler >> isAbstract
[
^ self = CommandLineHandler
]

Metaclass CommandLineHandler >> isResponsibleFor: aCommandLineArguments
[
^ aCommandLineArguments includesSubCommand: self commandName
]

Metaclass CommandLineHandler >> prepareSubcommand: commandLineArguments
[
	"strip the subcommand name from the arguments"
commandLineArguments	withFirstArgument: [ :arg | 		arg = self commandName			ifTrue: [ ^ commandLineArguments copySubcommand ] ].	"not a subcommand hence we keep the same args"^ commandLineArguments
]

Metaclass CommandLineHandler >> priority
[
^ 0
]

Metaclass CommandLineHandler >> selectHandlersFor: aCommandLine
[
^ self allHandlers select: [ :handlerClass | handlerClass isResponsibleFor: aCommandLine ]
]

