Class	name: #LocaleID;	superclass: #ClassObject;	instanceSpecification: #(#pointers #words );	instanceVariables: #(#isoLanguage #isoCountry );	classVariables: #();	package: #'System-Localization'.Class LocaleID >> hash[^ self isoLanguage hash bitXor: self isoCountry hash]Class LocaleID >> hasParent[^ self isoCountry notNil]Class LocaleID >> printOn: stream[	"<language>-<country>"stream nextPutAll: self isoLanguage.self isoCountry	ifNotNil: [ 		stream			nextPut: $-;			nextPutAll: self isoCountry ]]Class LocaleID >> isoLanguage: langString isoCountry: countryStringOrNil[isoLanguage := langString.isoCountry := countryStringOrNil]Class LocaleID >> translator[^ NaturalLanguageTranslator localeID: self]Class LocaleID >> parent[^ self class isoLanguage: self isoLanguage]Class LocaleID >> isoCountry[^ isoCountry]Class LocaleID >> = anotherObject[self class == anotherObject class	ifFalse: [ ^ false ].^ self isoLanguage = anotherObject isoLanguage and: [ self isoCountry = anotherObject isoCountry ]]Class LocaleID >> isoString[^ self asString]Class LocaleID >> posixName[	"(LocaleID isoString: 'es-MX') posixName"	"(LocaleID isoString: 'es') posixName"	"language[_territory]"^ self isoCountry ifNil: [ self isoLanguage ] ifNotNil: [ self isoLanguage , '_' , self isoCountry ]]Class LocaleID >> isoLanguage[^ isoLanguage]Class LocaleID >> storeOn: aStream[aStream nextPut: $(.aStream nextPutAll: self class name.aStream nextPutAll: ' isoString: '.aStream nextPutAll: '''' , self printString , ''''.aStream nextPut: $)]Class LocaleID >> displayCountry[^ ISOLanguageDefinition iso2Countries at: self isoCountry asUppercase ifAbsent: [ self isoCountry ]]Class LocaleID >> displayLanguage[| language |language := (ISOLanguageDefinition iso2LanguageTable at: self isoLanguage ifAbsent: [ ^ self isoLanguage ]) language.^ self isoCountry ifNil: [ language ] ifNotNil: [ language , ' (' , self displayCountry , ')' ]]Metaclass	name: #LocaleID;	instanceVariables: #().Metaclass LocaleID >> posixName: aString[^ self isoString: (aString copyReplaceAll: '_' with: '-')]Metaclass LocaleID >> isoLanguage: langString isoCountry: countryStringOrNil[^ self new isoLanguage: langString isoCountry: countryStringOrNil]Metaclass LocaleID >> isoString: isoString[	"Parse the isoString (<language>-<country>) into its components and return the matching LocaleID"	"LocaleID isoString: 'en' "	"LocaleID isoString: 'en-us' "| parts language country |parts := isoString findTokens: #($-).language := parts first.parts size > 1	ifTrue: [ country := parts second ].^ self isoLanguage: language isoCountry: country]Metaclass LocaleID >> current[^ Locale current localeID]Metaclass LocaleID >> previous[^ Locale previous localeID]Metaclass LocaleID >> isoLanguage: langString[^ self isoLanguage: langString isoCountry: nil]