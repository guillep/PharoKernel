FLCompiledMethodCluster
	superclass: #FLIteratingCluster;
	package: #Fuel.

FLCompiledMethodCluster class
	instanceVariables: #(#transformationForSerializing ).

FLCompiledMethodCluster >> materializeInstanceWith: aDecoder
[materializeInstanceWith: aDecoder
	| compiledMethod header bytecodesPlusTrailerSize |
	header := aDecoder nextEncodedUint32.
	bytecodesPlusTrailerSize := aDecoder nextEncodedUint16.
	compiledMethod := CompiledMethod newMethod: bytecodesPlusTrailerSize header: header.
	compiledMethod initialPC to: compiledMethod size do: [ :index | compiledMethod at: index put: aDecoder nextEncodedByte ].
	^ compiledMethod
]

FLCompiledMethodCluster >> materializeLiteralsTo: compiledMethod with: aDecoder
[materializeLiteralsTo: compiledMethod with: aDecoder
	1 to: compiledMethod numLiterals do: [ :index | compiledMethod literalAt: index put: aDecoder nextEncodedReference ]
]

FLCompiledMethodCluster >> materializeReferencesStepWith: aDecoder
[materializeReferencesStepWith: aDecoder
	objects do: [ :aCompiledMethod | self materializeLiteralsTo: aCompiledMethod with: aDecoder ]
]

FLCompiledMethodCluster >> referencesOf: aCompiledMethod do: aBlock
[referencesOf: aCompiledMethod do: aBlock
	aCompiledMethod fuelPrepare.
	1 to: aCompiledMethod numLiterals do: [ :index | aBlock value: (aCompiledMethod literalAt: index) ]
]

FLCompiledMethodCluster >> serializeInstance: aCompiledMethodToSerialize with: anEncoder
[serializeInstance: aCompiledMethodToSerialize with: anEncoder
	| header bytecodesPlusTrailerSize cmSize cmInitialPC aCompiledMethod |
	aCompiledMethod := self class transformationForSerializing value: aCompiledMethodToSerialize.
	header := aCompiledMethod header.
	cmSize := aCompiledMethod size.
	cmInitialPC := aCompiledMethod initialPC.
	bytecodesPlusTrailerSize := cmSize - cmInitialPC + 1.
	anEncoder
		encodeUint32: header;
		encodeUint16: bytecodesPlusTrailerSize.
	cmInitialPC to: cmSize do: [ :index | anEncoder encodeByte: (aCompiledMethod at: index) ]
]

FLCompiledMethodCluster >> serializeLiteralsOf: aCompiledMethod with: anEncoder
[serializeLiteralsOf: aCompiledMethod with: anEncoder
	aCompiledMethod fuelPrepare.
	1 to: aCompiledMethod numLiterals do: [ :index | anEncoder encodeReferenceTo: (aCompiledMethod literalAt: index) ]
]

FLCompiledMethodCluster >> serializeReferencesStepWith: anEncoder
[serializeReferencesStepWith: anEncoder
	objects do: [ :aCompiledMethod | self serializeLiteralsOf: aCompiledMethod with: anEncoder ]
]

FLCompiledMethodCluster class >> cleanUp
[cleanUp
	self initialize
]

FLCompiledMethodCluster class >> clusterBucketIn: aClusterization
[clusterBucketIn: aClusterization
	^ aClusterization primitivesBucket
]

FLCompiledMethodCluster class >> initialize
[initialize
	self setTrailerWithNoSource
]

FLCompiledMethodCluster class >> setTrailerWithNoChange
[setTrailerWithNoChange
	"Make compiled methods be serialized as they are."

	^ self transformationForSerializing: [ :aCompiledMethod | aCompiledMethod ]
]

FLCompiledMethodCluster class >> setTrailerWithNoSource
[setTrailerWithNoSource
	"Make compiled methods be serialized without source code."

	^ self
		transformationForSerializing: [ :aCompiledMethod | aCompiledMethod copyWithTrailerBytes: CompiledMethodTrailer empty ]
]

FLCompiledMethodCluster class >> setTrailerWithSourceCode
[setTrailerWithSourceCode
	"Make compiled methods be serialized with embedded source code."

	^ self
		transformationForSerializing: [ :aCompiledMethod | aCompiledMethod copyWithTrailerBytes: (CompiledMethodTrailer new sourceCode: aCompiledMethod sourceCode) ]
]

FLCompiledMethodCluster class >> transformationForSerializing
[transformationForSerializing
	"Answer a block closure that receives a CompiledMethod and returns another or the same CompiledMethod ready for being serialized."

	^ transformationForSerializing
]

FLCompiledMethodCluster class >> transformationForSerializing: aBlockWithOneArgument
[transformationForSerializing: aBlockWithOneArgument
	transformationForSerializing := aBlockWithOneArgument
]

