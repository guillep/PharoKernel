FLSerialization
	instanceVariables: #(#encoder #root #clusters #analyzer );
	package: #Fuel.

FLSerialization >> analysisStep
[
	| anAnalysis |
	anAnalysis := analyzer analysisFor: root.
	clusters := anAnalysis clusterization clusters.
	encoder objectCount: anAnalysis clusterization objectCount
]

FLSerialization >> clusterInstancesStepOf: aCluster
[
	encoder encodeClusterClass: aCluster class.
	aCluster clusterSerializeStepWith: self.
	aCluster serializeInstancesStepWith: encoder.
	aCluster serializePostInstancesStepWith: encoder
]

FLSerialization >> clusters
[
	^ clusters
]

FLSerialization >> encoder
[
	^ encoder
]

FLSerialization >> fuelAccept: aGeneralMapper
[
	^ aGeneralMapper visitSubstitution: self by: nil
]

FLSerialization >> headerStep
[
	encoder encodeYourself.
	encoder encodePositiveInteger: clusters size
]

FLSerialization >> initializeWith: anEncoder root: anObject analyzer: anAnalyzer
[
	self initialize.
	encoder := anEncoder.
	root := anObject.
	analyzer := anAnalyzer
]

FLSerialization >> instancesStep
[
	clusters do: [ :aCluster | aCluster registerIndexesOn: encoder objectsIndexes ].
	clusters do: [ :aCluster | self clusterInstancesStepOf: aCluster ]
]

FLSerialization >> objects
[
	"Answer a collection with the serialized objects."

	^ encoder objectsIndexes keys
]

FLSerialization >> referencesStep
[
	clusters do: [ :aCluster | aCluster serializeReferencesStepWith: encoder ]
]

FLSerialization >> root
[
	^ root
]

FLSerialization >> run
[
	"Serialize the graph starting at the root object."

	self analysisStep.
	self headerStep.
	self instancesStep.
	self referencesStep.
	self trailerStep
]

FLSerialization >> trailerStep
[
	encoder encodeReferenceTo: root
]

FLSerialization class >> with: anEncoder root: anObject analyzer: anAnalyzer
[
	^ self basicNew
		initializeWith: anEncoder root: anObject analyzer: anAnalyzer;
		yourself
]

