FLIteratingCluster
	superclass: #FLCluster;
	instanceVariables: #(#objects );
	package: #Fuel.

FLIteratingCluster >> add: anObject traceWith: aAnalysis
add: anObject traceWith: aAnalysis
	"Add an object to the cluster and trace references."

	objects addIfNotPresent: anObject ifPresentDo: [ ^ self ].
	self referencesOf: anObject do: [ :aChild | aAnalysis trace: aChild ]

FLIteratingCluster >> clusterMaterializeStepWith: aMaterialization
clusterMaterializeStepWith: aMaterialization
	super clusterMaterializeStepWith: aMaterialization.
	objects := Array new: aMaterialization decoder nextEncodedPositiveInteger

FLIteratingCluster >> clusterSerializeStepWith: aSerialization
clusterSerializeStepWith: aSerialization
	super clusterSerializeStepWith: aSerialization.
	aSerialization encoder encodePositiveInteger: objects size

FLIteratingCluster >> initializeAnalyzing
initializeAnalyzing
	super initializeAnalyzing.
	objects := self newAnalyzingCollection

FLIteratingCluster >> materializeInstanceWith: aDecoder
materializeInstanceWith: aDecoder
	"Hook method that each subclass should customize for its special way of materializing"

	^ self subclassResponsibility

FLIteratingCluster >> materializeInstancesStepWith: aDecoder
materializeInstancesStepWith: aDecoder
	1 to: objects size do: [ :index | objects at: index put: (self materializeInstanceWith: aDecoder) ]

FLIteratingCluster >> newAnalyzingCollection
newAnalyzingCollection
	"Answer a collection for the objects that correspond to this cluster."

	^ FLLargeIdentitySet new

FLIteratingCluster >> objects
objects
	^ objects

FLIteratingCluster >> printNameOn: aStream
printNameOn: aStream
	super printOn: aStream

FLIteratingCluster >> printOn: aStream
printOn: aStream
	self printNameOn: aStream.
	aStream nextPutAll: '->'.
	objects printElementsOn: aStream

FLIteratingCluster >> referencesOf: anObject do: aBlock
referencesOf: anObject do: aBlock
	"Evaluate a block with each object referenced by anObject"

	

FLIteratingCluster >> registerIndexesOn: aDictionary
registerIndexesOn: aDictionary
	self objects do: [ :instance | aDictionary at: instance put: aDictionary size + 1 ]

FLIteratingCluster >> serializeInstance: anObject with: anEncoder
serializeInstance: anObject with: anEncoder
	"Hook method that each subclass should customize for its special way of serializing"

	

FLIteratingCluster >> serializeInstancesStepWith: anEncoder
serializeInstancesStepWith: anEncoder
	objects do: [ :instance | self serializeInstance: instance with: anEncoder ]

