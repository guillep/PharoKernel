FLAbstractCollectionCluster
	superclass: #FLObjectCluster;
	package: #Fuel.

FLAbstractCollectionCluster >> afterMaterializationStepWith: aDecoder
[afterMaterializationStepWith: aDecoder
	objects do: [ :anObject | anObject fuelAfterMaterialization ]
]

FLAbstractCollectionCluster >> materializeInstanceWith: aDecoder
[materializeInstanceWith: aDecoder
	^ theClass new: aDecoder nextEncodedPositiveInteger
]

FLAbstractCollectionCluster >> materializeReferencesOf: anObject with: aDecoder
[materializeReferencesOf: anObject with: aDecoder
	"Hook method"

	self subclassResponsibility
]

FLAbstractCollectionCluster >> materializeReferencesStepWith: aDecoder
[materializeReferencesStepWith: aDecoder
	objects do: [ :anObject | self materializeReferencesOf: anObject with: aDecoder ]
]

FLAbstractCollectionCluster >> serializeInstance: anObject with: anEncoder
[serializeInstance: anObject with: anEncoder
	anEncoder encodePositiveInteger: anObject size
]

FLAbstractCollectionCluster >> serializeReferencesOf: anObject with: anEncoder
[serializeReferencesOf: anObject with: anEncoder
	^ self subclassResponsibility
]

FLAbstractCollectionCluster >> serializeReferencesStepWith: anEncoder
[serializeReferencesStepWith: anEncoder
	objects do: [ :anObject | self serializeReferencesOf: anObject with: anEncoder ]
]

FLAbstractCollectionCluster class >> clusterBucketIn: aClusterization
[clusterBucketIn: aClusterization
	"During the materialization references step, we may send, for example, #hash to the newly materialized objects. #hash can be implemented delegating to OTHER objects which may not have been materialized yet (I mean, its references may not have been set yet). So in this case, we need to let these clusters at the end."

	^ aClusterization postBaselevelBucket
]

