FLLargeIdentitySet
	superclass: #FLLargeIdentityHashedCollection;
	instanceVariables: #(#array #includesNil );
	package: #Fuel.

FLLargeIdentitySet >> add: anObject
add: anObject
	| hash |
	anObject ifNil: [ includesNil
				ifFalse: [ includesNil := true.
					tally := tally + 1 ].
			^ anObject ].
	(array at: (hash := anObject largeIdentityHash + 1))
		ifNil: [ array at: hash put: (Array with: anObject).
			tallies at: hash put: 1.
			tally := tally + 1 ]
		ifNotNil: [ :list | (list fuelPointsTo: anObject)
				ifFalse: [ | newIndex |
					tally := tally + 1.
					list size < (newIndex := (tallies at: hash) + 1)
						ifFalse: [ list at: newIndex put: anObject ]
						ifTrue: [ | newList |
							newList := Array new: list size * 2.
							newList
								replaceFrom: 1
									to: list size
									with: list
									startingAt: 1;
								at: newIndex put: anObject.
							array at: hash put: newList ].
					tallies at: hash put: newIndex ] ].
	^ anObject

FLLargeIdentitySet >> addIfNotPresent: anObject ifPresentDo: aBlock
addIfNotPresent: anObject ifPresentDo: aBlock
	| hash |
	anObject ifNil: [ includesNil
				ifFalse: [ includesNil := true.
					tally := tally + 1 ].
			^ anObject ].
	(array at: (hash := anObject largeIdentityHash + 1))
		ifNil: [ array at: hash put: (Array with: anObject).
			tallies at: hash put: 1.
			tally := tally + 1 ]
		ifNotNil: [ :list | (list fuelPointsTo: anObject)
				ifTrue: [ aBlock value ]
				ifFalse: [ | newIndex |
					tally := tally + 1.
					list size < (newIndex := (tallies at: hash) + 1)
						ifFalse: [ list at: newIndex put: anObject ]
						ifTrue: [ | newList |
							newList := Array new: list size * 2.
							newList
								replaceFrom: 1
									to: list size
									with: list
									startingAt: 1;
								at: newIndex put: anObject.
							array at: hash put: newList ].
					tallies at: hash put: newIndex ] ].
	^ anObject

FLLargeIdentitySet >> do: aBlock
do: aBlock
	tally = 0
		ifTrue: [ ^ self ].
	includesNil
		ifTrue: [ aBlock value: nil ].
	1 to: 4096 do: [ :arrayIndex | | subArray |
		subArray := array at: arrayIndex.
		1 to: (tallies at: arrayIndex) do: [ :index | aBlock value: (subArray at: index) ] ]

FLLargeIdentitySet >> includes: anObject
includes: anObject
	anObject ifNil: [ ^ includesNil ].
	^ (array at: anObject largeIdentityHash + 1) ifNil: [ false ] ifNotNil: [ :list | list fuelPointsTo: anObject ]

FLLargeIdentitySet >> initialize
initialize
	super initialize.
	array := Array new: 4096.
	includesNil := false

FLLargeIdentitySet >> postCopy
postCopy
	super postCopy.
	array := array copy.
	1 to: 4096 do: [ :index | (array at: index) ifNotNil: [ :list | array at: index put: list copy ] ]

FLLargeIdentitySet >> remove: anObject ifAbsent: aBlock
remove: anObject ifAbsent: aBlock
	| list hash size |
	anObject
		ifNil: [ includesNil
				ifTrue: [ includesNil := false.
					tally := tally - 1.
					^ anObject ].
			^ aBlock value ].
	list := (array at: (hash := anObject largeIdentityHash + 1)) ifNil: [ ^ aBlock value ].
	(list fuelPointsTo: anObject)
		ifFalse: [ ^ aBlock value ].
	1 to: (size := tallies at: hash) do: [ :index | (list at: index) == anObject
			ifTrue: [ list
					at: index put: (list at: size);
					at: size put: nil.
				(size := size - 1) < (list size // 4)
					ifTrue: [ | newList |
						newList := Array new: size * 2.
						newList
							replaceFrom: 1
							to: size
							with: list
							startingAt: 1.
						array at: hash put: newList ].
				tallies at: hash put: size.
				tally := tally - 1.
				^ anObject ] ].
	^ aBlock value

