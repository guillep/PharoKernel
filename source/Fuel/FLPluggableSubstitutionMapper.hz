FLPluggableSubstitutionMapper
	superclass: #FLMapper;
	instanceVariables: #(#condition #substitutionFactory );
	package: #Fuel.

FLPluggableSubstitutionMapper >> initializeWith: aCondition substitutionFactory: aBlock
[
	self initialize.
	condition := aCondition.
	substitutionFactory := aBlock
]

FLPluggableSubstitutionMapper >> mapAndTrace: anObject
[
	"Uses the Chain of Responsibility pattern to answer the cluster which maps with the received object."

	(condition value: anObject)
		ifTrue: [ self mapAndTraceSubstitutionIfNotRecursive: anObject ]
		ifFalse: [ next mapAndTrace: anObject ]
]

FLPluggableSubstitutionMapper >> mapAndTraceSubstitutionIfNotRecursive: anObject
[
	| cluster |
	cluster := self clusterKeyedByClusterName: FLSubstitutionCluster.
	(cluster isSubstitute: anObject)
		ifTrue: [ next mapAndTrace: anObject ]
		ifFalse: [ cluster add: anObject substitutedBy: (substitutionFactory value: anObject) traceWith: analysis ]
]

FLPluggableSubstitutionMapper class >> when: aCondition substituteBy: aFactory
[
	^ self basicNew
		initializeWith: aCondition substitutionFactory: aFactory;
		yourself
]

ition substituteBy: aFactory
[when: aCondition substituteBy: aFactory
	^ self basicNew
		initializeWith: aCondition substitutionFactory: aFactory;
		yourself
]

