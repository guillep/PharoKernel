FLLargeIdentityDictionary
	superclass: #FLLargeIdentityHashedCollection;
	instanceVariables: #(#keys #values );
	package: #Fuel.

FLLargeIdentityDictionary >> at: key
[
	| hash |
	(keys at: (hash := key largeIdentityHash + 1))
		ifNotNil: [ :keyList | 1 to: (tallies at: hash) do: [ :index | (keyList at: index) == key
					ifTrue: [ ^ (values at: hash) at: index ] ] ].
	self errorKeyNotFound: key
]

FLLargeIdentityDictionary >> at: key ifAbsent: aBlock
[
	| hash |
	(keys at: (hash := key largeIdentityHash + 1))
		ifNotNil: [ :keyList | 1 to: (tallies at: hash) do: [ :index | (keyList at: index) == key
					ifTrue: [ ^ (values at: hash) at: index ] ] ].
	^ aBlock value
]

FLLargeIdentityDictionary >> at: key ifPresent: presentBlock ifAbsent: absentBlock
[
	| hash |
	(keys at: (hash := key largeIdentityHash + 1))
		ifNotNil: [ :keyList | 1 to: (tallies at: hash) do: [ :index | (keyList at: index) == key
					ifTrue: [ ^ presentBlock value: ((values at: hash) at: index) ] ] ].
	^ absentBlock value
]

FLLargeIdentityDictionary >> at: key put: value
[
	| hash |
	(keys at: (hash := key largeIdentityHash + 1))
		ifNil: [ keys at: hash put: (Array with: key).
			values at: hash put: (Array with: value).
			tallies at: hash put: 1.
			tally := tally + 1 ]
		ifNotNil: [ :keyList | | newIndex |
			1 to: (tallies at: hash) do: [ :index | (keyList at: index) == key
					ifTrue: [ ^ (values at: hash) at: index put: value ] ].
			tally := tally + 1.
			keyList size < (newIndex := (tallies at: hash) + 1)
				ifFalse: [ keyList at: newIndex put: key.
					(values at: hash) at: newIndex put: value ]
				ifTrue: [ | newList |
					(newList := Array new: keyList size * 2)
						replaceFrom: 1
							to: keyList size
							with: keyList
							startingAt: 1;
						at: newIndex put: key.
					keys at: hash put: newList.
					(newList := Array new: keyList size * 2)
						replaceFrom: 1
							to: keyList size
							with: (values at: hash)
							startingAt: 1;
						at: newIndex put: value.
					values at: hash put: newList ].
			tallies at: hash put: newIndex ].
	^ value
]

FLLargeIdentityDictionary >> do: aBlock
[
	^ self valuesDo: aBlock
]

FLLargeIdentityDictionary >> errorKeyNotFound: aKey
[
	KeyNotFound signalFor: aKey
]

FLLargeIdentityDictionary >> includesKey: key
[
	| hash |
	^ (keys at: (hash := key largeIdentityHash + 1))
		ifNil: [ false ]
		ifNotNil: [ :keyList | key
				ifNotNil: [ keyList fuelPointsTo: key ]
				ifNil: [ 1 to: (tallies at: hash) do: [ :index | (keyList at: index) == key
							ifTrue: [ ^ true ] ].
					false ] ]
]

FLLargeIdentityDictionary >> initialize
[
	super initialize.
	keys := Array new: 4096.
	values := Array new: 4096
]

FLLargeIdentityDictionary >> keys
[
	^ Array new: tally streamContents: [ :stream | self keysDo: [ :key | stream nextPut: key ] ]
]

FLLargeIdentityDictionary >> keysAndValuesDo: aBlock
[
	tally = 0
		ifTrue: [ ^ self ].
	1 to: 4096 do: [ :arrayIndex | | keyArray valueArray |
		keyArray := keys at: arrayIndex.
		valueArray := values at: arrayIndex.
		1 to: (tallies at: arrayIndex) do: [ :index | aBlock value: (keyArray at: index) value: (valueArray at: index) ] ]
]

FLLargeIdentityDictionary >> keysDo: aBlock
[
	tally = 0
		ifTrue: [ ^ self ].
	1 to: 4096 do: [ :arrayIndex | | keyArray |
		keyArray := keys at: arrayIndex.
		1 to: (tallies at: arrayIndex) do: [ :index | aBlock value: (keyArray at: index) ] ]
]

FLLargeIdentityDictionary >> postCopy
[
	super postCopy.
	keys := keys copy.
	values := values copy.
	1 to: 4096 do: [ :index | (keys at: index) ifNotNil: [ :list | keys at: index put: list copy.
				values at: index put: (values at: index) copy ] ]
]

FLLargeIdentityDictionary >> removeKey: key ifAbsent: aBlock
[
	| hash |
	(keys at: (hash := key largeIdentityHash + 1))
		ifNotNil: [ :keyList | | size |
			1 to: (size := tallies at: hash) do: [ :index | (keyList at: index) == key
					ifTrue: [ | valueList |
						keyList
							at: index put: (keyList at: size);
							at: size put: nil.
						(valueList := values at: hash)
							at: index put: (valueList at: size);
							at: size put: nil.
						(size := size - 1) < (keyList size // 4)
							ifTrue: [ | newList |
								newList := Array new: size * 2.
								newList
									replaceFrom: 1
									to: size
									with: keyList
									startingAt: 1.
								keys at: hash put: newList.
								newList := Array new: size * 2.
								newList
									replaceFrom: 1
									to: size
									with: valueList
									startingAt: 1.
								values at: hash put: newList ].
						tallies at: hash put: size.
						tally := tally - 1.
						^ key ] ] ].
	^ aBlock value
]

FLLargeIdentityDictionary >> values
[
	^ Array new: tally streamContents: [ :stream | self valuesDo: [ :value | stream nextPut: value ] ]
]

FLLargeIdentityDictionary >> valuesDo: aBlock
[
	tally = 0
		ifTrue: [ ^ self ].
	1 to: 4096 do: [ :arrayIndex | | valueArray |
		valueArray := values at: arrayIndex.
		1 to: (tallies at: arrayIndex) do: [ :index | aBlock value: (valueArray at: index) ] ]
]

tyDictionary >> valuesDo: aBlock
[valuesDo: aBlock
	tally = 0
		ifTrue: [ ^ self ].
	1 to: 4096 do: [ :arrayIndex | | valueArray |
		valueArray := values at: arrayIndex.
		1 to: (tallies at: arrayIndex) do: [ :index | aBlock value: (valueArray at: index) ] ]
]

