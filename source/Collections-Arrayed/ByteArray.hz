ByteArray
	superclass: #ArrayedCollection;
	instanceSpecification: #(#variable #byte );
	package: #'Collections-Arrayed'.

ByteArray >> asByteArray
[
	^ self
]

ByteArray >> asByteArrayPointer
[
	"Return a ByteArray describing a pointer to the contents of the receiver."

	^ self shouldNotImplement
]

ByteArray >> asString
[
	"Convert to a String with Characters for each byte.
	Fast code uses primitive that avoids character conversion"

	^ (String new: self size) replaceFrom: 1 to: self size with: self
]

ByteArray >> asWideString
[
	^ WideString fromByteArray: self
]

ByteArray >> atAllPut: value
[
	"Fill the receiver with the given value"

	<primitive: 145>
	super atAllPut: value
]

ByteArray >> byteAt: index
[
	<primitive: 60>
	^ self at: index
]

ByteArray >> byteAt: index put: value
[
	<primitive: 61>
	^ self at: index put: value
]

ByteArray >> byteSize
[
	^ self size
]

ByteArray >> defaultElement
[
	^ 0
]

ByteArray >> doubleAt: index bigEndian: bool
[
	"Return a 64 bit float starting from the given byte index"

	| w1 w2 dbl |
	w1 := self unsignedLongAt: index bigEndian: bool.
	w2 := self unsignedLongAt: index + 4 bigEndian: bool.
	dbl := Float new: 2.
	bool
		ifTrue: [ dbl basicAt: 1 put: w1.
			dbl basicAt: 2 put: w2 ]
		ifFalse: [ dbl basicAt: 1 put: w2.
			dbl basicAt: 2 put: w1 ].
	^ dbl
]

ByteArray >> doubleAt: index put: value bigEndian: bool
[
	"Store a 64 bit float starting from the given byte index"

	| w1 w2 |
	bool
		ifTrue: [ w1 := value basicAt: 1.
			w2 := value basicAt: 2 ]
		ifFalse: [ w1 := value basicAt: 2.
			w2 := value basicAt: 1 ].
	self unsignedLongAt: index put: w1 bigEndian: bool.
	self unsignedLongAt: index + 4 put: w2 bigEndian: bool.
	^ value
]

ByteArray >> floatAt: index bigEndian: boolean
[
	^ Float fromIEEE32Bit: (self unsignedLongAt: index bigEndian: boolean)
]

ByteArray >> hash
[
	"#hash is implemented, because #= is implemented"

	^ self class hashBytes: self startingWith: self species hash
]

ByteArray >> hex
[
	" an alternate implementation was | result stream |
	result := String new: self size * 2.
	stream := result writeStream.
	1 to: self size do: [ :ix | |each|
		each := self at: ix.
		stream
			nextPut: ('0123456789ABCDEF' at: each // 16 + 1);
			nextPut: ('0123456789ABCDEF' at: each \\ 16 + 1)].
    ^ result"

	"Answer a hexa decimal representation of the receiver"

	| string v index map |
	map := '0123456789abcdef'.
	string := String new: self size * 2.	"hex"
	index := 0.
	1 to: self size do: [ :i | v := self at: i.
		string at: (index := index + 1) put: (map at: (v bitShift: -4) + 1).
		string at: (index := index + 1) put: (map at: (v bitAnd: 15) + 1) ].
	^ string
]

ByteArray >> indexOf: anInteger startingAt: start
[
	(anInteger isInteger and: [ anInteger >= 0 and: [ anInteger <= 255 ] ])
		ifFalse: [ ^ 0 ].
	^ ByteString indexOfAscii: anInteger inString: self startingAt: start
]

ByteArray >> isLiteral
[
	"so that #(1 #[1 2 3] 5) prints itself"

	""

	^ self class == ByteArray
]

ByteArray >> longAt: index bigEndian: aBool
[
	"Return a 32bit integer quantity starting from the given byte index"

	| b0 b1 b2 w h |
	aBool
		ifTrue: [ b0 := self at: index.
			b1 := self at: index + 1.
			b2 := self at: index + 2.
			w := self at: index + 3 ]
		ifFalse: [ w := self at: index.
			b2 := self at: index + 1.
			b1 := self at: index + 2.
			b0 := self at: index + 3 ].	"Minimize LargeInteger arithmetic"
	h := ((b0 bitAnd: 16r7F) - (b0 bitAnd: 16r80) bitShift: 8) + b1.
	b2 = 0
		ifFalse: [ w := (b2 bitShift: 8) + w ].
	h = 0
		ifFalse: [ w := (h bitShift: 16) + w ].
	^ w
]

ByteArray >> longAt: index put: value bigEndian: aBool
[
	"Return a 32bit integer quantity starting from the given byte index"

	| b0 b1 b2 b3 |
	b0 := value bitShift: -24.
	b0 := (b0 bitAnd: 16r7F) - (b0 bitAnd: 16r80).
	b0 < 0
		ifTrue: [ b0 := 256 + b0 ].
	b1 := (value bitShift: -16) bitAnd: 255.
	b2 := (value bitShift: -8) bitAnd: 255.
	b3 := value bitAnd: 255.
	aBool
		ifTrue: [ self at: index put: b0.
			self at: index + 1 put: b1.
			self at: index + 2 put: b2.
			self at: index + 3 put: b3 ]
		ifFalse: [ self at: index put: b3.
			self at: index + 1 put: b2.
			self at: index + 2 put: b1.
			self at: index + 3 put: b0 ].
	^ value
]

ByteArray >> printOn: aStream
[
	aStream nextPutAll: '#['.
	self do: [ :each | each printOn: aStream ] separatedBy: [ aStream nextPut: $  ].
	aStream nextPut: $]
]

ByteArray >> readHexFrom: aStream
[
	"Initialize the receiver from a hexadecimal string representation"

	| map v ch value |
	map := '0123456789abcdefABCDEF'.
	1 to: self size do: [ :i | 
		ch := aStream next.
		v := (map indexOf: ch) - 1.
		((v between: 0 and: 15) or: [ (v := v - 6) between: 0 and: 15 ])
			ifFalse: [ 
				^ self
					error:
						'Hex digit expected' ].
		value := v bitShift: 4.
		ch := aStream next.
		v := (map indexOf: ch) - 1.
		((v between: 0 and: 15) or: [ (v := v - 6) between: 0 and: 15 ])
			ifFalse: [ 
				^ self
					error:
						'Hex digit expected' ].
		value := value + v.
		self at: i put: value ]
]

ByteArray >> replaceFrom: start to: stop with: replacement startingAt: repStart
[
	"Primitive. This destructively replaces elements from start to stop in the receiver starting at index, repStart, in the collection, replacement. Answer the receiver. Range checks are performed in the primitive only. Optional. See Object documentation whatIsAPrimitive."

	<primitive: 105>
	super
		replaceFrom: start
		to: stop
		with: replacement
		startingAt: repStart
]

ByteArray >> shortAt: index bigEndian: aBool
[
	"Return a 16 bit integer quantity starting from the given byte index"

	| uShort |
	uShort := self unsignedShortAt: index bigEndian: aBool.
	^ (uShort bitAnd: 16r7FFF) - (uShort bitAnd: 16r8000)
]

ByteArray >> shortAt: index put: value bigEndian: aBool
[
	"Store a 16 bit integer quantity starting from the given byte index"

	self unsignedShortAt: index put: (value bitAnd: 16r7FFF) - (value bitAnd: -16r8000) bigEndian: aBool.
	^ value
]

ByteArray >> storeOn: aStream
[
	aStream nextPutAll: '#['.
	self do: [ :each | each storeOn: aStream ] separatedBy: [ aStream nextPut: $  ].
	aStream nextPut: $]
]

ByteArray >> unsignedLongAt: index bigEndian: aBool
[
	"Return a 32bit unsigned integer quantity starting from the given byte index"

	| b0 b1 b2 w |
	aBool
		ifTrue: [ b0 := self at: index.
			b1 := self at: index + 1.
			b2 := self at: index + 2.
			w := self at: index + 3 ]
		ifFalse: [ w := self at: index.
			b2 := self at: index + 1.
			b1 := self at: index + 2.
			b0 := self at: index + 3 ].	"Minimize LargeInteger arithmetic"
	b2 = 0
		ifFalse: [ w := (b2 bitShift: 8) + w ].
	b1 = 0
		ifFalse: [ w := (b1 bitShift: 16) + w ].
	b0 = 0
		ifFalse: [ w := (b0 bitShift: 24) + w ].
	^ w
]

ByteArray >> unsignedLongAt: index put: value bigEndian: aBool
[
	"Store a 32bit unsigned integer quantity starting from the given byte index"

	| b0 b1 b2 b3 |
	b0 := value bitShift: -24.
	b1 := (value bitShift: -16) bitAnd: 255.
	b2 := (value bitShift: -8) bitAnd: 255.
	b3 := value bitAnd: 255.
	aBool
		ifTrue: [ self at: index put: b0.
			self at: index + 1 put: b1.
			self at: index + 2 put: b2.
			self at: index + 3 put: b3 ]
		ifFalse: [ self at: index put: b3.
			self at: index + 1 put: b2.
			self at: index + 2 put: b1.
			self at: index + 3 put: b0 ].
	^ value
]

ByteArray >> unsignedShortAt: index bigEndian: aBool
[
	"Return a 16 bit unsigned integer quantity starting from the given byte index"

	^ aBool
		ifTrue: [ ((self at: index) bitShift: 8) + (self at: index + 1) ]
		ifFalse: [ ((self at: index + 1) bitShift: 8) + (self at: index) ]
]

ByteArray >> unsignedShortAt: index put: value bigEndian: aBool
[
	"Store a 16 bit unsigned integer quantity starting from the given byte index"

	aBool
		ifTrue: [ self at: index put: (value bitShift: -8).
			self at: index + 1 put: (value bitAnd: 255) ]
		ifFalse: [ self at: index + 1 put: (value bitShift: -8).
			self at: index put: (value bitAnd: 255) ].
	^ value
]

ByteArray class >> hashBytes: aByteArray startingWith: speciesHash
[
	"Answer the hash of a byte-indexed collection,
	using speciesHash as the initial value.
	See SmallInteger>>hashMultiply.

	The primitive should be renamed at a
	suitable point in the future"

	<primitive: 'primitiveStringHash' module: 'MiscPrimitivePlugin'>
	<var: #aHash declareC: 'int speciesHash'>
	<var: #aByteArray declareC: 'unsigned char *aByteArray'>
	| byteArraySize hash low |
	byteArraySize := aByteArray size.
	hash := speciesHash bitAnd: 16rFFFFFFF.
	1 to: byteArraySize do: [ :pos | hash := hash + (aByteArray basicAt: pos).	"Begin hashMultiply"
		low := hash bitAnd: 16383.
		hash := 16r260D * low + ((16r260D * (hash bitShift: -14) + (16r0065 * low) bitAnd: 16383) * 16384) bitAnd: 16r0FFFFFFF ].
	^ hash
]

ByteArray class >> readHexFrom: aString
[
	"Create a byte array from a hexadecimal representation"

	^ (self new: aString size // 2) readHexFrom: aString readStream
]

 primitive should be renamed at a
	suitable point in the future"

	<primitive: 'primitiveStringHash' module: 'MiscPrimitivePlugin'>
	<var: #aHash declareC: 'int speciesHash'>
	<var: #aByteArray declareC: 'unsigned char *aByteArray'>
	| byteArraySize hash low |
	byteArraySize := aByteArray size.
	hash := speciesHash bitAnd: 16rFFFFFFF.
	1 to: byteArraySize do: [ :pos | hash := hash + (aByteArray basicAt: pos).	"Begin hashMultiply"
		low := hash bitAnd: 16383.
		hash := 16r260D * low + ((16r260D * (hash bitShift: -14) + (16r0065 * low) bitAnd: 16383) * 16384) bitAnd: 16r0FFFFFFF ].
	^ hash
]

ByteArray class >> readHexFrom: aString
[readHexFrom: aString
	"Create a byte array from a hexadecimal representation"

	^ (self new: aString size // 2) readHexFrom: aString readStream
]

