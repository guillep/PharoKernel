Class
	name: #BlockClosure;
	superclass: #ClassObject;
	instanceSpecification: #(#variable #pointers #words );
	instanceVariables: #(#outerContext #startpc #numArgs );
	classVariables: #();
	package: #'Kernel-Methods'.

Class BlockClosure >> abstractBytecodeMessagesDo: aBlock
[
	"Evaluate aBlock with the sequence of abstract bytecodes in the receiver."
self method abstractBytecodeMessagesFrom: startpc to: self endPC do: aBlock	"| msgs |	 msgs := OrderedCollection new.	 (SortedCollection sortBlock: [:a :b| a compare: b caseSensitive: false]) sortBlock		abstractBytecodeMessagesDo: [:msg| msgs add: msg selector].	 msgs"
]

Class BlockClosure >> argumentCount
[
	"Answer the number of arguments that must be used to evaluate this block"
^ numArgs
]

Class BlockClosure >> asContext
[
	"Create a MethodContext that is ready to execute self.  Assumes self takes no args (if it does the args will be nil)"
^ self asContextWithSender: nil
]

Class BlockClosure >> asContextWithSender: aContext
[
	"Inner private support method for evaluation.  Do not use unless you know what you're doing."
^ (MethodContext newForMethod: outerContext method)	setSender: aContext		receiver: outerContext receiver		method: outerContext method		closure: self		startpc: startpc;	privRefresh
]

Class BlockClosure >> asMinimalRepresentation
[
	"Answer the receiver."
^ self
]

Class BlockClosure >> assert
[
self value	ifFalse: [ AssertionFailure signal: 'Assertion failed' ]
]

Class BlockClosure >> assertWithDescription: aStringOrABlock
[
self value	ifFalse: [ 		| value |		value := aStringOrABlock value.		AssertionFailure signal: value ]
]

Class BlockClosure >> becomeCached
[
self	becomeForward:		((CachedBlockClosure new: self size)			outerContext: outerContext			startpc: startpc			numArgs: numArgs			cachedValue: self value			copiedValues: self)
]

Class BlockClosure >> becomeUncached
[
	"The receiver is already uncached."
^ self
]

Class BlockClosure >> bench
[
	"Return how many times the receiver can get executed in 5 seconds.  Answer a meaningful description."
	"[3.14 printString] bench"
| startTime endTime count roundTo3Digits |roundTo3Digits := [ :num | | rounded lowDigit |rounded := (num * 1000) rounded.	"round to 1/1000"lowDigit := (rounded numberOfDigitsInBase: 10) - 3.	"keep only first 3 digits"rounded := rounded roundTo: (10 raisedTo: lowDigit).(lowDigit >= 3 or: [ rounded \\ 1000 = 0 ])	ifTrue: [ (rounded // 1000) asStringWithCommas ]	ifFalse: [ (rounded / 1000.0) printString ]	"display fractional part only when needed" ].count := 0.endTime := Time millisecondClockValue + 5000.startTime := Time millisecondClockValue.[ Time millisecondClockValue > endTime ]	whileFalse: [ 		self value.		count := count + 1 ].endTime := Time millisecondClockValue.^ count = 1	ifTrue: [ (roundTo3Digits value: (endTime - startTime) / 1000) , ' seconds.' ]	ifFalse: [ (roundTo3Digits value: count * 1000 / (endTime - startTime)) , ' per second.' ]
]

Class BlockClosure >> blockCreationBytecodeMessage
[
	"Answer the abstract bytecode message that created the receiver."
| blockCreationBytecodeSize |^ self method abstractBytecodeMessageAt: startpc - (blockCreationBytecodeSize := 4)	"(SortedCollection sortBlock: [:a :b| a compare: b caseSensitive: false]) sortBlock blockCreationBytecodeMessage"
]

Class BlockClosure >> copiedValueAt: i
[
	<primitive: 60>
^ self basicAt: i
]

Class BlockClosure >> copyForSaving
[
	"Answer a copy of the receiver suitable for serialization.	 Notionally, if the receiver's outerContext has been returned from then nothing	 needs to be done and we can use the receiver. But there's a race condition	 determining if the receiver has been returned from (it could be executing in a	 different process). So answer a copy anyway."
^ self shallowCopy postCopy
]

Class BlockClosure >> cull: anArg
[
^ numArgs = 0	ifTrue: [ self value ]	ifFalse: [ self value: anArg ]
]

Class BlockClosure >> cull: firstArg cull: secondArg
[
^ numArgs < 2	ifTrue: [ self cull: firstArg ]	ifFalse: [ self value: firstArg value: secondArg ]
]

Class BlockClosure >> cull: firstArg cull: secondArg cull: thirdArg
[
^ numArgs < 3	ifTrue: [ self cull: firstArg cull: secondArg ]	ifFalse: [ self value: firstArg value: secondArg value: thirdArg ]
]

Class BlockClosure >> cull: firstArg cull: secondArg cull: thirdArg cull: fourthArg
[
	"Execute the receiver with four or less arguments. Check cull:cull: for examples"
^ numArgs < 4	ifTrue: [ self cull: firstArg cull: secondArg cull: thirdArg ]	ifFalse: [ 		self			value: firstArg			value: secondArg			value: thirdArg			value: fourthArg ]
]

Class BlockClosure >> doWhileFalse: conditionBlock
[
	"Evaluate the receiver once, then again as long the value of conditionBlock is false."
| result |[ result := self value.conditionBlock value ] whileFalse.^ result
]

Class BlockClosure >> doWhileTrue: conditionBlock
[
	"Evaluate the receiver once, then again as long the value of conditionBlock is true."
| result |[ result := self value.conditionBlock value ] whileTrue.^ result
]

Class BlockClosure >> durationToRun
[
	"Answer the duration taken to execute this block."
^ Duration milliSeconds: self timeToRun
]

Class BlockClosure >> endPC
[
^ self blockCreationBytecodeMessage arguments last + startpc - 1
]

Class BlockClosure >> ensure: aBlock
[
	"Evaluate a termination block after evaluating the receiver, regardless of	 whether the receiver's evaluation completes.  N.B.  This method is *not*	 implemented as a primitive.  Primitive 198 always fails.  The VM uses prim	 198 in a context's method as the mark for an ensure:/ifCurtailed: activation."
	<primitive: 198>
| complete returnValue |returnValue := self valueNoContextSwitch.complete	ifNil: [ 		complete := true.		aBlock value ].^ returnValue
]

Class BlockClosure >> fork
[
	"Create and schedule a Process running the code in the receiver."
^ self newProcess resume
]

Class BlockClosure >> forkAndWait
[
	"Suspend current process and execute self in new process, when it completes resume current process"
| semaphore |semaphore := Semaphore new.[ self	ensure: [ semaphore signal ] ] fork.semaphore wait
]

Class BlockClosure >> forkAt: priority
[
	"Create and schedule a Process running the code in the receiver at the given priority. Answer the newly created process."
^ self newProcess	priority: priority;	resume
]

Class BlockClosure >> forkAt: priority named: name
[
	"Create and schedule a Process running the code in the receiver at the	given priority and having the given name. Answer the newly created 	process."
| forkedProcess |forkedProcess := self newProcess.forkedProcess priority: priority.forkedProcess name: name.^ forkedProcess resume
]

Class BlockClosure >> forkNamed: aString
[
	"Create and schedule a Process running the code in the receiver and	having the given name."
^ self newProcess	name: aString;	resume
]

Class BlockClosure >> fullPrintOn: aStream
[
aStream	print: self;	cr.(self decompile ifNil: [ '--source missing--' ]) printOn: aStream indent: 0
]

Class BlockClosure >> hasMethodReturn
[
	"Answer whether the receiver has a method-return ('^') in its code."
| scanner endpc |scanner := InstructionStream new method: outerContext method pc: startpc.endpc := self endPC.scanner scanFor: [ :byte | (byte between: 120 and: 124) or: [ scanner pc > endpc ] ].^ scanner pc <= endpc
]

Class BlockClosure >> home
[
^ outerContext home
]

Class BlockClosure >> ifCurtailed: aBlock
[
	"Evaluate the receiver with an abnormal termination action.	 Evaluate aBlock only if execution is unwound during execution	 of the receiver.  If execution of the receiver finishes normally do	 not evaluate aBlock.  N.B.  This method is *not* implemented as a	 primitive.  Primitive 198 always fails.  The VM uses prim 198 in a	 context's method as the mark for an ensure:/ifCurtailed: activation."
	<primitive: 198>
| complete result |result := self valueNoContextSwitch.complete := true.^ result
]

Class BlockClosure >> ifError: errorHandlerBlock
[
	"Evaluate the block represented by the receiver, and normally return it's value.  If an error occurs, the errorHandlerBlock is evaluated, and it's value is instead returned.  The errorHandlerBlock must accept zero, one, or two parameters (the error message and the receiver)."
	"Examples:		[1 whatsUpDoc] ifError: [:err :rcvr | 'huh?'].		[1 / 0] ifError: [:err :rcvr |			'ZeroDivide' = err				ifTrue: [Float infinity]				ifFalse: [self error: err]]"
^ self	on: Error	do: [ :ex | errorHandlerBlock cull: ex description cull: ex receiver ]
]

Class BlockClosure >> isBlock
[
^ true
]

Class BlockClosure >> isClean
[
	"Answer if the receiver does not close-over any variables other than globals, and does	 not ^-return (does not close over the home context).  Clean blocks are amenable to	 being created at compile-time."
self numCopiedValues > 0	ifTrue: [ ^ false ].self	abstractBytecodeMessagesDo: [ :msg | 		(#(#pushReceiver #pushReceiverVariable: #popIntoReceiverVariable: #storeIntoReceiverVariable: #methodReturnConstant: #methodReturnReceiver #methodReturnTop)			includes: msg selector)			ifTrue: [ ^ false ] ].^ true	"clean:"	"[] isClean"	"[:a :b| a < b] isClean"	"unclean"	"[^nil] isClean"	"[self class] isClean"	"| v | v := 0.		 [v class] isClean"
]

Class BlockClosure >> isClosure
[
^ true
]

Class BlockClosure >> isDead
[
	"Has self finished"
^ false
]

Class BlockClosure >> isValid
[
	"Answer the receiver."
^ true
]

Class BlockClosure >> method
[
^ outerContext method
]

Class BlockClosure >> newProcess
[
	"Answer a Process running the code in the receiver. The process is not 	scheduled."
	"Simulation guard"
	<primitive: 19>
^ Process	forContext:		[ 		self value.		Processor terminateActive ] asContext	priority: Processor activePriority
]

Class BlockClosure >> newProcessWith: anArray
[
	"Answer a Process running the code in the receiver. The receiver's block 	arguments are bound to the contents of the argument, anArray. The 	process is not scheduled."
	"Simulation guard"
	<primitive: 19>
^ Process	forContext:		[ 		self valueWithArguments: anArray.		Processor terminateActive ] asContext	priority: Processor activePriority
]

Class BlockClosure >> numArgs
[
	"Answer the number of arguments that must be used to evaluate this block"
^ numArgs
]

Class BlockClosure >> numArgsError: numArgsForInvocation
[
| printNArgs |printNArgs := [ :n | n printString , ' argument'	,		(n = 1			ifTrue: [ '' ]			ifFalse: [ 's' ]) ].self	error:		'This block accepts ' , (printNArgs value: numArgs) , ', but was called with '			, (printNArgs value: numArgsForInvocation) , '.'
]

Class BlockClosure >> numCopiedValues
[
	"Answer the number of copied values of the receiver.  Since these are	 stored in the receiver's indexable fields this is the receiver's basic size.	 Primitive. Answer the number of indexable variables in the receiver. 	 This value is the same as the largest legal subscript."
	<primitive: 62>
^ self basicSize
]

Class BlockClosure >> numTemps
[
	"Answer the number of temporaries for the receiver; this includes	 the number of arguments and the number of copied values."
| blockCreationBytecodeSize |^ self numCopiedValues + self numArgs	+ (BlockLocalTempCounter tempCountForBlockAt: startpc - (blockCreationBytecodeSize := 4) in: self method)
]

Class BlockClosure >> on: exception do: handlerAction
[
	"Evaluate the receiver in the scope of an exception handler."
	<primitive: 199>
| handlerActive |handlerActive := true.	"just a marker, fail and execute the following"^ self value
]

Class BlockClosure >> on: exception fork: handlerAction
[
	"Activate the receiver. In case of exception, fork a new process, which will handle an error.	An original process will continue running as if receiver evaluation finished and answered nil,	i.e., an expression like:		[ self error: 'some error'] on: Error fork: [:ex |  123 ] 		will always answer nil for original process, not 123.	The context stack , starting from context which sent this message to receiver and	up to the top of the stack will be transferred to forked process, with handlerAction on top.	(so when the forked process will be resuming, it will enter the handlerAction)	 "
^ self	on: exception	do: [ :ex | 		| copy onDoCtx process handler bottom thisCtx |		onDoCtx := thisContext.		thisCtx := onDoCtx home.	"find the context on stack for which this method's is sender"		[ onDoCtx sender == thisCtx ]			whileFalse: [ 				onDoCtx := onDoCtx sender.				onDoCtx					ifNil: [ 						"Can't find our home context. seems like we're already forked				and handling another exception in new thread. In this case, just pass it through handler."						^ handlerAction cull: ex ] ].		bottom := [ Processor terminateActive ] asContext.		onDoCtx privSender: bottom.		handler := [ handlerAction cull: ex ] asContext.		handler privSender: thisContext sender.		(Process forContext: handler priority: Processor activePriority) resume.	"cut the stack of current process"		thisContext privSender: thisCtx.		nil ]
]

Class BlockClosure >> onDNU: selector do: handleBlock
[
	"Catch MessageNotUnderstood exceptions but only those of the given selector (DNU stands for doesNotUnderstand:)"
^ self	on: MessageNotUnderstood	do: [ :exception | 		exception message selector = selector			ifTrue: [ handleBlock cull: exception ]			ifFalse: [ exception pass ] ]
]

Class BlockClosure >> once
[
	"Answer and remember the receiver value, answering exactly the same object in any further sends	 of once or value until the receiver become uncached.  This allows one to intern values with the idiom		myResourceMethod			^[expression] once.	 The expression will be evaluated once and its result returned for any subsequent evaluations.	 Originally by Travis Griggs, from whom we copy this idea with thanks."
numArgs ~= 0	ifTrue: [ self error: 'once should only be used with niladic blocks' ].self becomeCached.^ self once
]

Class BlockClosure >> outerContext
[
^ outerContext
]

Class BlockClosure >> outerContext: aContext startpc: aStartpc numArgs: argCount copiedValues: anArrayOrNil
[
outerContext := aContext.startpc := aStartpc.numArgs := argCount.1 to: self numCopiedValues do: [ :i | self at: i put: (anArrayOrNil at: i) ]
]

Class BlockClosure >> receiver
[
^ outerContext receiver
]

Class BlockClosure >> reentrant
[
	"Answer a version of the recever that can be reentered.	 Closures are reentrant (unlike BlockContect) so simply answer self."
^ self
]

Class BlockClosure >> repeat
[
	"Evaluate the receiver repeatedly, ending only if the block explicitly returns."
[ self value.true ] whileTrue
]

Class BlockClosure >> repeatWithGCIf: testBlock
[
| ans |"run the receiver, and if testBlock returns true, garbage collect and run the receiver again"ans := self value.(testBlock value: ans)	ifTrue: [ 		Smalltalk garbageCollect.		ans := self value ].^ ans
]

Class BlockClosure >> sender
[
	"Answer the context that sent the message that created the receiver."
^ outerContext sender
]

Class BlockClosure >> simulateValueWithArguments: anArray caller: aContext
[
| newContext sz |(anArray class ~~ Array or: [ numArgs ~= anArray size ])	ifTrue: [ ^ ContextPart primitiveFailToken ].newContext := (MethodContext newForMethod: outerContext method)	setSender: aContext	receiver: outerContext receiver	method: outerContext method	closure: self	startpc: startpc.sz := self basicSize.newContext stackp: sz + numArgs.1 to: numArgs do: [ :i | newContext at: i put: (anArray at: i) ].1 to: sz do: [ :i | newContext at: i + numArgs put: (self at: i) ].^ newContext
]

Class BlockClosure >> split: aSequenceableCollection
[
	"Example:		[ :char| char isSeparator ] split: 'aa bb cc dd'"
| result position |result := OrderedCollection new: (aSequenceableCollection size / 2) asInteger.position := 1.aSequenceableCollection	withIndexDo: [ :element :idx | 		(self value: element)			ifTrue: [ 				result add: (aSequenceableCollection copyFrom: position to: idx - 1).				position := idx + 1 ] ].result add: (aSequenceableCollection copyFrom: position to: aSequenceableCollection size).^ result
]

Class BlockClosure >> startpc
[
^ startpc
]

Class BlockClosure >> timeToRun
[
	"Answer the number of milliseconds taken to execute this block."
^ Time millisecondsToRun: self
]

Class BlockClosure >> value
[
	"Activate the receiver, creating a closure activation (MethodContext)	 whose closure is the receiver and whose caller is the sender of this message.	 Supply the copied values to the activation as its arguments and copied temps.	 Primitive. Optional (but you're going to want this for performance)."
	<primitive: 201>
| newContext ncv |numArgs ~= 0	ifTrue: [ self numArgsError: 0 ].^ self primitiveFailed
]

Class BlockClosure >> value: anArg
[
	"Activate the receiver, creating a closure activation (MethodContext)	 whose closure is the receiver and whose caller is the sender of this message.	 Supply the argument and copied values to the activation as its arguments and copied temps.	 Primitive. Optional (but you're going to want this for performance)."
	<primitive: 202>
| newContext ncv |numArgs ~= 1	ifTrue: [ self numArgsError: 1 ].self primitiveFailed
]

Class BlockClosure >> value: firstArg value: secondArg
[
	"Activate the receiver, creating a closure activation (MethodContext)	 whose closure is the receiver and whose caller is the sender of this message.	 Supply the arguments and copied values to the activation as its arguments and copied temps.	 Primitive. Optional (but you're going to want this for performance)."
	<primitive: 203>
| newContext ncv |numArgs ~= 2	ifTrue: [ self numArgsError: 2 ].^ self primitiveFailed
]

Class BlockClosure >> value: firstArg value: secondArg value: thirdArg
[
	"Activate the receiver, creating a closure activation (MethodContext)	 whose closure is the receiver and whose caller is the sender of this message.	 Supply the arguments and copied values to the activation as its arguments and copied temps.	 Primitive. Optional (but you're going to want this for performance)."
	<primitive: 204>
| newContext ncv |numArgs ~= 3	ifTrue: [ self numArgsError: 3 ].^ self primitiveFailed
]

Class BlockClosure >> value: firstArg value: secondArg value: thirdArg value: fourthArg
[
	"Activate the receiver, creating a closure activation (MethodContext)	 whose closure is the receiver and whose caller is the sender of this message.	 Supply the arguments and copied values to the activation as its arguments and copied temps.	 Primitive. Optional (but you're going to want this for performance)."
	<primitive: 205>
| newContext ncv |numArgs ~= 4	ifTrue: [ self numArgsError: 4 ].^ self primitiveFailed
]

Class BlockClosure >> valueAt: blockPriority
[
	"Evaluate the receiver (block), with another priority as the actual one 	and restore it afterwards. The caller should be careful with using 	higher priorities."
| activeProcess result outsidePriority |activeProcess := Processor activeProcess.outsidePriority := activeProcess priority.activeProcess priority: blockPriority.result := self	ensure: [ activeProcess priority: outsidePriority ].	"Yield after restoring lower priority to give the preempted processes a  	chance to run."blockPriority > outsidePriority	ifTrue: [ Processor yield ].^ result
]

Class BlockClosure >> valueNoContextSwitch
[
	"An exact copy of BlockClosure>>value except that this version will not preempt	 the current process on block activation if a higher-priority process is runnable.	 Primitive. Essential."
	<primitive: 221>
numArgs ~= 0	ifTrue: [ self numArgsError: 0 ].self primitiveFailed
]

Class BlockClosure >> valueNoContextSwitch: anArg
[
	"An exact copy of BlockClosure>>value: except that this version will not preempt	 the current process on block activation if a higher-priority process is runnable.	 Primitive. Essential."
	<primitive: 222>
numArgs ~= 1	ifTrue: [ self numArgsError: 1 ].self primitiveFailed
]

Class BlockClosure >> valueSupplyingAnswer: anObject
[
^ (anObject isCollection and: [ anObject isString not ])	ifTrue: [ self valueSupplyingAnswers: {anObject} ]	ifFalse: [ 		self			valueSupplyingAnswers:				{{'*'.				anObject}} ]
]

Class BlockClosure >> valueSupplyingAnswers: aListOfPairs
[
	"evaluate the block using a list of questions / answers that might be called upon to	automatically respond to Object>>confirm: or FillInTheBlank requests"
^ [ self value ]	on: ProvideAnswerNotification	do: [ :notify | 		| answer caption |		caption := notify messageText withSeparatorsCompacted.	"to remove new lines"		answer := aListOfPairs			detect: [ :each | 				caption = each first					or: [ 						(caption includesSubstring: each first caseSensitive: false)							or: [ 								(each first match: caption)									or: [ 										(String includesSelector: #matchesRegex:)											and: [ 												[ caption matchesRegex: each first ]													on: Error													do: [ :ignored | false ] ] ] ] ] ]			ifNone: [ nil ].		answer			ifNotNil: [ notify resume: answer second ]			ifNil: [ 				| outerAnswer |				outerAnswer := ProvideAnswerNotification signal: notify messageText.				outerAnswer ifNil: [ notify resume ] ifNotNil: [ notify resume: outerAnswer ] ] ]
]

Class BlockClosure >> valueSuppressingAllMessages
[
^ self valueSuppressingMessages: #('*')
]

Class BlockClosure >> valueSuppressingMessages: aListOfStrings
[
^ self valueSuppressingMessages: aListOfStrings supplyingAnswers: #()
]

Class BlockClosure >> valueSuppressingMessages: aListOfStrings supplyingAnswers: aListOfPairs
[
^ self	valueSupplyingAnswers:		aListOfPairs			,				(aListOfStrings					collect: [ :each | 						{each.						true} ])
]

Class BlockClosure >> valueUninterruptably
[
	"Prevent remote returns from escaping the sender.  Even attempts to terminate (unwind) this process will be halted and the process will resume here.  A terminate message is needed for every one of these in the sender chain to get the entire process unwound."
^ self	ifCurtailed: [ ^ self ]
]

Class BlockClosure >> valueUnpreemptively
[
	"Evaluate the receiver (block), without the possibility of preemption by higher priority processes. Use this facility VERY sparingly!"
	"Think about using Block>>valueUninterruptably first, and think about using Semaphore>>critical: before that, and think about redesigning your application even before that! 	After you've done all that thinking, go right ahead and use it..."
| activeProcess oldPriority result semaphore |activeProcess := Processor activeProcess.oldPriority := activeProcess priority.activeProcess priority: Processor highestPriority.result := self	ensure: [ activeProcess priority: oldPriority ].	"Yield after restoring priority to give the preempted processes a chance to run.	We inline the code of Processor yield here, but without the primitive.	The reason: the yield primitive does not take into account a change of priority as done above"semaphore := Semaphore new.[ semaphore signal ] fork.semaphore wait.^ result
]

Class BlockClosure >> valueWithArguments: anArray
[
	"Activate the receiver, creating a closure activation (MethodContext)	 whose closure is the receiver and whose caller is the sender of this message.	 Supply the arguments in an anArray and copied values to the activation as its arguments and copied temps.	 Primitive. Optional (but you're going to want this for performance)."
	<primitive: 206>
| newContext ncv |numArgs ~= anArray size	ifTrue: [ self numArgsError: anArray size ].newContext := self asContextWithSender: thisContext sender.ncv := self numCopiedValues.newContext stackp: ncv + numArgs.1 to: numArgs do: [ :i | newContext at: i put: (anArray at: i) ].1 to: ncv do: [ :i | newContext at: i + numArgs put: (self at: i) ].thisContext privSender: newContext
]

Class BlockClosure >> valueWithEnoughArguments: anArray
[
	"call me with enough arguments from anArray"
| args |anArray size == self numArgs	ifTrue: [ ^ self valueWithArguments: anArray ].args := Array new: self numArgs.args	replaceFrom: 1	to: (anArray size min: args size)	with: anArray	startingAt: 1.^ self valueWithArguments: args
]

Class BlockClosure >> valueWithExit
[
self value: [ ^ nil ]
]

Class BlockClosure >> valueWithPossibleArgs: anArray
[
^ numArgs = 0	ifTrue: [ self value ]	ifFalse: [ 		self			valueWithArguments:				(numArgs = anArray size					ifTrue: [ anArray ]					ifFalse: [ 						numArgs > anArray size							ifTrue: [ anArray , (Array new: numArgs - anArray size) ]							ifFalse: [ anArray copyFrom: 1 to: numArgs ] ]) ]
]

Class BlockClosure >> valueWithPossibleArgument: anArg
[
	"Evaluate the block represented by the receiver. 	 If the block requires one argument, use anArg, if it requires more than one,	 fill up the rest with nils."
| a |numArgs = 0	ifTrue: [ ^ self value ].numArgs = 1	ifTrue: [ ^ self value: anArg ].a := Array new: numArgs.a at: 1 put: anArg.^ self valueWithArguments: a
]

Class BlockClosure >> valueWithin: aDuration onTimeout: timeoutBlock
[
	"Evaluate the receiver.	If the evaluation does not complete in less than aDuration evaluate the timeoutBlock instead"
| theProcess delay watchdog |aDuration <= Duration zero	ifTrue: [ ^ timeoutBlock value ].	"the block will be executed in the current process"theProcess := Processor activeProcess.delay := aDuration asDelay.	"make a watchdog process"watchdog := [ delay wait.	"wait for timeout or completion"theProcess ifNotNil: [ theProcess signalException: TimedOut ] ] newProcess.	"Watchdog needs to run at high priority to do its job (but not at timing priority)"watchdog priority: Processor timingPriority - 1.	"catch the timeout signal"^ [ watchdog resume.	"start up the watchdog"self	ensure: [ 		"evaluate the receiver"		theProcess := nil.	"it has completed, so ..."		delay delaySemaphore signal	"arrange for the watchdog to exit" ] ]	on: TimedOut	do: [ :e | timeoutBlock value ]
]

Class BlockClosure >> whileFalse
[
	"Ordinarily compiled in-line, and therefore not overridable.	This is in case the message is sent to other than a literal block.	Evaluate the receiver, as long as its value is false."
^ [ self value ] whileFalse: [  ]
]

Class BlockClosure >> whileFalse: aBlock
[
	"Ordinarily compiled in-line, and therefore not overridable.	This is in case the message is sent to other than a literal block.	Evaluate the argument, aBlock, as long as the value of the receiver is false."
^ [ self value ] whileFalse: [ aBlock value ]
]

Class BlockClosure >> whileNil: aBlock
[
	"Unlike #whileTrue/False: this is not compiled inline."
^ [ self value isNil ] whileTrue: [ aBlock value ]
]

Class BlockClosure >> whileNotNil: aBlock
[
	"Unlike #whileTrue/False: this is not compiled inline."
^ [ self value notNil ] whileTrue: [ aBlock value ]
]

Class BlockClosure >> whileTrue
[
	"Ordinarily compiled in-line, and therefore not overridable.	This is in case the message is sent to other than a literal block.	Evaluate the receiver, as long as its value is true."
^ [ self value ] whileTrue: [  ]
]

Class BlockClosure >> whileTrue: aBlock
[
	"Ordinarily compiled in-line, and therefore not overridable.	This is in case the message is sent to other than a literal block.	Evaluate the argument, aBlock, as long as the value of the receiver is true."
^ [ self value ] whileTrue: [ aBlock value ]
]

Metaclass
	name: #BlockClosure;
	instanceVariables: #().

Metaclass BlockClosure >> outerContext: aContext startpc: aStartpc numArgs: argCount copiedValues: anArrayOrNil
[
^ (self new: anArrayOrNil basicSize)	outerContext: aContext	startpc: aStartpc	numArgs: argCount	copiedValues: anArrayOrNil
]

