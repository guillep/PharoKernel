AdditionalMethodState
	instanceSpecification: #(#variable #pointers #words );
	instanceVariables: #(#method #selector );
	package: #'Kernel-Methods'.

AdditionalMethodState >> analogousCodeTo: aMethodProperties
[
	| bs |
	(bs := self basicSize) ~= aMethodProperties basicSize
		ifTrue: [ ^ false ].
	1 to: bs do: [ :i | ((self basicAt: i) analogousCodeTo: (aMethodProperties basicAt: i))
			ifFalse: [ ^ false ] ].
	^ true
]

AdditionalMethodState >> at: aKey
[
	"Answer the property value or pragma associated with aKey."

	^ self at: aKey ifAbsent: [ self error: 'not found' ]
]

AdditionalMethodState >> at: aKey ifAbsent: aBlock
[
	"Answer the property value or pragma associated with aKey or,
	 if aKey isn't found, answer the result of evaluating aBlock."

	1 to: self basicSize do: [ :i | | propertyOrPragma "<Association|Pragma>" |
		(propertyOrPragma := self basicAt: i) key == aKey
			ifTrue: [ ^ propertyOrPragma isVariableBinding
					ifTrue: [ propertyOrPragma value ]
					ifFalse: [ propertyOrPragma ] ] ].
	^ aBlock value
]

AdditionalMethodState >> at: aKey ifAbsentPut: aBlock
[
	"Answer the property value or pragma associated with aKey or,
	 if aKey isn't found, answer the result of evaluating aBlock."

	1 to: self basicSize do: [ :i | | propertyOrPragma "<Association|Pragma>" |
		(propertyOrPragma := self basicAt: i) key == aKey
			ifTrue: [ ^ propertyOrPragma isVariableBinding
					ifTrue: [ propertyOrPragma value ]
					ifFalse: [ propertyOrPragma ] ] ].
	^ method propertyValueAt: aKey put: aBlock value
]

AdditionalMethodState >> at: aKey ifPresent: aBlock
[
	"Lookup the given key in the receiver. If it is present, answer the value of evaluating the given block with the value associated with the key. Otherwise, answer self."

	^ aBlock value: (self at: aKey ifAbsent: [ ^ self ])
]

AdditionalMethodState >> at: aKey put: aValue
[
	"Replace the property value or pragma associated with aKey."

	| keyAlreadyExists |
	keyAlreadyExists := false.
	1 to: self basicSize do: [ :i | | propertyOrPragma "<Association|Pragma>" |
		(propertyOrPragma := self basicAt: i) key == aKey
			ifTrue: [ keyAlreadyExists := true.
				propertyOrPragma isVariableBinding
					ifTrue: [ propertyOrPragma value: aValue ]
					ifFalse: [ self basicAt: i put: aValue ] ] ].
	keyAlreadyExists
		ifFalse: [ method propertyValueAt: aKey put: aValue ].
	^ aValue
]

AdditionalMethodState >> copyWith: aPropertyOrPragma
[
	"<Association|Pragma>"

	"Answer a copy of the receiver which includes aPropertyOrPragma"

	| bs copy |
	(Association == aPropertyOrPragma class or: [ Pragma == aPropertyOrPragma class ])
		ifFalse: [ self error: self class name , ' instances should hold only Associations or Pragmas.' ].	"no need to initialize here; we're copying all inst vars"
	copy := self class basicNew: (bs := self basicSize) + 1.
	1 to: bs do: [ :i | copy basicAt: i put: (self basicAt: i) shallowCopy ].
	copy basicAt: bs + 1 put: aPropertyOrPragma.
	1 to: self class instSize do: [ :i | copy instVarAt: i put: (self instVarAt: i) ].
	^ copy
]

AdditionalMethodState >> copyWithout: aPropertyOrPragma
[
	"<Association|Pragma>"

	"Answer a copy of the receiver which no longer includes aPropertyOrPragma"

	| bs copy offset |
	"no need to initialize here; we're copying all inst vars"
	copy := self class
		basicNew: (bs := self basicSize) - ((self includes: aPropertyOrPragma)
						ifTrue: [ 1 ]
						ifFalse: [ 0 ]).
	offset := 0.
	1 to: bs do: [ :i | (self basicAt: i) = aPropertyOrPragma
			ifTrue: [ offset := 1 ]
			ifFalse: [ copy basicAt: i - offset put: (self basicAt: i) shallowCopy ] ].
	1 to: self class instSize do: [ :i | copy instVarAt: i put: (self instVarAt: i) ].
	^ copy
]

AdditionalMethodState >> hasAtLeastTheSamePropertiesAs: aMethodProperties
[
	"Answer if the recever has at least the same properties as the argument.
	 N.B. The receiver may have additional properties and still answer true."

	aMethodProperties
		keysAndValuesDo: [ :k :v | (v isKindOf: Pragma)
				ifFalse: [ (self includes: k -> v)
						ifFalse: [ ^ false ] ]	"ifTrue: [Pragmas have already been checked]" ].
	^ true
]

AdditionalMethodState >> hasLiteralSuchThat: aBlock
[
	"Answer true if litBlock returns true for any literal in this array, even if embedded in further array structure.
	 This method is only intended for private use by CompiledMethod hasLiteralSuchThat:"

	1 to: self basicSize do: [ :i | | propertyOrPragma "<Association|Pragma>" |
		propertyOrPragma := self basicAt: i.
		(propertyOrPragma isVariableBinding
			ifTrue: [ (aBlock value: propertyOrPragma key)
					or: [ (aBlock value: propertyOrPragma value)
							or: [ propertyOrPragma value isArray and: [ propertyOrPragma value hasLiteralSuchThat: aBlock ] ] ] ]
			ifFalse: [ propertyOrPragma hasLiteralSuchThat: aBlock ])
			ifTrue: [ ^ true ] ].
	^ false
]

AdditionalMethodState >> hasLiteralThorough: literal
[
	"Answer true if any literal in these properties is literal,
	 even if embedded in array structure."

	1 to: self basicSize do: [ :i | | propertyOrPragma "<Association|Pragma>" |
		propertyOrPragma := self basicAt: i.
		(propertyOrPragma isVariableBinding
			ifTrue: [ propertyOrPragma key == literal
					or: [ propertyOrPragma value == literal
							or: [ propertyOrPragma value isArray and: [ propertyOrPragma value hasLiteral: literal ] ] ] ]
			ifFalse: [ propertyOrPragma hasLiteral: literal ])
			ifTrue: [ ^ true ] ].
	^ false
]

AdditionalMethodState >> includes: aPropertyOrPragma
[
	"<Association|Pragma>"

	"Test if the property or pragma is present."

	1 to: self basicSize do: [ :i | (self basicAt: i) = aPropertyOrPragma
			ifTrue: [ ^ true ] ].
	^ false
]

AdditionalMethodState >> includesKey: aKey
[
	"Test if the property aKey or pragma with selector aKey is present."

	1 to: self basicSize do: [ :i | (self basicAt: i) key == aKey
			ifTrue: [ ^ true ] ].
	^ false
]

AdditionalMethodState >> includesProperty: aKey
[
	"Test if the property aKey is present."

	1 to: self basicSize do: [ :i | | propertyOrPragma "<Association|Pragma>" |
		propertyOrPragma := self basicAt: i.
		(propertyOrPragma isVariableBinding and: [ propertyOrPragma key == aKey ])
			ifTrue: [ ^ true ] ].
	^ false
]

AdditionalMethodState >> isEmpty
[
	^ self basicSize = 0
]

AdditionalMethodState >> isMethodProperties
[
	^ true
]

AdditionalMethodState >> keysAndValuesDo: aBlock
[
	"Enumerate the receiver with all the keys and values."

	1 to: self basicSize do: [ :i | | propertyOrPragma "<Association|Pragma>" |
		(propertyOrPragma := self basicAt: i) isVariableBinding
			ifTrue: [ aBlock value: propertyOrPragma key value: propertyOrPragma value ]
			ifFalse: [ aBlock value: propertyOrPragma keyword value: propertyOrPragma ] ]
]

AdditionalMethodState >> method
[
	^ method
]

AdditionalMethodState >> method: aMethodNodeOrNil
[
	"For decompilation"

	method := aMethodNodeOrNil
]

AdditionalMethodState >> notEmpty
[
	^ self basicSize > 0
]

AdditionalMethodState >> postCopy
[
	"After copying we must duplicate any associations and pragmas so they don't end up being shared."

	1 to: self basicSize do: [ :i | self basicAt: i put: (self basicAt: i) shallowCopy ]
]

AdditionalMethodState >> pragmas
[
	"Answer the raw messages comprising my pragmas."

	| pragmaStream |
	pragmaStream := WriteStream on: (Array new: self basicSize).
	1 to: self basicSize do: [ :i | | propertyOrPragma "<Association|Message>" |
		(propertyOrPragma := self basicAt: i) isVariableBinding
			ifFalse: [ pragmaStream nextPut: propertyOrPragma ] ].
	^ pragmaStream contents
]

AdditionalMethodState >> printOn: aStream
[
	super printOn: aStream.
	aStream
		space;
		nextPut: $(;
		print: self identityHash;
		nextPut: $)
]

AdditionalMethodState >> properties
[
	| propertyStream |
	propertyStream := WriteStream on: (Array new: self basicSize * 2).
	1 to: self basicSize do: [ :i | | propertyOrPragma "<Association|Pragma>" |
		(propertyOrPragma := self basicAt: i) isVariableBinding
			ifTrue: [ propertyStream
					nextPut: propertyOrPragma key;
					nextPut: propertyOrPragma value ] ].
	^ IdentityDictionary newFromPairs: propertyStream contents
]

AdditionalMethodState >> propertyKeysAndValuesDo: aBlock
[
	"Enumerate the receiver with all the keys and values."

	1 to: self basicSize do: [ :i | | propertyOrPragma "<Association|Pragma>" |
		(propertyOrPragma := self basicAt: i) isVariableBinding
			ifTrue: [ aBlock value: propertyOrPragma key value: propertyOrPragma value ] ]
]

AdditionalMethodState >> propertyValueAt: aKey
[
	"Answer the property value associated with aKey."

	^ self propertyValueAt: aKey ifAbsent: [ self error: 'Property not found' ]
]

AdditionalMethodState >> propertyValueAt: aKey ifAbsent: aBlock
[
	"Answer the property value associated with aKey or, if aKey isn't found, answer the result of evaluating aBlock."

	1 to: self basicSize do: [ :i | | propertyOrPragma "<Association|Pragma>" |
		propertyOrPragma := self basicAt: i.
		(propertyOrPragma isVariableBinding and: [ propertyOrPragma key == aKey ])
			ifTrue: [ ^ propertyOrPragma value ] ].
	^ aBlock value
]

AdditionalMethodState >> refersToLiteral: aLiteral
[
	^ self pragmas anySatisfy: [ :pragma | pragma hasLiteral: aLiteral ]
]

AdditionalMethodState >> removeKey: aKey
[
	"Remove the property with aKey. Answer the property or raise an error if aKey isn't found."

	^ self removeKey: aKey ifAbsent: [ self error: 'Property not found' ]
]

AdditionalMethodState >> removeKey: aKey ifAbsent: aBlock
[
	"Remove the property with aKey. Answer the value or, if aKey isn't found, answer the result of evaluating aBlock."

	1 to: self basicSize do: [ :i | | propertyOrPragma "<Association|Pragma>" |
		propertyOrPragma := self basicAt: i.
		(propertyOrPragma isVariableBinding
			ifTrue: [ propertyOrPragma key ]
			ifFalse: [ propertyOrPragma keyword ]) == aKey
			ifTrue: [ ^ method removeProperty: aKey ] ].
	^ aBlock value
]

AdditionalMethodState >> selector
[
	^ selector
]

AdditionalMethodState >> selector: aSymbol
[
	selector := aSymbol
]

AdditionalMethodState >> setMethod: aMethod
[
	method := aMethod.
	1 to: self basicSize do: [ :i | | propertyOrPragma "<Association|Pragma>" |
		(propertyOrPragma := self basicAt: i) isVariableBinding
			ifFalse: [ propertyOrPragma setMethod: aMethod ] ]
]

AdditionalMethodState class >> forMethod: aMethod selector: aSelector
[
	^ (self new: 0)
		selector: aSelector;
		setMethod: aMethod;
		yourself
]

AdditionalMethodState class >> selector: aSelector with: aPropertyOrPragma
[
	^ (self new: 1)
		selector: aSelector;
		basicAt: 1 put: aPropertyOrPragma;
		yourself
]

