LegacyWeakSubscription
	superclass: #WeakAnnouncementSubscription;
	instanceSpecification: #(#variable #weak #pointers #words );
	package: #'Announcements-Core'.

LegacyWeakSubscription >> makeStrong
[
	| sub |
	sub := self subscriber.
	sub ifNil: [ ^ self error: 'Subscriber is nil, cannot make strong subscription' ].
	self unregister.
	^ self
		becomeForward:
			(AnnouncementSubscription new
				announcer: announcer;
				action: action asMessageSend;
				subscriber: sub;
				announcementClass: announcementClass)
]

LegacyWeakSubscription >> register
[
	self weakRegistry add: self subscriber executor: self
]

LegacyWeakSubscription >> subscriber: anObject
[
	self subscriber ifNotNil: [ self error: 'subscriber already set' ].
	self basicAt: 1 put: anObject.
	self register
]

LegacyWeakSubscription >> unregister
[
	self subscriber ifNotNil: [ :sub | self weakRegistry remove: sub ]
]

LegacyWeakSubscription >> weakRegistry
[
	^ WeakRegistry default
]

on >> weakRegistry
[weakRegistry
	^ WeakRegistry default
]

