LegacyWeakSubscription
	superclass: #WeakAnnouncementSubscription;
	instanceSpecification: #(#variable #weak #pointers #words );
	package: #'Announcements-Core'.

LegacyWeakSubscription >> makeStrong
makeStrong
	| sub |
	sub := self subscriber.
	sub ifNil: [ ^ self error: 'Subscriber is nil, cannot make strong subscription' ].
	self unregister.
	^ self
		becomeForward:
			(AnnouncementSubscription new
				announcer: announcer;
				action: action asMessageSend;
				subscriber: sub;
				announcementClass: announcementClass)

LegacyWeakSubscription >> register
register
	self weakRegistry add: self subscriber executor: self

LegacyWeakSubscription >> subscriber: anObject
subscriber: anObject
	self subscriber ifNotNil: [ self error: 'subscriber already set' ].
	self basicAt: 1 put: anObject.
	self register

LegacyWeakSubscription >> unregister
unregister
	self subscriber ifNotNil: [ :sub | self weakRegistry remove: sub ]

LegacyWeakSubscription >> weakRegistry
weakRegistry
	^ WeakRegistry default

