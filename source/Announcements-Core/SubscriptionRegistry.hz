SubscriptionRegistry
	instanceVariables: #(#subscriptions #monitor );
	package: #'Announcements-Core'.

SubscriptionRegistry >> add: subscription
[
	^ self protected: [ subscriptions add: subscription ]
]

SubscriptionRegistry >> deliver: anAnnouncement
[
	| interestedSubscriptions |
	"using a copy, so subscribers can unsubscribe from announcer "
	subscriptions isEmpty
		ifTrue: [ ^ self ].
	self protected: [ interestedSubscriptions := self subscriptionsHandling: anAnnouncement ].
	self deliver: anAnnouncement to: interestedSubscriptions
]

SubscriptionRegistry >> deliver: anAnnouncement to: subs
[
	^ self deliver: anAnnouncement to: subs startingAt: 1
]

SubscriptionRegistry >> deliver: anAnnouncement to: subs startingAt: startIndex
[
	startIndex to: subs size do: [ :index | | subscription |
		subscription := subs at: index.
		[ subscription deliver: anAnnouncement ]
			ifCurtailed: [ self deliver: anAnnouncement to: subs startingAt: index + 1 ]	"Ensure delivery to remaining announcements" ]
]

SubscriptionRegistry >> initialize
[
	monitor := Semaphore forMutualExclusion.
	self reset
]

SubscriptionRegistry >> numberOfSubscriptions
[
	^ subscriptions size
]

SubscriptionRegistry >> protected: aBlock
[
	^ monitor critical: [ aBlock value ]
]

SubscriptionRegistry >> remove: subscription
[
	^ self protected: [ subscriptions remove: subscription ifAbsent: nil ]
]

SubscriptionRegistry >> removeSubscriber: subscriber
[
	^ self protected: [ subscriptions removeAllSuchThat: [ :subscription | subscription subscriber == subscriber ] ]
]

SubscriptionRegistry >> replace: subscription with: newOne
[
	" Note that it will signal an error if subscription is not there "

	self protected: [ subscriptions remove: subscription.
			subscriptions add: newOne ].
	^ newOne
]

SubscriptionRegistry >> reset
[
	"subscriber -> subscriptions"

	subscriptions := IdentitySet new
]

SubscriptionRegistry >> subscriptionsHandling: anAnnouncement
[
	^ Array
		streamContents: [ :s | subscriptions do: [ :each | (each handlesAnnouncement: anAnnouncement)
						ifTrue: [ s nextPut: each ] ] ]
]

SubscriptionRegistry >> subscriptionsOf: aSubscriber do: aBlock
[
	| copy |
	self protected: [ copy := subscriptions copy ].
	copy do: [ :subscription | subscription subscriber == aSubscriber
				ifTrue: [ aBlock value: subscription ] ]
]

: anAnnouncement)
						ifTrue: [ s nextPut: each ] ] ]
]

SubscriptionRegistry >> subscriptionsOf: aSubscriber do: aBlock
[subscriptionsOf: aSubscriber do: aBlock
	| copy |
	self protected: [ copy := subscriptions copy ].
	copy do: [ :subscription | subscription subscriber == aSubscriber
				ifTrue: [ aBlock value: subscription ] ]
]

