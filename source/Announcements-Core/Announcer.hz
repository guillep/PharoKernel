Announcer
	instanceVariables: #(#registry );
	package: #'Announcements-Core'.

Announcer >> announce: anAnnouncement
announce: anAnnouncement
	| announcement |
	announcement := anAnnouncement asAnnouncement.
	registry ifNotNil: [ registry deliver: announcement ].
	^ announcement

Announcer >> basicSubscribe: subscription
basicSubscribe: subscription
	^ registry add: subscription

Announcer >> initialize
initialize
	super initialize.
	registry := SubscriptionRegistry new

Announcer >> numberOfSubscriptions
numberOfSubscriptions
	^ registry numberOfSubscriptions

Announcer >> on: anAnnouncementClass do: aValuable
on: anAnnouncementClass do: aValuable
	"This method is deprecated!
	Declare that when anAnnouncementClass is raised, aValuable is executed.
	In addition pay attention that ushc method as well as when:do: should not be used on weak announcer since the
	block holds the receiver and more strongly."

	^ self when: anAnnouncementClass do: aValuable

Announcer >> on: anAnnouncementClass send: aSelector to: anObject
on: anAnnouncementClass send: aSelector to: anObject
	"This method is deprecated! Use when:send:to:.
	Declare that when anAnnouncementClass is raised, anObject should receive the message aSelector.
    When the message expects one argument (eg #fooAnnouncement:) the announcement is passed as argument.
    When the message expects two arguments (eg #fooAnnouncement:announcer:) both the announcement and the announcer 
    are passed as argument"

	^ self when: anAnnouncementClass send: aSelector to: anObject

Announcer >> removeSubscription: subscription
removeSubscription: subscription
	"Remove the given subscription from the receiver"

	^ registry remove: subscription

Announcer >> replace: subscription with: newOne
replace: subscription with: newOne
	^ registry replace: subscription with: newOne

Announcer >> subscribe: anAnnouncementClass do: aValuable
subscribe: anAnnouncementClass do: aValuable
	"Declare that when anAnnouncementClass is raised, aValuable is executed."

	^ registry
		add:
			(AnnouncementSubscription new
				announcer: self;
				announcementClass: anAnnouncementClass;
				valuable: aValuable)

Announcer >> subscribe: anAnnouncementClass send: aSelector to: anObject
subscribe: anAnnouncementClass send: aSelector to: anObject
	"Declare that when anAnnouncementClass is raised, anObject should receive the message aSelector."

	^ self subscribe: anAnnouncementClass do: (MessageSend receiver: anObject selector: aSelector)

Announcer >> unsubscribe: anObject
unsubscribe: anObject
	"Unsubscribe all subscriptions of anObject from the receiver"

	registry removeSubscriber: anObject

Announcer >> weak
weak
	"announcer weak subscribe: foo"

	^ WeakSubscriptionBuilder on: self

Announcer >> when: anAnnouncementClass do: aValuable
when: anAnnouncementClass do: aValuable
	"Declare that when anAnnouncementClass is raised, aValuable is executed.  Pay attention that ushc method as well as when:do: should not be used on weak announcer since the block holds the receiver and more strongly."

	^ self subscribe: anAnnouncementClass do: aValuable

Announcer >> when: anAnnouncementClass do: aValuable for: aSubscriber
when: anAnnouncementClass do: aValuable for: aSubscriber
	"Declare that when anAnnouncementClass is raised, aValuable is executed and define the subscriber."

	^ (self subscribe: anAnnouncementClass do: aValuable)
		subscriber: aSubscriber;
		yourself

Announcer >> when: anAnnouncementClass send: aSelector to: anObject
when: anAnnouncementClass send: aSelector to: anObject
	"Declare that when anAnnouncementClass is raised, anObject should receive the message aSelector.
    When the message expects one argument (eg #fooAnnouncement:) the announcement is passed as argument.
    When the message expects two arguments (eg #fooAnnouncement:announcer:) both the announcement and the announcer 
    are passed as argument"

	^ self subscribe: anAnnouncementClass send: aSelector to: anObject

