AnnouncementSubscription
	instanceVariables: #(#announcer #announcementClass #subscriber #action );
	package: #'Announcements-Core'.

AnnouncementSubscription >> action
[
	^ action
]

AnnouncementSubscription >> action: anObject
[
	action := anObject
]

AnnouncementSubscription >> announcementClass
[
	^ announcementClass
]

AnnouncementSubscription >> announcementClass: anObject
[
	announcementClass := anObject
]

AnnouncementSubscription >> announcer
[
	^ announcer
]

AnnouncementSubscription >> announcer: anAnnouncer
[
	announcer := anAnnouncer
]

AnnouncementSubscription >> deliver: anAnnouncement
[
	" deliver an announcement to receiver. In case of failure, it will be handled in separate process"

	^ (self handlesAnnouncement: anAnnouncement)
		ifTrue: [ [ action cull: anAnnouncement cull: announcer ] on: UnhandledError fork: [ :ex | ex pass ] ]
]

AnnouncementSubscription >> handlesAnnouncement: anAnnouncement
[
	^ announcementClass handlesAnnouncement: anAnnouncement
]

AnnouncementSubscription >> makeStrong
[
	" i am already strong. Do nothing "

	
]

AnnouncementSubscription >> makeWeak
[
	action isBlock
		ifTrue: [ self error: 'Not currently available due to missing ephemerons support' ].
	^ announcer
		replace: self
		with:
			(WeakAnnouncementSubscription new
				announcer: announcer;
				action: action asWeakMessageSend;
				subscriber: subscriber;
				announcementClass: announcementClass)
]

AnnouncementSubscription >> subscriber
[
	^ subscriber
]

AnnouncementSubscription >> subscriber: aSubscriber
[
	subscriber := aSubscriber
]

AnnouncementSubscription >> valuable: aValuable
[
	"Used when subscriber should be extracted from valuable object"

	self action: aValuable.
	self subscriber: aValuable receiver
]

criber := aSubscriber
]

AnnouncementSubscription >> valuable: aValuable
[valuable: aValuable
	"Used when subscriber should be extracted from valuable object"

	self action: aValuable.
	self subscriber: aValuable receiver
]

