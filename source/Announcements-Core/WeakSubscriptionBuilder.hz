WeakSubscriptionBuilder
	instanceVariables: #(#announcer );
	package: #'Announcements-Core'.

WeakSubscriptionBuilder >> announcer: anAnnouncer
[
	announcer := anAnnouncer
]

WeakSubscriptionBuilder >> on: anAnnouncementClass do: aValuable
[
	"Do not use this message on announcer weak. We did not deprecated this method because it may break some behavior."

	self error: 'Not supported'
]

WeakSubscriptionBuilder >> on: anAnnouncementClass send: aSelector to: anObject
[
	^ self subscribe: anAnnouncementClass send: aSelector to: anObject
]

WeakSubscriptionBuilder >> subscribe: anAnnouncementClass do: aValuable
[
	"Do not use this message on weak announcer because it does not work. The block will hold strongly the receiver and more.
	 We need ephemerons for that'"

	"aValuable isBlock ifTrue: [  
		self error: 'Do not use this message on weak and block because it does not work. We need ephemerons for that']."

	^ announcer
		basicSubscribe:
			(WeakAnnouncementSubscription new
				announcer: announcer;
				announcementClass: anAnnouncementClass;
				valuable: aValuable)
]

WeakSubscriptionBuilder >> subscribe: anAnnouncementClass send: aSelector to: anObject
[
	^ self subscribe: anAnnouncementClass do: (WeakMessageSend receiver: anObject selector: aSelector)
]

WeakSubscriptionBuilder >> weak
[
	"already weak"

	^ self
]

WeakSubscriptionBuilder >> when: anAnnouncementClass do: aValuable
[
	"Do not use this message on announcer weak. We did not deprecated this method because it may break some behavior."

	self error: 'Not supported'
]

WeakSubscriptionBuilder >> when: anAnnouncementClass send: aSelector to: anObject
[
	^ self subscribe: anAnnouncementClass send: aSelector to: anObject
]

WeakSubscriptionBuilder class >> on: announcer
[
	^ self new announcer: announcer
]

ot supported'
]

WeakSubscriptionBuilder >> when: anAnnouncementClass send: aSelector to: anObject
[when: anAnnouncementClass send: aSelector to: anObject
	^ self subscribe: anAnnouncementClass send: aSelector to: anObject
]

WeakSubscriptionBuilder class >> on: announcer
[on: announcer
	^ self new announcer: announcer
]

