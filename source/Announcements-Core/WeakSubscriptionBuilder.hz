Class
	name: #WeakSubscriptionBuilder;
	superclass: #ClassObject;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#announcer );
	classVariables: #();
	package: #'Announcements-Core'.

Class WeakSubscriptionBuilder >> announcer: anAnnouncer
[
announcer := anAnnouncer
]

Class WeakSubscriptionBuilder >> on: anAnnouncementClass do: aValuable
[
^ self subscribe: anAnnouncementClass do: aValuable
]

Class WeakSubscriptionBuilder >> on: anAnnouncementClass send: aSelector to: anObject
[
^ self subscribe: anAnnouncementClass send: aSelector to: anObject
]

Class WeakSubscriptionBuilder >> subscribe: anAnnouncementClass do: aValuable
[
^ announcer	basicSubscribe:		(WeakAnnouncementSubscription new			announcer: announcer;			announcementClass: anAnnouncementClass;			valuable: aValuable)
]

Class WeakSubscriptionBuilder >> subscribe: anAnnouncementClass send: aSelector to: anObject
[
^ self subscribe: anAnnouncementClass do: (WeakMessageSend receiver: anObject selector: aSelector)
]

Class WeakSubscriptionBuilder >> weak
[
	"already weak"
^ self
]

Class WeakSubscriptionBuilder >> when: anAnnouncementClass do: aValuable
[
^ self subscribe: anAnnouncementClass do: aValuable
]

Metaclass
	name: #WeakSubscriptionBuilder;
	instanceVariables: #().

Metaclass WeakSubscriptionBuilder >> on: announcer
[
^ self new announcer: announcer
]

