Class
	name: #WeakAnnouncementSubscription;
	superclass: #ClassObject;
	instanceSpecification: #(#variable #weak #pointers #words );
	instanceVariables: #(#list #next #announcer #announcementClass #action );
	classVariables: #(#FinalizationList );
	package: #'Announcements-Core'.

Class WeakAnnouncementSubscription >> action
[
^ action
]

Class WeakAnnouncementSubscription >> action: anObject
[
action := anObject
]

Class WeakAnnouncementSubscription >> announcementClass
[
^ announcementClass
]

Class WeakAnnouncementSubscription >> announcementClass: anObject
[
announcementClass := anObject
]

Class WeakAnnouncementSubscription >> announcer
[
^ announcer
]

Class WeakAnnouncementSubscription >> announcer: anAnnouncer
[
announcer := anAnnouncer
]

Class WeakAnnouncementSubscription >> deliver: anAnnouncement
[
	" deliver an announcement to receiver. In case of failure, it will be handled in separate process"
^ (self handles: anAnnouncement class)	ifTrue: [ [ action cull: anAnnouncement cull: announcer ] on: UnhandledError fork: [ :ex | ex pass ] ]
]

Class WeakAnnouncementSubscription >> finalize
[
announcer removeSubscription: self
]

Class WeakAnnouncementSubscription >> handles: anAnnouncementClass
[
^ announcementClass handles: anAnnouncementClass
]

Class WeakAnnouncementSubscription >> initialize
[
list := self class finalizationList
]

Class WeakAnnouncementSubscription >> makeStrong
[
| sub |sub := self subscriber.sub ifNil: [ ^ self error: 'Subscriber is nil, cannot make strong subscription' ].^ announcer	replace: self	with:		(AnnouncementSubscription new			announcer: announcer;			action: action asMessageSend;			subscriber: sub;			announcementClass: announcementClass)
]

Class WeakAnnouncementSubscription >> makeWeak
[
^ self
]

Class WeakAnnouncementSubscription >> next
[
^ next
]

Class WeakAnnouncementSubscription >> subscriber
[
^ self basicAt: 1
]

Class WeakAnnouncementSubscription >> subscriber: anObject
[
self subscriber ifNotNil: [ self error: 'subscriber already set' ].self basicAt: 1 put: anObject
]

Class WeakAnnouncementSubscription >> valuable: aValuable
[
	"Used when subscriber should be extracted from valuable object"
self action: aValuable.self subscriber: aValuable receiver
]

Metaclass
	name: #WeakAnnouncementSubscription;
	instanceVariables: #().

Metaclass WeakAnnouncementSubscription >> finalizationList
[
^ FinalizationList ifNil: [ FinalizationList := WeakFinalizationList new ]
]

Metaclass WeakAnnouncementSubscription >> finalizeValues
[
| head |head := self finalizationList swapWithNil.[ head notNil ]	whileTrue: [ 		head finalize.		head := head next ]
]

Metaclass WeakAnnouncementSubscription >> initialize
[
	"self initialize"
WeakArray	removeWeakDependent: self;	addWeakDependent: self	"Make sure that it is not added twice."
]

Metaclass WeakAnnouncementSubscription >> new
[
^ ((WeakFinalizationList hasNewFinalization	ifTrue: [ self ]	ifFalse: [ LegacyWeakSubscription ]) basicNew: 1) initialize
]

