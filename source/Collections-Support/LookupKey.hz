LookupKey
	superclass: #Magnitude;
	instanceVariables: #(#key );
	package: #'Collections-Support'.

LookupKey >> < aLookupKey
[
	"Refer to the comment in Magnitude|<."

	^ key < aLookupKey key
]

LookupKey >> = aLookupKey
[
	self species = aLookupKey species
		ifTrue: [ ^ key = aLookupKey key ]
		ifFalse: [ ^ false ]
]

LookupKey >> canAssign
[
	^ true
]

LookupKey >> hash
[
	"Hash is reimplemented because = is implemented."

	^ key hash
]

LookupKey >> isSpecialReadBinding
[
	"Return true if this variable binding is read protected, e.g., should not be accessed primitively but rather by sending #value messages"

	^ false
]

LookupKey >> isVariableBinding
[
	"Return true if I represent a literal variable binding"

	^ true
]

LookupKey >> key
[
	"Answer the lookup key of the receiver."

	^ key
]

LookupKey >> key: anObject
[
	"Store the argument, anObject, as the lookup key of the receiver."

	key := anObject
]

LookupKey >> name
[
	^ self key isString
		ifTrue: [ self key ]
		ifFalse: [ self key printString ]
]

LookupKey >> printOn: aStream
[
	key printOn: aStream
]

LookupKey class >> key: aKey
[
	"Answer an instance of me with the argument as the lookup up."

	^ self basicNew key: aKey
]

