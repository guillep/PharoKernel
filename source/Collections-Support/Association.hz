Association
	superclass: #LookupKey;
	instanceVariables: #(#value );
	package: #'Collections-Support'.

Association >> = anAssociation
[
	^ super = anAssociation and: [ value = anAssociation value ]
]

Association >> isSelfEvaluating
[
	^ self class == Association and: [ self key isSelfEvaluating and: [ self value isSelfEvaluating ] ]
]

Association >> key: aKey value: anObject
[
	"Store the arguments as the variables of the receiver."

	key := aKey.
	value := anObject
]

Association >> literalEqual: otherLiteral
[
	"Answer true if the receiver and otherLiteral represent the same literal.
	Variable bindings are literally equals only if identical.
	This is how variable sharing works, by preserving identity and changing only the value."

	^ self == otherLiteral
]

Association >> printOn: aStream
[
	super printOn: aStream.
	aStream nextPutAll: '->'.
	value printOn: aStream
]

Association >> storeOn: aStream
[
	"Store in the format (key->value)"

	aStream nextPut: $(.
	key storeOn: aStream.
	aStream nextPutAll: '->'.
	value storeOn: aStream.
	aStream nextPut: $)
]

Association >> value
[
	"Answer the value of the receiver."

	^ value
]

Association >> value: anObject
[
	"Store the argument, anObject, as the value of the receiver."

	value := anObject
]

Association class >> key: newKey value: newValue
[
	"Answer an instance of me with the arguments as the key and value of 
	the association."

	^ (super key: newKey) value: newValue
]

