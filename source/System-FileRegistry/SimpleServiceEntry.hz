SimpleServiceEntry
	superclass: #Model;
	instanceVariables: #(#provider #label #selector #usingLineAfter #stateSelector #description #argumentGetter #buttonLabel );
	package: #'System-FileRegistry'.

SimpleServiceEntry >> addServiceFor: served toMenu: aMenu
[
	aMenu
		add: self label
		target: self
		selector: #performServiceFor:
		argument: served.	"self requestSelector "
	self usingLineAfter
		ifTrue: [ aMenu addLine ]
]

SimpleServiceEntry >> argumentGetter: aBlock
[
	argumentGetter := aBlock
]

SimpleServiceEntry >> buttonLabel
[
	"Answer the label to be emblazoned on a button representing the service in a file list, for example"

	^ buttonLabel ifNil: [ label ]
]

SimpleServiceEntry >> buttonLabel: aString
[
	"Set the receiver's buttonLabel, to be used on a button in a 
	tool-pane; this is split out so that a more abbreviated wording 
	can be deployed if desired"

	buttonLabel := aString translated
]

SimpleServiceEntry >> description
[
	"may be used for balloon or other"

	^ description
]

SimpleServiceEntry >> description: aString
[
	"may be used for balloon or other"

	description := aString
]

SimpleServiceEntry >> doNotUseLineAfter
[
	self usingLineAfter: false
]

SimpleServiceEntry >> extraSelector
[
	"normally should not be used directly"

	^ stateSelector
]

SimpleServiceEntry >> extraSelector: aSymbol
[
	stateSelector := aSymbol
]

SimpleServiceEntry >> getArgumentsFrom: aProvider
[
	argumentGetter ifNil: [ ^ aProvider fullName ].
	^ argumentGetter value: aProvider
]

SimpleServiceEntry >> initialize
[
	super initialize.
	self useLineAfter
]

SimpleServiceEntry >> label
[
	^ label
]

SimpleServiceEntry >> performExtraFor: anObject
[
	"carry out the extra service I provide"

	"the stateSelector can be used to ask state of the provider to be reflected in button or other"

	^ stateSelector numArgs = 0
		ifTrue: [ provider perform: stateSelector ]
		ifFalse: [ provider perform: stateSelector with: (self getArgumentsFrom: anObject) ]
]

SimpleServiceEntry >> performServiceFor: anObject
[
	"carry out the service I provide"

	^ selector numArgs = 0
		ifTrue: [ provider perform: selector ]
		ifFalse: [ selector numArgs = 1
				ifTrue: [ provider perform: selector with: (self getArgumentsFrom: anObject) ]
				ifFalse: [ provider perform: selector withArguments: (self getArgumentsFrom: anObject) ] ]
]

SimpleServiceEntry >> printOn: aStream
[
	aStream
		nextPutAll: self class name;
		nextPutAll: ': ('.
	self provider notNil
		ifTrue: [ aStream nextPutAll: provider printString ].
	aStream nextPutAll: ' --- '.
	self selector notNil
		ifTrue: [ aStream nextPutAll: selector asString ].
	aStream nextPut: $)
]

SimpleServiceEntry >> provider
[
	^ provider
]

SimpleServiceEntry >> provider: anObject label: aString selector: aSymbol
[
	"basic initialization message"

	provider := anObject.
	label := aString translated.
	selector := aSymbol.
	stateSelector := #none.
	description := ''
]

SimpleServiceEntry >> provider: anObject label: aString selector: aSymbol description: anotherString
[
	"basic initialization message"

	self provider: anObject label: aString selector: aSymbol.
	stateSelector := #none.
	description := anotherString translated
]

SimpleServiceEntry >> requestExtraSelector
[
	"send me this message to ask me to perform secondary service"

	^ #performExtraFor:
]

SimpleServiceEntry >> selector
[
	"normally should not be used directly"

	^ selector
]

SimpleServiceEntry >> useLineAfter
[
	self usingLineAfter: true
]

SimpleServiceEntry >> usingLineAfter
[
	^ usingLineAfter
]

SimpleServiceEntry >> usingLineAfter: aBoolean
[
	usingLineAfter := aBoolean
]

SimpleServiceEntry class >> provider: anObject label: aString selector: aSymbol
[
	^ self
		provider: anObject
		label: aString
		selector: aSymbol
		description: ''
]

SimpleServiceEntry class >> provider: anObject label: aString selector: aSymbol description: anotherString
[
	^ self new
		provider: anObject
		label: aString
		selector: aSymbol
		description: anotherString
]

SimpleServiceEntry class >> provider: anObject label: aString selector: aSymbol description: anotherString buttonLabel: aLabel
[
	"Answer a new service object with the given initializations.  This variant allows a custom button label to be provided, in order to preserve precious horizontal real-estate in the button pane, while still allowing more descriptive wordings in the popup menu"

	^ self new
		provider: anObject
			label: aString
			selector: aSymbol
			description: anotherString;
		buttonLabel: aLabel;
		yourself
]

