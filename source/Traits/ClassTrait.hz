ClassTrait
	superclass: #TraitDescription;
	traitComposition: TApplyingOnClassSide;
	instanceVariables: #(#baseTrait );
	package: #Traits.

ClassTrait >> adoptInstance: oldInstance from: oldMetaClass
[
	^ self error: 'Traits cannot adopt instances'
]

ClassTrait >> baseTrait
[
	^ baseTrait
]

ClassTrait >> baseTrait: aTrait
[
	[ aTrait isBaseTrait ] assert.
	baseTrait := aTrait
]

ClassTrait >> classTrait
[
	^ self
]

ClassTrait >> classTrait: aClassTrait
[
	self error: 'Trait is already a class trait!'
]

ClassTrait >> compile: text classified: category withStamp: changeStamp notifying: requestor logSource: logSource
[
	| classSideUsersOfBaseTrait message |
	classSideUsersOfBaseTrait := self baseTrait users select: [ :each | each isClassSide ].
	classSideUsersOfBaseTrait isEmpty
		ifFalse: [ message := String
				streamContents: [ :stream | stream
						nextPutAll: 'The instance side of this trait is used on ';
						cr.
					classSideUsersOfBaseTrait do: [ :each | stream nextPutAll: each name ] separatedBy: [ stream nextPutAll: ', ' ].
					stream
						cr;
						nextPutAll: ' You can not add methods to the class side of this trait!' ].
			^ TraitException signal: message ].
	^ super
		compile: text
		classified: category
		withStamp: changeStamp
		notifying: requestor
		logSource: logSource
]

ClassTrait >> copy
[
	"Make a copy of the receiver. Share the 
	reference to the base trait."

	^ self class new
		baseTrait: self baseTrait;
		initializeFrom: self;
		yourself
]

ClassTrait >> definition
[
	^ String
		streamContents: [ :stream | stream
				nextPutAll: self name;
				crtab;
				nextPutAll: 'uses: ';
				nextPutAll: self traitCompositionString ]
]

ClassTrait >> initializeWithBaseTrait: aTrait
[
	self baseTrait: aTrait.
	self noteNewBaseTraitCompositionApplied: aTrait traitComposition.
	aTrait users do: [ :each | self addUser: each classSide ]
]

ClassTrait >> instanceVariableNames: instVarString
[
	"Compatibility purposes"

	
]

ClassTrait >> isBaseTrait
[
	^ false
]

ClassTrait >> isClassTrait
[
	^ true
]

ClassTrait >> name
[
	^ self baseTrait name , ' classTrait'
]

ClassTrait >> new
[
	self error: 'Traits have no instances'
]

ClassTrait class >> for: aTrait
[
	^ self new
		initializeWithBaseTrait: aTrait;
		yourself
]

aseTrait
[isBaseTrait
	^ false
]

ClassTrait >> isClassTrait
[isClassTrait
	^ true
]

ClassTrait >> name
[name
	^ self baseTrait name , ' classTrait'
]

ClassTrait >> new
[new
	self error: 'Traits have no instances'
]

ClassTrait class >> for: aTrait
[for: aTrait
	^ self new
		initializeWithBaseTrait: aTrait;
		yourself
]

