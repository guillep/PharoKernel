Trait
	superclass: #TraitDescription;
	traitComposition: TClass;
	instanceVariables: #(#name #environment #classTrait #category );
	package: #Traits.

Trait >> baseTrait
[
	^ self
]

Trait >> basicCategory
[
	^ category
]

Trait >> basicCategory: aSymbol
[
	category := aSymbol
]

Trait >> classPool
[
	^ Dictionary new
]

Trait >> classPool: aDictionary
[
	"Compatibility purposes"

	
]

Trait >> classTrait
[
	^ classTrait
]

Trait >> classTrait: aTrait
[
	"Assigns the class trait associated with the receiver."

	[ aTrait isClassTrait ] assert.
	classTrait := aTrait
]

Trait >> copy
[
	| newTrait |
	newTrait := self class basicNew initialize
		name: self name
		traitComposition: self traitComposition copyTraitExpression
		methodDict: self methodDict copy
		localSelectors: self localSelectors copy
		organization: self organization copy.
	newTrait environment: self environment.
	newTrait classTrait initializeFrom: self classTrait.
	^ newTrait
]

Trait >> environment
[
	^ environment
]

Trait >> environment: anObject
[
	environment := anObject
]

Trait >> fileOutOn: aFileStream moveSource: moveSource toFile: fileIndex initializing: aBool
[
	"File a description of the receiver on aFileStream. If the boolean argument,
	moveSource, is true, then set the trailing bytes to the position of aFileStream and
	to fileIndex in order to indicate where to find the source code."

	self crTrace: name.
	super fileOutOn: aFileStream moveSource: moveSource toFile: fileIndex.
	self hasClassSide
		ifTrue: [ aFileStream
				cr;
				nextPutAll: '"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!';
				cr;
				cr.
			self classTrait fileOutOn: aFileStream moveSource: moveSource toFile: fileIndex ]
]

Trait >> initialize
[
	super initialize.
	classTrait := ClassTrait for: self
]

Trait >> isBaseTrait
[
	^ true
]

Trait >> isClassTrait
[
	^ false
]

Trait >> name
[
	^ name
]

Trait >> name: aSymbol
[
	name := aSymbol
]

Trait >> sharedPools
[
	"Answer an ordered collection of  the shared pools that the receiver shares"

	^ OrderedCollection new
]

Trait >> sharedPools: aCollection
[
	"Compatibilty purposes"

	
]

Trait >> subclass: t instanceVariableNames: f classVariableNames: d poolDictionaries: s category: cat
[
	"Compatibility purposes"

	^ self error: 'Traits cannot have subclasses'
]

Trait >> subclasses
[
	"for compatibility with classes"

	^ #()
]

Trait >> subclasses: aCollection
[
	"Compatibility purposes"

	
]

Trait class >> defaultEnvironment
[
	^ Smalltalk
]

Trait class >> named: aSymbol
[
	^ self named: aSymbol uses: {} category: 'Unclassified'
]

Trait class >> named: aSymbol uses: aTraitCompositionOrCollection category: aString
[
	| env |
	env := self environment.
	^ self
		named: aSymbol
		uses: aTraitCompositionOrCollection
		category: aString
		env: env
]

Trait class >> named: aSymbol uses: aTraitCompositionOrCollection category: aString env: anEnvironment
[
	| trait oldTrait systemCategory oldCategory |
	systemCategory := aString asSymbol.
	trait := anEnvironment at: aSymbol ifAbsent: [ nil ].
	oldTrait := trait copy.	"Since there some strange side effect who changes teh category before being able to 	  actually update (and that causes a problem on RPackage organization), we take also the 	  category"
	oldCategory := oldTrait ifNotNil: [ oldTrait category ].
	trait := trait ifNil: [ super new ].
	(trait isKindOf: Trait)
		ifFalse: [ ^ self error: trait name , ' is not a Trait' ].
	trait setName: aSymbol andRegisterInCategory: systemCategory environment: anEnvironment.
	trait setTraitComposition: aTraitCompositionOrCollection asTraitComposition.	"... notify interested clients ..."
	oldTrait ifNil: [ SystemAnnouncer uniqueInstance classAdded: trait inCategory: systemCategory.
			^ trait ].
	SystemAnnouncer uniqueInstance traitDefinitionChangedFrom: oldTrait to: trait.
	systemCategory ~= oldCategory
		ifTrue: [ SystemAnnouncer uniqueInstance class: trait recategorizedFrom: oldCategory to: systemCategory ].
	^ trait
]

Trait class >> new
[
	self shouldNotImplement
]

Trait class >> newTemplateIn: categoryString
[
	^ String
		streamContents: [ :stream | stream
				nextPutAll: self name;
				nextPutAll: ' named: #NameOfTrait';
				cr;
				tab;
				nextPutAll: 'uses: {}';
				cr;
				tab;
				nextPutAll: 'category: ';
				nextPut: $';
				nextPutAll: categoryString;
				nextPut: $' ]
]

