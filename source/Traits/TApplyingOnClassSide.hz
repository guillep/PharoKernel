Trait named: #TApplyingOnClassSide
	package: #'Traits-Kernel-Traits'.TApplyingOnClassSide >> acceptsLoggingOfCompilation
[
	"Answer whether the receiver's method submisions and class defintions should be logged to the changes file and to the current change set.  The metaclass follows the rule of the class itself."

	^ self theNonMetaClass acceptsLoggingOfCompilation
]

TApplyingOnClassSide >> addInstVarNamed: aString
[
	"Add the argument, aString, as one of the receiver's instance variables."

	| fullString |
	fullString := String
		streamContents: [ :strm | self instVarNames do: [ :aString2 | strm
						nextPutAll: aString2;
						space ].
			strm nextPutAll: aString ].
	self instanceVariableNames: fullString
]

TApplyingOnClassSide >> addObsoleteSubclass: aClass
[
	"Do nothing."

	
]

TApplyingOnClassSide >> addSubclass: aClass
[
	"Do nothing."

	
]

TApplyingOnClassSide >> adoptInstance: oldInstance from: oldMetaClass
[
	^ self explicitRequirement
]

TApplyingOnClassSide >> assertConsistantCompositionsForNew: aTraitComposition
[
	"Applying or modifying a trait composition on the class side
	of a behavior has some restrictions."

	| baseTraits notAddable message |
	baseTraits := aTraitComposition traits select: [ :each | each isBaseTrait ].
	baseTraits isEmpty
		ifFalse: [ notAddable := baseTraits reject: [ :each | each classSide methodDict isEmpty ].
			notAddable isEmpty
				ifFalse: [ message := String
						streamContents: [ :stream | stream
								nextPutAll: 'You can not add the base trait(s)';
								cr.
							notAddable do: [ :each | stream nextPutAll: each name ] separatedBy: [ stream nextPutAll: ', ' ].
							stream
								cr;
								nextPutAll: 'to this composition because it/they define(s) methods on the class side.' ].
					^ TraitCompositionException signal: message ] ].
	self instanceSide traitComposition traits asSet
		= (aTraitComposition traits select: [ :each | each isClassTrait ] thenCollect: [ :each | each baseTrait ]) asSet
		ifFalse: [ 
			^ TraitCompositionException
				signal:
					'You can not add or remove class side traits on				the class side of a composition. (But you can specify aliases or exclusions				for existing traits or add a trait which does not have any methods on the class side.)' ]
]

TApplyingOnClassSide >> binding
[
	"return an association that can be used as the binding
	 To share it between methods, reuse an existing one if possible"

	^ self methodDict ifEmpty: [ nil -> self ] ifNotEmpty: [ :dict | dict anyOne classBinding ]
]

TApplyingOnClassSide >> bindingOf: varName
[
	^ self theNonMetaClass classBindingOf: varName
]

TApplyingOnClassSide >> canZapMethodDictionary
[
	"Return true if it is safe to zap the method dictionary on #obsolete"

	self soleInstance == nil
		ifTrue: [ ^ true ]
		ifFalse: [ ^ self soleInstance canZapMethodDictionary ]
]

TApplyingOnClassSide >> category
[
	^ self theNonMetaClass category
]

TApplyingOnClassSide >> classPool
[
	"Answer the dictionary of class variables."

	^ self theNonMetaClass classPool
]

TApplyingOnClassSide >> classVarNames
[
	"Answer a set of the names of the class variables defined in the receiver's instance."

	self theNonMetaClass ifNil: [ ^ Set new ].
	^ self theNonMetaClass classVarNames
]

TApplyingOnClassSide >> definition
[
	^ self explicitRequirement
]

TApplyingOnClassSide >> fileOutInitializerOn: aStream
[
	(self includesSelector: #initialize)
		ifTrue: [ aStream cr.
			aStream nextChunkPut: self soleInstance name , ' initialize' ]
]

TApplyingOnClassSide >> hasClassSide
[
	^ false
]

TApplyingOnClassSide >> initializeFrom: anotherClassTrait
[
	self traitComposition: self traitComposition copyTraitExpression.
	self methodDict: self methodDict copy.
	self localSelectors: self localSelectors copy.
	self basicOrganization: self organization copy
]

TApplyingOnClassSide >> instanceVariableNames: instVarString
[
	^ self explicitRequirement
]

TApplyingOnClassSide >> isAnonymous
[
	^ self soleInstance isAnonymous
]

TApplyingOnClassSide >> isMeta
[
	^ true
]

TApplyingOnClassSide >> isObsolete
[
	"Return true if the receiver is obsolete"

	^ self soleInstance == nil
		or: [ self soleInstance classSide ~~ self or: [ self soleInstance isObsolete ]	"or I am not the class of thisClass" ]	"Either no thisClass"	"or my instance is obsolete"
]

TApplyingOnClassSide >> isSelfEvaluating
[
	^ self isObsolete not
]

TApplyingOnClassSide >> name
[
	^ self explicitRequirement
]

TApplyingOnClassSide >> new
[
	^ self explicitRequirement
]

TApplyingOnClassSide >> nonTrivial
[
	"Answer whether the receiver has any methods or instance variables."

	^ self instVarNames notEmpty or: [ self hasMethods or: [ self hasTraitComposition ] ]
]

TApplyingOnClassSide >> noteNewBaseTraitCompositionApplied: aTraitComposition
[
	"The argument is the new trait composition of my base trait - add
	the new traits or remove non existing traits on my class side composition.
	(Each class trait in my composition has its base trait on the instance side
	of the composition - manually added traits to the class side are always 
	base traits.)"

	| newComposition traitsFromInstanceSide |
	traitsFromInstanceSide := self traitComposition traits
		select: [ :each | each isClassTrait ]
		thenCollect: [ :each | each baseTrait ].
	newComposition := self traitComposition copyTraitExpression.
	(traitsFromInstanceSide copyWithoutAll: aTraitComposition traits)
		do: [ :each | newComposition removeFromComposition: each classTrait ].
	(aTraitComposition traits copyWithoutAll: traitsFromInstanceSide) do: [ :each | newComposition add: each classTrait ].
	self setTraitComposition: newComposition
]

TApplyingOnClassSide >> obsoleteSubclasses
[
	"Answer the receiver's subclasses."

	self theNonMetaClass == nil
		ifTrue: [ ^ #() ].
	^ self theNonMetaClass obsoleteSubclasses
		select: [ :aSubclass | aSubclass isMeta not ]
		thenCollect: [ :aSubclass | aSubclass class ]	"Metaclass allInstancesDo:		[:m | Compiler evaluate: 'subclasses:=nil' for: m logged: false]"
]

TApplyingOnClassSide >> possibleVariablesFor: misspelled continuedFrom: oldResults
[
	^ self theNonMetaClass possibleVariablesFor: misspelled continuedFrom: oldResults
]

TApplyingOnClassSide >> removeInstVarNamed: aString
[
	"Remove the argument, aString, as one of the receiver's instance variables."

	| newArray newString |
	(self instVarNames includes: aString)
		ifFalse: [ self error: aString , ' is not one of my instance variables' ].
	newArray := self instVarNames copyWithout: aString.
	newString := ''.
	newArray do: [ :aString2 | newString := aString2 , ' ' , newString ].
	self instanceVariableNames: newString
]

TApplyingOnClassSide >> removeSubclass: aClass
[
	"Do nothing."

	
]

TApplyingOnClassSide >> sharedPools
[
	^ OrderedCollection new
]

TApplyingOnClassSide >> soleInstance
[
	^ self explicitRequirement
]

TApplyingOnClassSide >> subclasses
[
	"Answer the receiver's subclasses."

	self theNonMetaClass == nil
		ifTrue: [ ^ #() ].
	^ self theNonMetaClass subclasses
		select: [ :aSubclass | aSubclass isMeta not ]
		thenCollect: [ :aSubclass | aSubclass class ]	"Metaclass allInstancesDo:		[:m | Compiler evaluate: 'subclasses:=nil' for: m logged: false]"
]

TApplyingOnClassSide >> subclassesDo: aBlock
[
	"Evaluate aBlock for each of the receiver's immediate subclasses."

	self theNonMetaClass
		subclassesDo: [ :aSubclass | 
			"The following test is for Class class which has to exclude		the Metaclasses being subclasses of Class."
			aSubclass isMeta
				ifFalse: [ aBlock value: aSubclass class ] ]
]

TApplyingOnClassSide >> uses: aTraitCompositionOrArray
[
	| copyOfOldTrait newComposition |
	copyOfOldTrait := self copy.
	newComposition := aTraitCompositionOrArray asTraitComposition.
	self assertConsistantCompositionsForNew: newComposition.
	self setTraitComposition: newComposition.
	SystemAnnouncer uniqueInstance traitDefinitionChangedFrom: copyOfOldTrait to: self
]

TApplyingOnClassSide >> uses: aTraitCompositionOrArray instanceVariableNames: instVarString
[
	| newComposition newMetaClass copyOfOldMetaClass |
	copyOfOldMetaClass := self copy.
	newMetaClass := self instanceVariableNames: instVarString.
	newComposition := aTraitCompositionOrArray asTraitComposition.
	newMetaClass assertConsistantCompositionsForNew: newComposition.
	newMetaClass setTraitComposition: newComposition.
	SystemAnnouncer uniqueInstance classDefinitionChangedFrom: copyOfOldMetaClass to: newMetaClass
]

TApplyingOnClassSide >> wantsChangeSetLogging
[
	"Answer whether code submitted for the receiver should be remembered by the changeSet mechanism.The metaclass follows the rule of the class itself."

	^ self theNonMetaClass wantsChangeSetLogging
]

TApplyingOnClassSide >> wantsRecompilationProgressReported
[
	"The metaclass follows the rule of the class itself."

	^ self theNonMetaClass wantsRecompilationProgressReported
]

