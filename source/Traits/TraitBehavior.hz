TraitBehavior
	traitComposition: TBehavior;
	instanceVariables: #(#methodDict #traitComposition #localSelectors #users );
	package: #Traits.

TraitBehavior >> basicLocalSelectors
[
	"Direct accessor for the instance variable localSelectors.
	Since localSelectors is lazily initialized, this may 
	return nil, which means that all selectors are local."

	^ localSelectors
]

TraitBehavior >> basicLocalSelectors: aSetOrNil
[
	localSelectors := aSetOrNil
]

TraitBehavior >> basicNew
[
	self error: 'Traits cannot create instances'
]

TraitBehavior >> basicNew: sizeRequested
[
	self error: 'Traits cannot create instances'
]

TraitBehavior >> basicObsoleteSubclasses
[
	^ WeakKeyToCollectionDictionary new
]

TraitBehavior >> bindingOf: varName
[
	"Answer the binding of some variable resolved in the scope of the receiver"

	^ self environment bindingOf: varName asSymbol
]

TraitBehavior >> instSize
[
	^ 0
]

TraitBehavior >> isTrait
[
	^ true
]

TraitBehavior >> methodDict
[
	^ methodDict
]

TraitBehavior >> methodDict: aDictionary
[
	methodDict := aDictionary
]

TraitBehavior >> name
[
	^ self subclassResponsibility
]

TraitBehavior >> setFormat: aFormatInstanceDescription
[
	"Compatibility purposes"

	
]

TraitBehavior >> subclassDefinerClass
[
	^ nil subclassDefinerClass
]

TraitBehavior >> superclass
[
	"For compatibility with classes"

	^ nil
]

TraitBehavior >> superclass: aClass
[
	"Compatibility purposes"

	
]

TraitBehavior >> traitComposition
[
	traitComposition ifNil: [ traitComposition := TraitComposition new ].
	^ traitComposition
]

TraitBehavior >> traitComposition: aTraitComposition
[
	traitComposition := aTraitComposition
]

TraitBehavior >> users
[
	^ users
]

TraitBehavior >> users: aCollection
[
	users := aCollection
]

 ifNil: [ traitComposition := TraitComposition new ].
	^ traitComposition
]

TraitBehavior >> traitComposition: aTraitComposition
[traitComposition: aTraitComposition
	traitComposition := aTraitComposition
]

TraitBehavior >> users
[users
	^ users
]

TraitBehavior >> users: aCollection
[users: aCollection
	users := aCollection
]

