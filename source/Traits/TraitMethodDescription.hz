TraitMethodDescription
	instanceVariables: #(#selector #locatedMethods );
	package: #Traits.

TraitMethodDescription >> addLocatedMethod: aLocatedMethod
[addLocatedMethod: aLocatedMethod
	locatedMethods add: aLocatedMethod
]

TraitMethodDescription >> conflictMethod
[conflictMethod
	| method argumentNames binary numberOfArguments |
	self isConflict
		ifFalse: [ ^ nil ].
	argumentNames := self getArgumentNames.
	binary := self isBinarySelector.
	numberOfArguments := binary
		ifTrue: [ 1 ]
		ifFalse: [ argumentNames size + 2 ].
	^ self
		generateMethod: self selector
		withMarker: CompiledMethod conflictMarker
		forArgs: argumentNames size
		binary: binary
]

TraitMethodDescription >> effectiveMethod
[effectiveMethod
	"Return the effective compiled method of this method description."

	| locatedMethod method |
	method := self providedMethod.
	method isNil
		ifFalse: [ ^ method ].
	method := self conflictMethod.
	method isNil
		ifFalse: [ ^ method ].
	^ self requiredMethod
]

TraitMethodDescription >> effectiveMethodCategory
[effectiveMethodCategory
	^ self effectiveMethodCategoryCurrent: nil new: nil
]

TraitMethodDescription >> effectiveMethodCategoryCurrent: currentCategoryOrNil new: newCategoryOrNil
[effectiveMethodCategoryCurrent: currentCategoryOrNil new: newCategoryOrNil
	| result size isCurrent isConflict |
	size := self size.
	size = 0
		ifTrue: [ ^ nil ].
	result := self locatedMethods anyOne category.
	size = 1
		ifTrue: [ ^ result ].
	isCurrent := currentCategoryOrNil isNil.
	isConflict := false.
	self locatedMethods
		do: [ :each | | cat |
			cat := each category.
			isCurrent := isCurrent or: [ cat == currentCategoryOrNil ].
			isConflict := isConflict or: [ cat ~~ result ] ].
	isConflict
		ifFalse: [ ^ result ].
	(isCurrent not and: [ newCategoryOrNil notNil ])
		ifTrue: [ ^ newCategoryOrNil ].
	^ Protocol ambiguous
]

TraitMethodDescription >> generateMethod: aSelector withMarker: aSymbol forArgs: aNumber binary: aBoolean
[generateMethod: aSelector withMarker: aSymbol forArgs: aNumber binary: aBoolean
	| source node |
	source := String
		streamContents: [ :stream | aNumber < 1
				ifTrue: [ stream nextPutAll: 'selector' ]
				ifFalse: [ aBoolean
						ifTrue: [ stream nextPutAll: '* anObject' ]
						ifFalse: [ 1 to: aNumber do: [ :argumentNumber | stream
									nextPutAll: 'with:';
									space;
									nextPutAll: 'arg';
									nextPutAll: argumentNumber asString;
									space ] ] ].
			stream
				cr;
				tab;
				nextPutAll: 'self ';
				nextPutAll: aSymbol ].
	node := self class compiler
		source: source;
		class: self class;
		failBlock: [  ];
		translate.
	^ node generateWithSource
		selector: aSelector;
		yourself
]

TraitMethodDescription >> getArgumentNames
[getArgumentNames
	| argumentNamesCollection names defaultName |
	defaultName := 'arg'.
	argumentNamesCollection := self locatedMethods collect: [ :each | each argumentNames ].
	names := Array new: argumentNamesCollection anyOne size.
	argumentNamesCollection
		do: [ :collection | 1 to: names size do: [ :index | (names at: index) isNil
					ifTrue: [ names at: index put: (collection at: index) ]
					ifFalse: [ (names at: index) ~= (collection at: index)
							ifTrue: [ names at: index put: defaultName , index asString ] ] ] ].
	^ names
]

TraitMethodDescription >> initialize
[initialize
	super initialize.
	locatedMethods := IdentitySet new
]

TraitMethodDescription >> isAliasSelector
[isAliasSelector
	"Return true if the selector is an alias (if it is different
	from the original selector) or already an aliased method
	in the original location (recursively search the compositions).
	Return false, if not or if we have a conflict."

	| locatedMethod |
	^ self size = 1
		and: [ locatedMethod := self locatedMethods anyOne.
			locatedMethod selector ~= self selector or: [ locatedMethod methodClass isAliasSelector: self selector ] ]
]

TraitMethodDescription >> isBinarySelector
[isBinarySelector
	^ self locatedMethods anyOne isBinarySelector
]

TraitMethodDescription >> isConflict
[isConflict
	| count originMethodReferenciel |
	count := 0.
	self locatedMethods size > 1
		ifTrue: [ "If they are more than 1 located method, then check whether these methods have the same origin"
			originMethodReferenciel := self locatedMethods anyOne origin.
			(self locatedMethods allSatisfy: [ :each | each origin == originMethodReferenciel ])
				ifTrue: [ ^ false ] ].
	self methodsDo: [ :each | each isProvided
				ifTrue: [ count := count + 1.
					count > 1
						ifTrue: [ ^ true ] ] ].
	^ false
]

TraitMethodDescription >> isEmpty
[isEmpty
	^ self size = 0
]

TraitMethodDescription >> isLocalAliasSelector
[isLocalAliasSelector
	"Return true if the selector is an alias (if it is different
	from the original selector). Return false, if not or if we
	have a conflict."

	^ self size = 1 and: [ self locatedMethods anyOne selector ~= self selector ]
]

TraitMethodDescription >> isProvided
[isProvided
	^ self providedMethod notNil
]

TraitMethodDescription >> isRequired
[isRequired
	self isEmpty
		ifTrue: [ ^ false ].
	^ self locatedMethods allSatisfy: [ :each | each isRequired ]
]

TraitMethodDescription >> locatedMethods
[locatedMethods
	^ locatedMethods
]

TraitMethodDescription >> methodsDo: aBlock
[methodsDo: aBlock
	self locatedMethods do: [ :each | aBlock value: each ]
]

TraitMethodDescription >> providedLocatedMethod
[providedLocatedMethod
	| locatedMethod aLocatedMethod refOrigin |
	locatedMethod := nil.
	self locatedMethods ifEmpty: [ ^ nil ].
	self locatedMethods size > 1
		ifTrue: [ aLocatedMethod := self locatedMethods anyOne.
			refOrigin := (aLocatedMethod methodClass >> aLocatedMethod selector) origin.
			(self locatedMethods allSatisfy: [ :each | each origin == refOrigin ])
				ifTrue: [ ^ aLocatedMethod ] ].
	self locatedMethods
		do: [ :each | each isProvided
				ifTrue: [ locatedMethod isNil
						ifFalse: [ ^ nil ].
					locatedMethod := each ] ].
	^ locatedMethod
]

TraitMethodDescription >> providedMethod
[providedMethod
	^ self providedLocatedMethod ifNotNil: [ :locatedMethod | locatedMethod method ]
]

TraitMethodDescription >> requiredMethod
[requiredMethod
	| argumentNames numberOfArguments binary |
	self isRequired
		ifFalse: [ ^ nil ].
	self size = 1
		ifTrue: [ ^ self locatedMethods anyOne ].
	argumentNames := self getArgumentNames.
	binary := self isBinarySelector.
	numberOfArguments := binary
		ifTrue: [ 1 ]
		ifFalse: [ argumentNames size + 2 ].
	^ self
		generateMethod: self selector
		withMarker: CompiledMethod implicitRequirementMarker
		forArgs: argumentNames size
		binary: binary
]

TraitMethodDescription >> selector
[selector
	^ selector
]

TraitMethodDescription >> selector: aSymbol
[selector: aSymbol
	selector := aSymbol
]

TraitMethodDescription >> size
[size
	^ self locatedMethods size
]

TraitMethodDescription class >> maxArguments
[maxArguments
	^ 30
]

TraitMethodDescription class >> new
[new
	^ super new
		initialize;
		yourself
]

TraitMethodDescription class >> selector: aSymbol
[selector: aSymbol
	^ self new selector: aSymbol yourself
]

