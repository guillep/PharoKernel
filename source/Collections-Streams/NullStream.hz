NullStream
	superclass: #Stream;
	instanceVariables: #(#binary #position );
	package: #'Collections-Streams'.

NullStream >> ascii
[ascii
	"Switches the stream to ascii mode"

	binary := false
]

NullStream >> atEnd
[atEnd
	"Answer whether the receiver can access any more objects."

	^ false
]

NullStream >> binary
[binary
	"Switches the stream to binary mode"

	binary := true
]

NullStream >> collectionSpecies
[collectionSpecies
	"The type of collection returned by the stream"

	^ binary
		ifTrue: [ ByteArray ]
		ifFalse: [ ByteString ]
]

NullStream >> contents
[contents
	"Answer all of the contents of the receiver."

	self shouldNotImplement
]

NullStream >> element
[element
	"The element returned by the stream"

	^ binary
		ifTrue: [ 0 ]
		ifFalse: [ Character value: 0 ]
]

NullStream >> initialize
[initialize
	"Initialize the receiver"

	binary := false.
	position := 0
]

NullStream >> isBinary
[isBinary
	"Return true if the receiver is a binary byte stream"

	^ binary
]

NullStream >> isEmpty
[isEmpty
	"Answer whether the receiver's contents has no elements."

	^ false
]

NullStream >> next
[next
	"Answer the next object accessible by the receiver."

	position := position + 1.
	^ self element
]

NullStream >> next: anInteger
[next: anInteger
	"Answer the next anInteger elements of my collection. Must override 
	because default uses self contents species, which might involve a large 
	collection."

	position := position + anInteger.
	^ self collectionSpecies new: anInteger
]

NullStream >> next: n into: aCollection
[next: n into: aCollection
	"Read n objects into the given collection.
	Return aCollection or a partial copy if less than
	n elements have been read."

	^ self next: n into: aCollection startingAt: 1
]

NullStream >> next: n into: aCollection startingAt: startIndex
[next: n into: aCollection startingAt: startIndex
	"Read n objects into the given collection. 
	Return aCollection or a partial copy if less than
	n elements have been read."

	position := position + n.
	^ aCollection
]

NullStream >> next: anInteger putAll: aCollection
[next: anInteger putAll: aCollection
	"Store the next anInteger elements from the given collection."

	^ self next: anInteger putAll: aCollection startingAt: 1
]

NullStream >> next: anInteger putAll: aCollection startingAt: startIndex
[next: anInteger putAll: aCollection startingAt: startIndex
	"Store the next anInteger elements from the given collection."

	position := position + anInteger.
	^ aCollection
]

NullStream >> nextInto: aCollection
[nextInto: aCollection
	"Read the next elements of the receiver into aCollection.
	Return aCollection or a partial copy if less than aCollection
	size elements have been read."

	^ self next: aCollection size into: aCollection startingAt: 1
]

NullStream >> nextInto: aCollection startingAt: startIndex
[nextInto: aCollection startingAt: startIndex
	"Read the next elements of the receiver into aCollection.
	Return aCollection or a partial copy if less than aCollection
	size elements have been read."

	^ self next: aCollection size - startIndex + 1 into: aCollection startingAt: startIndex
]

NullStream >> nextPut: anObject
[nextPut: anObject
	"Insert the argument, anObject, as the next object accessible by the 
	receiver. Answer anObject."

	position := position + 1.
	^ anObject
]

NullStream >> nextPutAll: aCollection
[nextPutAll: aCollection
	"Append the elements of aCollection to the sequence of objects accessible 
	by the receiver. Answer aCollection."

	position := position + aCollection size.
	^ aCollection
]

NullStream >> peek
[peek
	"Answer what would be returned if the message next were sent to the 
	receiver. If the receiver is at the end, answer nil."

	^ self element
]

NullStream >> position
[position
	"Answer the current position of accessing the sequence of objects."

	^ position
]

NullStream >> position: anInteger
[position: anInteger
	"Set the current position for accessing the objects to be anInteger, as long 
	as anInteger is within the bounds of the receiver's contents. If it is not, 
	create an error notification."

	anInteger >= 0
		ifTrue: [ position := anInteger ]
		ifFalse: [ self positionError ]
]

NullStream >> printOn: aStream
[printOn: aStream
	aStream
		nextPutAll: 'a ';
		nextPutAll: self class name
]

NullStream >> readInto: collection startingAt: startIndex count: n
[readInto: collection startingAt: startIndex count: n
	"Read n objects into the given collection. 
	Return number of elements that have been read."

	position := position + n.
	^ n
]

NullStream >> reset
[reset
	"Set the receiver's position to the beginning of the sequence of objects."

	position := 0
]

NullStream >> skip: anInteger
[skip: anInteger
	"Set the receiver's position to be the current position+anInteger. A 
	subclass might choose to be more helpful and select the minimum of the 
	receiver's size and position+anInteger, or the maximum of 1 and 
	position+anInteger for the repositioning."

	self position: position + anInteger
]

NullStream class >> new
[new
	"Creates a new instance"

	^ self basicNew initialize
]

