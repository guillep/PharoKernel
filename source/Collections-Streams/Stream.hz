Stream
	package: #'Collections-Streams'.

Stream >> << items
<< items
	items putOn: self.
	^ self

Stream >> atEnd
atEnd
	"Answer whether the receiver can access any more objects."

	self subclassResponsibility

Stream >> basicNext
basicNext
	^ self next

Stream >> basicNext: anAmount putAll: aCollection startingAt: startIndex
basicNext: anAmount putAll: aCollection startingAt: startIndex
	^ self next: anAmount putAll: aCollection startingAt: startIndex

Stream >> basicNextPut: anObject
basicNextPut: anObject
	^ self nextPut: anObject

Stream >> basicNextPutAll: aCollection
basicNextPutAll: aCollection
	^ self nextPutAll: aCollection

Stream >> binary
binary
	"do nothing"

	^ self

Stream >> close
close
	"Presumably sets the status of the receiver to be closed. This message does 
	nothing at this level, but is included for FileStream compatibility."

	^ self

Stream >> closed
closed
	^ false

Stream >> contents
contents
	"Answer all of the contents of the receiver."

	self subclassResponsibility

Stream >> do: aBlock
do: aBlock
	"Evaluate aBlock for each of the objects accessible by receiver."

	[ self atEnd ] whileFalse: [ aBlock value: self next ]

Stream >> flush
flush
	"Do nothing by default"

	

Stream >> isBinary
isBinary
	^ false

Stream >> isStream
isStream
	"Return true if the receiver responds to the stream protocol"

	^ true

Stream >> localName
localName
	^ 'a stream'

Stream >> next
next
	"Answer the next object accessible by the receiver."

	self subclassResponsibility

Stream >> next: anInteger
next: anInteger
	"Answer the next anInteger number of objects accessible by the receiver."

	| aCollection |
	aCollection := OrderedCollection new.
	anInteger timesRepeat: [ aCollection addLast: self next ].
	^ aCollection

Stream >> next: anInteger put: anObject
next: anInteger put: anObject
	"Make anObject be the next anInteger number of objects accessible by the 
	receiver. Answer anObject."

	anInteger timesRepeat: [ self nextPut: anObject ].
	^ anObject

Stream >> next: anInteger putAll: aCollection startingAt: startIndex
next: anInteger putAll: aCollection startingAt: startIndex
	"Store the next anInteger elements from the given collection."

	(startIndex = 1 and: [ anInteger = aCollection size ])
		ifTrue: [ ^ self nextPutAll: aCollection ].
	^ self nextPutAll: (aCollection copyFrom: startIndex to: startIndex + anInteger - 1)

Stream >> nextMatchAll: aColl
nextMatchAll: aColl
	"Answer true if next N objects are the ones in aColl,
     else false.  Advance stream of true, leave as was if false."

	| save |
	save := self position.
	aColl do: [ :each | self next = each
				ifFalse: [ self position: save.
					^ false ] ].
	^ true

Stream >> nextMatchFor: anObject
nextMatchFor: anObject
	"Gobble the next object and answer whether it is equal to the argument, 
	anObject."

	^ anObject = self next

Stream >> nextPut: anObject
nextPut: anObject
	"Insert the argument, anObject, as the next object accessible by the 
	receiver. Answer anObject."

	self subclassResponsibility

Stream >> nextPutAll: aCollection
nextPutAll: aCollection
	"Append the elements of aCollection to the sequence of objects accessible 
	by the receiver. Answer aCollection."

	aCollection do: [ :v | self nextPut: v ].
	^ aCollection

Stream >> nextWordsPutAll: aCollection
nextWordsPutAll: aCollection
	"Write the argument a word-like object in big endian format on the receiver.
	May be used to write other than plain word-like objects (such as ColorArray)."

	(aCollection class isPointers or: [ aCollection class isWords not ])
		ifTrue: [ ^ self error: aCollection class name , ' is not word-like' ].
	1 to: aCollection basicSize do: [ :i | self nextNumber: 4 put: (aCollection basicAt: i) ].
	^ aCollection

Stream >> openReadOnly
openReadOnly
	^ self

Stream >> print: anObject
print: anObject
	"Have anObject print itself on the receiver."

	anObject printOn: self

Stream >> readOnly
readOnly
	^ self

Stream >> upToEnd
upToEnd
	"answer the remaining elements in the string"

	| elements |
	elements := OrderedCollection new.
	[ self atEnd ] whileFalse: [ elements add: self next ].
	^ elements

Stream >> write: encodedObject
write: encodedObject
	^ encodedObject putOn: self

Stream class >> new
new
	self error: 'Streams are created with on: and with:'

