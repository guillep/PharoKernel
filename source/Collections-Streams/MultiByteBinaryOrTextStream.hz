MultiByteBinaryOrTextStream
	superclass: #ReadWriteStream;
	instanceVariables: #(#isBinary #converter );
	package: #'Collections-Streams'.

MultiByteBinaryOrTextStream >> asBinaryOrTextStream
[
	^ self
]

MultiByteBinaryOrTextStream >> ascii
[
	isBinary := false
]

MultiByteBinaryOrTextStream >> basicNext
[
	^ super next
]

MultiByteBinaryOrTextStream >> basicNext: anInteger
[
	^ super next: anInteger
]

MultiByteBinaryOrTextStream >> basicNext: n into: aString
[
	^ super next: n into: aString
]

MultiByteBinaryOrTextStream >> basicNext: anInteger putAll: aCollection startingAt: startIndex
[
	^ super next: anInteger putAll: aCollection startingAt: startIndex
]

MultiByteBinaryOrTextStream >> basicNextInto: aString
[
	^ super nextInto: aString
]

MultiByteBinaryOrTextStream >> basicNextPut: char
[
	^ super nextPut: char
]

MultiByteBinaryOrTextStream >> basicNextPutAll: aString
[
	^ super nextPutAll: aString
]

MultiByteBinaryOrTextStream >> basicPeek
[
	^ super peek
]

MultiByteBinaryOrTextStream >> basicPosition
[
	^ super position
]

MultiByteBinaryOrTextStream >> basicPosition: pos
[
	^ super position: pos
]

MultiByteBinaryOrTextStream >> binary
[
	isBinary := true
]

MultiByteBinaryOrTextStream >> contents
[
	| ret state |
	state := converter saveStateOf: self.
	ret := self upToEnd.
	converter restoreStateOf: self with: state.
	^ ret
]

MultiByteBinaryOrTextStream >> converter
[
	converter ifNil: [ converter := self class defaultConverter ].
	^ converter
]

MultiByteBinaryOrTextStream >> converter: aConverter
[
	converter := aConverter
]

MultiByteBinaryOrTextStream >> isBinary
[
	^ isBinary
]

MultiByteBinaryOrTextStream >> next
[
	| n |
	n := self converter nextFromStream: self.
	n ifNil: [ ^ nil ].
	isBinary and: [ n isCharacter
				ifTrue: [ ^ n asciiValue ] ].
	^ n
]

MultiByteBinaryOrTextStream >> next: anInteger
[
	| multiString |
	self isBinary
		ifTrue: [ ^ (super next: anInteger) asByteArray ].
	multiString := WideString new: anInteger.
	1 to: anInteger do: [ :index | | character |
		(character := self next)
			ifNotNil: [ multiString at: index put: character ]
			ifNil: [ multiString := multiString copyFrom: 1 to: index - 1.
				^ multiString ] ].
	^ multiString
]

MultiByteBinaryOrTextStream >> next: anInteger putAll: aCollection startingAt: startIndex
[
	(self isBinary or: [ aCollection class == ByteArray ])
		ifTrue: [ ^ super next: anInteger putAll: aCollection startingAt: startIndex ].
	^ self converter
		next: anInteger
		putAll: aCollection
		startingAt: startIndex
		toStream: self
]

MultiByteBinaryOrTextStream >> nextDelimited: terminator
[
	| out ch pos |
	out := (String new: 1000) writeStream.
	self atEnd
		ifTrue: [ ^ '' ].
	pos := self position.
	self next = terminator
		ifFalse: [ "absorb initial terminator"
			self position: pos ].
	[ (ch := self next) == nil ]
		whileFalse: [ ch = terminator
				ifTrue: [ self peek = terminator
						ifTrue: [ self next	"skip doubled terminator" ]
						ifFalse: [ ^ out contents	"terminator is not doubled; we're done!" ] ].
			out nextPut: ch ].
	^ out contents
]

MultiByteBinaryOrTextStream >> nextMatchAll: aColl
[
	| save |
	save := converter saveStateOf: self.
	aColl do: [ :each | self next = each
				ifFalse: [ converter restoreStateOf: self with: save.
					^ false ] ].
	^ true
]

MultiByteBinaryOrTextStream >> nextPut: aCharacter
[
	^ aCharacter isInteger
		ifTrue: [ super nextPut: aCharacter asCharacter ]
		ifFalse: [ self converter nextPut: aCharacter toStream: self ]
]

MultiByteBinaryOrTextStream >> nextPutAll: aCollection
[
	^ self isBinary
		ifTrue: [ super nextPutAll: aCollection ]
		ifFalse: [ aCollection do: [ :each | self nextPut: each ] ]
]

MultiByteBinaryOrTextStream >> padToEndWith: aChar
[
	"We don't have pages, so we are at the end, and don't need to pad."

	
]

MultiByteBinaryOrTextStream >> peek
[
	"Answer what would be returned if the message next were sent to the receiver. If the receiver is at the end, answer nil.  "

	| next pos |
	self atEnd
		ifTrue: [ ^ nil ].
	pos := self position.
	next := self next.
	self position: pos.
	^ next
]

MultiByteBinaryOrTextStream >> peekFor: item
[
	| next state |
	"self atEnd ifTrue: [^ false]. -- SFStream will give nil"
	state := converter saveStateOf: self.
	(next := self next) == nil
		ifTrue: [ ^ false ].
	item = next
		ifTrue: [ ^ true ].
	converter restoreStateOf: self with: state.
	^ false
]

MultiByteBinaryOrTextStream >> reset
[
	super reset.
	isBinary ifNil: [ isBinary := false ].
	collection class == ByteArray
		ifTrue: [ "Store as String and convert as needed."
			collection := collection asString.
			isBinary := true ].
	self converter	"ensure that we have a converter."
]

MultiByteBinaryOrTextStream >> setConverterForCode
[
	| current |
	current := converter saveStateOf: self.
	self position: 0.
	self binary.
	(self next: 3) = #[239 187 191]
		ifTrue: [ self converter: UTF8TextConverter new ]
		ifFalse: [ self converter: MacRomanTextConverter new ].
	converter restoreStateOf: self with: current.
	self text
]

MultiByteBinaryOrTextStream >> setEncoderForSourceCodeNamed: streamName
[
	| l |
	l := streamName asLowercase.
	((l endsWith: 'cs') or: [ (l endsWith: 'st') or: [ (l endsWith: 'st.gz') or: [ l endsWith: 'st.gz' ] ] ])
		ifTrue: [ self converter: MacRomanTextConverter new.
			^ self ].
	self converter: UTF8TextConverter new
]

MultiByteBinaryOrTextStream >> setFileTypeToObject
[
	"do nothing.  We don't have a file type"

	
]

MultiByteBinaryOrTextStream >> skipSeparators
[
	[ self atEnd ] whileFalse: [ self basicNext isSeparator
				ifFalse: [ ^ self position: self position - 1 ] ]
]

MultiByteBinaryOrTextStream >> skipSeparatorsAndPeekNext
[
	"A special function to make nextChunk fast"

	| peek pos |
	[ self atEnd ]
		whileFalse: [ pos := self position.
			(peek := self next) isSeparator
				ifFalse: [ self position: pos.
					^ peek ] ]
]

MultiByteBinaryOrTextStream >> text
[
	isBinary := false
]

MultiByteBinaryOrTextStream >> upTo: delim
[
	| out ch |
	out := (String new: 1000) writeStream.
	self atEnd
		ifTrue: [ ^ '' ].
	[ (ch := self next) isNil ]
		whileFalse: [ ch = delim
				ifTrue: [ ^ out contents	"terminator is not doubled; we're done!" ].
			out nextPut: ch ].
	^ out contents
]

MultiByteBinaryOrTextStream >> upToEnd
[
	| newStream element newCollection |
	newCollection := self isBinary
		ifTrue: [ ByteArray new: 100 ]
		ifFalse: [ String new: 100 ].
	newStream := newCollection writeStream.
	[ (element := self next) notNil ] whileTrue: [ newStream nextPut: element ].
	^ newStream contents
]

MultiByteBinaryOrTextStream class >> defaultConverter
[
	^ Latin1TextConverter new
]

MultiByteBinaryOrTextStream class >> on: aCollection encoding: encodingName
[
	| aTextConverter |
	encodingName
		ifNil: [ aTextConverter := TextConverter default ]
		ifNotNil: [ aTextConverter := TextConverter newForEncoding: encodingName ].
	^ (self on: aCollection) converter: aTextConverter
]

MultiByteBinaryOrTextStream class >> with: aCollection encoding: encodingName
[
	| aTextConverter |
	encodingName
		ifNil: [ aTextConverter := TextConverter default ]
		ifNotNil: [ aTextConverter := TextConverter newForEncoding: encodingName ].
	^ (self with: aCollection) converter: aTextConverter
]

