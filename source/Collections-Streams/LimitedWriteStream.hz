LimitedWriteStream
	superclass: #WriteStream;
	instanceVariables: #(#limit #limitBlock );
	package: #'Collections-Streams'.

LimitedWriteStream >> nextPut: anObject
[
	"Ensure that the limit is not exceeded"

	position >= limit
		ifTrue: [ limitBlock value ]
		ifFalse: [ super nextPut: anObject ].
	^ anObject
]

LimitedWriteStream >> nextPutAll: aCollection
[
	| newEnd |
	collection class == aCollection class
		ifFalse: [ ^ super nextPutAll: aCollection ].
	newEnd := position + aCollection size.
	newEnd > limit
		ifTrue: [ super nextPutAll: (aCollection copyFrom: 1 to: (limit - position max: 0)).
			limitBlock value.
			^ aCollection ].
	newEnd > writeLimit
		ifTrue: [ self growTo: newEnd + 10 ].
	collection
		replaceFrom: position + 1
		to: newEnd
		with: aCollection
		startingAt: 1.
	position := newEnd.
	^ aCollection
]

LimitedWriteStream >> pastEndPut: anObject
[
	collection size >= limit
		ifTrue: [ limitBlock value ].	"Exceptional return"
	^ super pastEndPut: anObject
]

LimitedWriteStream >> setLimit: sizeLimit limitBlock: aBlock
[
	"Limit the numer of elements this stream will write..."

	limit := sizeLimit.	"Execute this (typically ^ contents) when that limit is exceded"
	limitBlock := aBlock
]

