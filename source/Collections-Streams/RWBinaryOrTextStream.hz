RWBinaryOrTextStream
	superclass: #ReadWriteStream;
	instanceVariables: #(#isBinary );
	package: #'Collections-Streams'.

RWBinaryOrTextStream >> asBinaryOrTextStream
asBinaryOrTextStream
	^ self

RWBinaryOrTextStream >> ascii
ascii
	isBinary := false

RWBinaryOrTextStream >> binary
binary
	isBinary := true

RWBinaryOrTextStream >> contents
contents
	"Answer with a copy of my collection from 1 to readLimit."

	| newArray |
	isBinary
		ifFalse: [ ^ super contents ].	"String"
	readLimit := readLimit max: position.
	newArray := ByteArray new: readLimit.
	^ newArray
		replaceFrom: 1
		to: readLimit
		with: collection
		startingAt: 1

RWBinaryOrTextStream >> isBinary
isBinary
	^ isBinary

RWBinaryOrTextStream >> next
next
	| byte |
	^ isBinary
		ifTrue: [ byte := super next.
			byte ifNil: [ nil ] ifNotNil: [ byte asciiValue ] ]
		ifFalse: [ super next ]

RWBinaryOrTextStream >> next: anInteger
next: anInteger
	"Answer the next anInteger elements of my collection. Must override to get class right."

	| newArray |
	newArray := (isBinary
		ifTrue: [ ByteArray ]
		ifFalse: [ ByteString ]) new: anInteger.
	^ self nextInto: newArray

RWBinaryOrTextStream >> next: n into: aCollection startingAt: startIndex
next: n into: aCollection startingAt: startIndex
	"Read n objects into the given collection. 
	Return aCollection or a partial copy if less than n elements have been read."

	"Overriden for efficiency"

	| max |
	max := readLimit - position min: n.
	aCollection
		replaceFrom: startIndex
		to: startIndex + max - 1
		with: collection
		startingAt: position + 1.
	position := position + max.
	max = n
		ifTrue: [ ^ aCollection ]
		ifFalse: [ ^ aCollection copyFrom: 1 to: startIndex + max - 1 ]

RWBinaryOrTextStream >> next: anInteger putAll: aCollection startingAt: startIndex
next: anInteger putAll: aCollection startingAt: startIndex
	"Optimized for ByteArrays"

	aCollection class == ByteArray
		ifTrue: [ ^ super next: anInteger putAll: aCollection asString startingAt: startIndex ].
	^ super next: anInteger putAll: aCollection startingAt: startIndex

RWBinaryOrTextStream >> nextPut: charOrByte
nextPut: charOrByte
	^ super nextPut: charOrByte asCharacter

RWBinaryOrTextStream >> nextPutAll: aCollection
nextPutAll: aCollection
	"Optimized for ByteArrays"

	^ aCollection class == ByteArray
		ifTrue: [ super nextPutAll: aCollection asString ]
		ifFalse: [ super nextPutAll: aCollection ]

RWBinaryOrTextStream >> padToEndWith: aChar
padToEndWith: aChar
	"We don't have pages, so we are at the end, and don't need to pad."

	

RWBinaryOrTextStream >> readInto: aCollection startingAt: startIndex count: n
readInto: aCollection startingAt: startIndex count: n
	"Read n objects into the given collection. 
	Return number of elements that have been read."

	"Overriden for efficiency"

	| max |
	max := readLimit - position min: n.
	aCollection
		replaceFrom: startIndex
		to: startIndex + max - 1
		with: collection
		startingAt: position + 1.
	position := position + max.
	^ max

RWBinaryOrTextStream >> reset
reset
	"Set the receiver's position to the beginning of the sequence of objects."

	super reset.
	isBinary ifNil: [ isBinary := false ].
	collection class == ByteArray
		ifTrue: [ "Store as String and convert as needed."
			collection := collection asString.
			isBinary := true ]

RWBinaryOrTextStream >> setFileTypeToObject
setFileTypeToObject
	"do nothing.  We don't have a file type"

	

RWBinaryOrTextStream >> text
text
	isBinary := false

RWBinaryOrTextStream >> upTo: anObject
upTo: anObject
	"Answer a subcollection from the current access position to the 
	occurrence (if any, but not inclusive) of anObject in the receiver. If 
	anObject is not in the collection, answer the entire rest of the receiver."

	| newStream element species |
	species := isBinary
		ifTrue: [ ByteArray ]
		ifFalse: [ String ].
	newStream := WriteStream on: (species new: 100).
	[ self atEnd or: [ (element := self next) = anObject ] ] whileFalse: [ newStream nextPut: element ].
	^ newStream contents

RWBinaryOrTextStream >> upToEnd
upToEnd
	"Must override to get class right."

	| newArray |
	newArray := (isBinary
		ifTrue: [ ByteArray ]
		ifFalse: [ ByteString ]) new: self size - self position.
	^ self nextInto: newArray

