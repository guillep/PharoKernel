Class
	name: #True;
	superclass: #ClassBoolean;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #();
	classVariables: #();
	package: #'Kernel-Objects'.

Class True >> & aBoolean
[
	"Evaluating conjunction -- answer aBoolean since receiver is true."
^ aBoolean
]

Class True >> and: alternativeBlock
[
	"Nonevaluating conjunction -- answer the value of alternativeBlock since	the receiver is true."
^ alternativeBlock value
]

Class True >> asBit
[
^ 1
]

Class True >> ifFalse: alternativeBlock
[
	"Since the condition is true, the value is the true alternative, which is nil. 	Execution does not actually reach here because the expression is compiled 	in-line."
^ nil
]

Class True >> ifFalse: falseAlternativeBlock ifTrue: trueAlternativeBlock
[
	"Answer the value of trueAlternativeBlock. Execution does not 	actually reach here because the expression is compiled in-line."
^ trueAlternativeBlock value
]

Class True >> ifTrue: alternativeBlock
[
	"Answer the value of alternativeBlock. Execution does not actually 	reach here because the expression is compiled in-line."
^ alternativeBlock value
]

Class True >> ifTrue: trueAlternativeBlock ifFalse: falseAlternativeBlock
[
	"Answer with the value of trueAlternativeBlock. Execution does not 	actually reach here because the expression is compiled in-line."
^ trueAlternativeBlock value
]

Class True >> not
[
	"Negation--answer false since the receiver is true."
^ false
]

Class True >> or: alternativeBlock
[
	"Nonevaluating disjunction -- answer true since the receiver is true."
^ self
]

Class True >> printOn: aStream
[
aStream nextPutAll: 'true'
]

Class True >> xor: aBoolean
[
	"Posted by Eliot Miranda to squeak-dev on 3/24/2009"
^ aBoolean value not
]

Class True >> | aBoolean
[
	"Evaluating disjunction (OR) -- answer true since the receiver is true."
^ self
]

Metaclass
	name: #True;
	instanceVariables: #().

