Magnitude
	package: #Kernel.

Magnitude >> < aMagnitude
[
	"Answer whether the receiver is less than the argument."

	^ self subclassResponsibility
]

Magnitude >> <= aMagnitude
[
	"Answer whether the receiver is less than or equal to the argument."

	^ (self > aMagnitude) not
]

Magnitude >> = aMagnitude
[
	"Compare the receiver with the argument and answer with true if the 
	receiver is equal to the argument. Otherwise answer false."

	^ self subclassResponsibility
]

Magnitude >> > aMagnitude
[
	"Answer whether the receiver is greater than the argument."

	^ aMagnitude < self
]

Magnitude >> >= aMagnitude
[
	"Answer whether the receiver is greater than or equal to the argument."

	^ aMagnitude <= self
]

Magnitude >> between: min and: max
[
	"Answer whether the receiver is less than or equal to the argument, max, 
	and greater than or equal to the argument, min."

	^ self >= min and: [ self <= max ]
]

Magnitude >> compareWith: anotherMagnitude ifLesser: lesserBlock ifEqual: equalBlock ifGreater: greaterBlock
[
	self < anotherMagnitude
		ifTrue: lesserBlock
		ifFalse: [ self = anotherMagnitude
				ifTrue: equalBlock
				ifFalse: greaterBlock ]
]

Magnitude >> hash
[
	"Hash must be redefined whenever = is redefined."

	^ self subclassResponsibility
]

Magnitude >> max: aMagnitude
[
	"Answer the receiver or the argument, whichever has the greater 
	magnitude."

	self > aMagnitude
		ifTrue: [ ^ self ]
		ifFalse: [ ^ aMagnitude ]
]

Magnitude >> min: aMagnitude
[
	"Answer the receiver or the argument, whichever has the lesser 
	magnitude."

	self < aMagnitude
		ifTrue: [ ^ self ]
		ifFalse: [ ^ aMagnitude ]
]

Magnitude >> min: aMin max: aMax
[
	^ (self min: aMin) max: aMax
]

er the receiver or the argument, whichever has the lesser 
	magnitude."

	self < aMagnitude
		ifTrue: [ ^ self ]
		ifFalse: [ ^ aMagnitude ]
]

Magnitude >> min: aMin max: aMax
[min: aMin max: aMax
	^ (self min: aMin) max: aMax
]

