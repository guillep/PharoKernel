InputEventSensor
	superclass: #InputEventHandler;
	instanceVariables: #(#eventQueue #modifiers #mouseButtons #mousePosition );
	classVariables: #(#ButtonDecodeTable );
	sharedPools: #(#EventSensorConstants );
	package: #Kernel.

InputEventSensor >> anyButtonPressed
[
	"Answer whether at least one mouse button is currently being pressed."

	^ self mouseButtons anyMask: 7
]

InputEventSensor >> anyModifierKeyPressed
[
	"ignore, however, the shift keys 'cause that's not REALLY a command key"

	^ self modifiers anyMask: 16r0E	"cmd | opt | ctrl"
]

InputEventSensor >> blueButtonPressed
[
	"Answer whether only the blue mouse button is being pressed. 
	This is the third mouse button or cmd+click on the Mac."

	^ (self mouseButtons bitAnd: 7) = 1
]

InputEventSensor >> characterForEvent: evtBuf
[
	| keycode |
	evtBuf ifNil: [ ^ nil ].
	keycode := evtBuf sixth.
	^ keycode ifNotNil: [ Unicode value: keycode ]
]

InputEventSensor >> commandKeyPressed
[
	"Answer whether the command key on the keyboard is being held down."

	^ self modifiers anyMask: 16r08
]

InputEventSensor >> controlKeyPressed
[
	"Answer whether the control key on the keyboard is being held down."

	^ self modifiers anyMask: 16r02
]

InputEventSensor >> cursorPoint
[
	"Answer a Point indicating the cursor location."

	"Fetch the next event if any to update state.
	Makes sure that the old polling methods consume events
	self nextEvent."

	^ mousePosition
]

InputEventSensor >> flushAllButDandDEvents
[
	
]

InputEventSensor >> flushEvents
[
	eventQueue ifNotNil: [ eventQueue flush ]
]

InputEventSensor >> flushKeyboard
[
	"Remove all characters from the keyboard buffer."

	[ self keyboardPressed ] whileTrue: [ self keyboard ]
]

InputEventSensor >> flushNonKbdEvents
[
	eventQueue ifNil: [ ^ self ].
	eventQueue flushAllSuchThat: [ :buf | (self isKbdEvent: buf) not ]
]

InputEventSensor >> handleEvent: evt
[
	self queueEvent: evt shallowCopy
]

InputEventSensor >> hasTablet
[
	"Answer true if there is a pen tablet available on this computer."

	^ (self primTabletGetParameters: 1) notNil
]

InputEventSensor >> initialize
[
	"Initialize the receiver"

	super initialize.
	eventQueue := WaitfreeQueue new.
	mouseButtons := 0.
	mousePosition := 0 @ 0.
	modifiers := 0
]

InputEventSensor >> joystickButtons: index
[
	^ ((self primReadJoystick: index) bitShift: -22) bitAnd: 16r71F
]

InputEventSensor >> joystickOn: index
[
	^ (((self primReadJoystick: index) bitShift: -27) bitAnd: 1) ~= 0
]

InputEventSensor >> joystickXY: index
[
	| inputWord x y |
	inputWord := self primReadJoystick: index.
	x := (inputWord bitAnd: 16r7FF) - 16r400.
	y := ((inputWord bitShift: -11) bitAnd: 16r7FF) - 16r400.
	^ x @ y
]

InputEventSensor >> keyboard
[
	"Answer the next character from the keyboard."

	^ self characterForEvent: self nextKeyboardEvent
]

InputEventSensor >> keyboardPeek
[
	"Answer the next character in the keyboard buffer without removing it, or nil if it is empty."

	^ self characterForEvent: self peekKeyboardEvent
]

InputEventSensor >> keyboardPressed
[
	"Answer true if keystrokes are available."

	^ self peekKeyboardEvent notNil
]

InputEventSensor >> mapButtons: buttons modifiers: anInteger
[
	"Map the buttons to yellow or blue based on the given modifiers.
	If only the red button is pressed, then map
		Ctrl-RedButton -> BlueButton.
		Cmd-RedButton -> YellowButton.
	"

	buttons = RedButtonBit
		ifFalse: [ ^ buttons ].
	(anInteger allMask: CtrlKeyBit)
		ifTrue: [ ^ BlueButtonBit ].
	(anInteger allMask: CommandKeyBit)
		ifTrue: [ ^ YellowButtonBit ].
	^ buttons
]

InputEventSensor >> modifiers
[
	"modifier keys; bitfield with the following entries:
		1	-	shift key
		2	-	ctrl key
		4	-	(Mac specific) option key
		8	-	Cmd/Alt key"

	"Fetch the next event if any to update state.
	Makes sure that the old polling methods consume events"

	"	self nextEvent."

	^ modifiers
]

InputEventSensor >> mouseButtons
[
	"button state; bitfield with the following entries:
		1	-	yellow (e.g., right) button
		2	-	blue (e.g., middle) button
		4	-	red (e.g., left) button
		[all other bits are currently undefined]"

	"Fetch the next event if any to update state.
	Makes sure that the old polling methods consume events"

	self nextEvent.
	^ mouseButtons
]

InputEventSensor >> nextEvent
[
	"Return the next event from the receiver."

	| evt |
	evt := eventQueue nextOrNil.
	^ evt ifNotNil: [ self processEvent: evt ]
]

InputEventSensor >> nextKeyboardEvent
[
	"Allows for use of old Sensor protocol to get at the keyboard,
	as when running kbdTest or the InterpreterSimulator in Morphic"

	| evtBuf |
	evtBuf := eventQueue findFirst: [ :buf | self isKbdEvent: buf ].
	self flushNonKbdEvents.
	^ evtBuf
]

InputEventSensor >> noButtonPressed
[
	"Answer whether any mouse button is not being pressed."

	^ self anyButtonPressed not
]

InputEventSensor >> peekEvent
[
	"Look ahead at the next event."

	| nextEvent |
	nextEvent := eventQueue peek.
	^ (nextEvent notNil and: [ (nextEvent at: 1) ~= EventTypeMenu ])
		ifTrue: [ self processEvent: nextEvent ]
]

InputEventSensor >> peekKeyboardEvent
[
	"Allows for use of old Sensor protocol to get at the keyboard,
	as when running kbdTest or the InterpreterSimulator in Morphic"

	^ eventQueue findFirst: [ :buf | self isKbdEvent: buf ]
]

InputEventSensor >> primReadJoystick: index
[
	"Return the joystick input word for the joystick with the given index in the range [1..16]. Returns zero if the index does not correspond to a currently installed joystick."

	<primitive: 'primitiveReadJoystick' module: 'JoystickTabletPlugin'>
	^ 0
]

InputEventSensor >> primTabletGetParameters: cursorIndex
[
	"Answer the pen tablet parameters. For parameters that differ from cursor to cursor, answer those associated with the cursor having the given index. Answer nil if there is no pen tablet. The parameters are:
	1. tablet width, in tablet units
	2. tablet height, in tablet units
	3. number of tablet units per inch
	4. number of cursors (pens, pucks, etc; some tablets have more than one)
	5. this cursor index
	6. and 7. x scale and x offset for scaling tablet coordintes (e.g., to fit the screen)
	8. and 9. y scale and y offset for scaling tablet coordintes  (e.g., to fit the screen)
	10. number of pressure levels
	11. presure threshold needed close pen tip switch 
	12. number of pen tilt angles"

	<primitive: 'primitiveGetTabletParameters' module: 'JoystickTabletPlugin'>
	^ nil
]

InputEventSensor >> primTabletRead: cursorIndex
[
	"Answer the pen tablet data for the cursor having the given index. Answer nil if there is no pen tablet. The data is:
	1. index of the cursor to which this data applies
	2. timestamp of the last state chance for this cursor
	3., 4., and 5. x, y, and z coordinates of the cursor (z is typically 0)
	6. and 7. xTilt and yTilt of the cursor; (signed)
	8. type of cursor (0 = unknown, 1 = pen, 2 = puck, 3 = eraser)
	9. cursor buttons
	10. cursor pressure, downward
	11. cursor pressure, tangential
	12. flags"

	<primitive: 'primitiveReadTablet' module: 'JoystickTabletPlugin'>
	self primitiveFailed
]

InputEventSensor >> processEvent: evt
[
	"Process a single event. This method is run at high priority."

	| type |
	type := evt at: 1.	"Treat menu events first"
	type = EventTypeMenu
		ifTrue: [ self processMenuEvent: evt.
			^ nil ].	"Tackle mouse events first"
	type = EventTypeMouse
		ifTrue: [ "Transmogrify the button state according to the platform's button map definition"
			evt at: 5 put: (ButtonDecodeTable at: (evt at: 5) + 1).	"Map the mouse buttons depending on modifiers"
			evt at: 5 put: (self mapButtons: (evt at: 5) modifiers: (evt at: 6)).	"Update state for polling calls"
			mousePosition := (evt at: 3) @ (evt at: 4).
			modifiers := evt at: 6.
			mouseButtons := evt at: 5.
			^ evt ].	"Finally keyboard"
	type = EventTypeKeyboard
		ifTrue: [ "Update state for polling calls"
			modifiers := evt at: 5.
			^ evt ].	"Handle all events other than Keyborad or Mouse."
	^ evt
]

InputEventSensor >> processMenuEvent: evt
[
	| handler localCopyOfEvt |
	Smalltalk globals
		at: #HostSystemMenus
		ifPresent: [ :menus | localCopyOfEvt := evt shallowCopy.
			handler := (menus defaultMenuBarForWindowIndex: (localCopyOfEvt at: 8))
				getHandlerForMenu: (localCopyOfEvt at: 3)
				item: (localCopyOfEvt at: 4).
			handler handler value: localCopyOfEvt ]
]

InputEventSensor >> queueEvent: evt
[
	"Queue the given event in the event queue"

	eventQueue nextPut: evt
]

InputEventSensor >> redButtonPressed
[
	"Answer true if only the red mouse button is being pressed.
	This is the first mouse button, usually the left one."

	^ (self mouseButtons bitAnd: 7) = 4
]

InputEventSensor >> shiftPressed
[
	"Answer whether the shift key on the keyboard is being held down."

	^ self modifiers anyMask: 16r01
]

InputEventSensor >> shutDown
[
	
]

InputEventSensor >> someEventInQueue
[
	^ eventQueue isEmpty not
]

InputEventSensor >> startUp
[
	self initialize
]

InputEventSensor >> tabletExtent
[
	"Answer the full tablet extent in tablet coordinates."

	| params |
	params := self primTabletGetParameters: 1.
	params ifNil: [ ^ self error: 'no tablet available' ].
	^ (params at: 1) @ (params at: 2)
]

InputEventSensor >> tabletPoint
[
	"Answer the current position of the first tablet pointing device (pen, puck, or eraser) in tablet coordinates."

	| data |
	data := self primTabletRead: 1.	"state of first/primary pen"
	^ (data at: 3) @ (data at: 4)
]

InputEventSensor >> tabletPressure
[
	"Answer the current pressure of the first tablet pointing device (pen, puck, or eraser), a number between 0.0 (no pressure) and 1.0 (max pressure)"

	| params data |
	params := self primTabletGetParameters: 1.
	params ifNil: [ ^ self ].
	data := self primTabletRead: 1.	"state of first/primary pen"
	^ (data at: 10) asFloat / ((params at: 10) - 1)
]

InputEventSensor >> tabletTimestamp
[
	"Answer the time (in tablet clock ticks) at which the tablet's primary pen last changed state. This can be used in polling loops; if this timestamp hasn't changed, then the pen state hasn't changed either."

	| data |
	data := self primTabletRead: 1.	"state of first/primary pen"
	^ data at: 2
]

InputEventSensor >> waitButton
[
	"Wait for the user to press any mouse button and then answer with the 
	current location of the cursor."

	| delay |
	delay := Delay forMilliseconds: 50.
	[ self anyButtonPressed ] whileFalse: [ delay wait ].
	^ self cursorPoint
]

InputEventSensor >> waitButtonOrKeyboard
[
	"Wait for the user to press either any mouse button or any key. 
	Answer the current cursor location or nil if a keypress occured."

	| delay |
	delay := Delay forMilliseconds: 50.
	[ self anyButtonPressed ] whileFalse: [ delay wait.
			self keyboardPressed
				ifTrue: [ ^ nil ] ].
	^ self cursorPoint
]

InputEventSensor >> waitClickButton
[
	"Wait for the user to click (press and then release) any mouse button and 
	then answer with the current location of the cursor."

	self waitButton.
	^ self waitNoButton
]

InputEventSensor >> waitNoButton
[
	"Wait for the user to release any mouse button and then answer the current location of the cursor."

	| delay |
	delay := Delay forMilliseconds: 50.
	[ self anyButtonPressed ] whileTrue: [ delay wait ].
	^ self cursorPoint
]

InputEventSensor >> yellowButtonPressed
[
	"Answer whether only the yellow mouse button is being pressed. 
	This is the second mouse button or option+click on the Mac."

	^ (self mouseButtons bitAnd: 7) = 2
]

InputEventSensor class >> default
[
	"Answer the default system InputEventSensor, Sensor."

	^ Sensor
]

InputEventSensor class >> defaultCrossPlatformKeys
[
	"Answer a list of key letters that are used for common editing operations
	on different platforms."

	^ {$c.
	$x.
	$v.
	$a.
	$s.
	$f.
	$g.
	$z}
]

InputEventSensor class >> installEventSensorFramework
[
	"Installs the new sensor framework."

	"InputEventSensor installEventSensorFramework"

	self installEventSensorFramework: InputEventFetcher
]

InputEventSensor class >> installEventSensorFramework: fetcherClass
[
	"Installs the new sensor framework."

	| newSensor |
	"Do some extra cleanup"
	Smalltalk removeFromShutDownList: InputEventFetcher.
	Smalltalk removeFromStartUpList: InputEventFetcher.
	InputEventFetcher deinstall.
	newSensor := self new.
	fetcherClass install.
	newSensor registerIn: InputEventFetcher default.	"Shut down old sensor"
	Sensor shutDown.
	Smalltalk removeFromShutDownList: Sensor class.
	Smalltalk removeFromStartUpList: Sensor class.	"Note: We must use #become: here to replace all references to the old sensor with the new one, since Sensor is referenced from all the existing controllers."
	Sensor becomeForward: newSensor.	"done"	"Register the interrupt handler"
	UserInterruptHandler new registerIn: InputEventFetcher default.
	Smalltalk addToStartUpList: Sensor class after: fetcherClass.
	Smalltalk addToShutDownList: Sensor class after: Form	"Project spawnNewProcessAndTerminateOld: true"
]

InputEventSensor class >> installMouseDecodeTable
[
	"Create a decode table that swaps the lowest-order 2 bits"

	ButtonDecodeTable := self swapMouseButtons
		ifTrue: [ ByteArray
				withAll: ((0 to: 255) collect: [ :ea | ((ea bitAnd: 1) << 1 bitOr: (ea bitAnd: 2) >> 1) bitOr: (ea bitAnd: 16rFC) ]) ]
		ifFalse: [ ByteArray withAll: (0 to: 255) ]
]

InputEventSensor class >> shutDown
[
	self default shutDown
]

InputEventSensor class >> startUp
[
	self installMouseDecodeTable.
	self default startUp
]

InputEventSensor class >> swapMouseButtons
[
	^ Smalltalk os isWindows not
]

