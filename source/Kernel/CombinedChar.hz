CombinedChar
	instanceVariables: #(#codes #combined );
	classVariables: #(#Decompositions #Diacriticals #Compositions );
	package: #Kernel.

CombinedChar >> add: char
[
	| dict elem |
	codes ifNil: [ codes := Array with: char.
			combined := char.
			^ true ].
	dict := Compositions at: combined charCode ifAbsent: [ ^ false ].
	elem := dict at: char charCode ifAbsent: [ ^ false ].
	codes := codes copyWith: char.
	combined := Character leadingChar: self base leadingChar code: elem.
	^ true
]

CombinedChar >> base
[
	^ codes first
]

CombinedChar >> combined
[
	^ combined
]

CombinedChar >> combinesWith: char
[
	| dict |
	codes ifNil: [ ^ false ].
	dict := Compositions at: combined charCode ifAbsent: [ ^ false ].
	dict at: char charCode ifAbsent: [ ^ false ].
	^ true
]

CombinedChar >> simpleAdd: char
[
	| dict elem |
	codes ifNil: [ codes := Array with: char.
			combined := char.
			^ true ].
	dict := Compositions at: combined charCode ifAbsent: [ ^ false ].
	elem := dict at: char charCode ifAbsent: [ ^ false ].
	combined := Character leadingChar: self base leadingChar code: elem.
	codes at: 1 put: combined.
	^ true
]

CombinedChar class >> isCompositionCharacter: charCode
[
	^ Compositions includesKey: charCode
]

CombinedChar class >> isDiacriticals: unicode
[
	^ Diacriticals includes: unicode
]

