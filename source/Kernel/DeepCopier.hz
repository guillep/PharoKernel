DeepCopier
	instanceVariables: #(#references );
	package: #Kernel.

DeepCopier >> checkBasicClasses
[
	"Check that no indexes of instance vars have changed in certain classes.  If you get an error in this method, an implementation of veryDeepCopyWith: needs to be updated.  The idea is to catch a change while it is still in the system of the programmer who made it.  
	DeepCopier new checkVariables	"

	| str objCls morphCls |
	str := '|veryDeepCopyWith: or veryDeepInner: is out of date.'.
	Object instSize = 0
		ifFalse: [ self error: 'Many implementers of veryDeepCopyWith: are out of date' ]
]

DeepCopier >> checkClass: aClass
[
	| meth |
	"Check that no indexes of instance vars have changed in certain classes.  If you get an error in this method, an implementation of veryDeepCopyWith: needs to be updated.  The idea is to catch a change while it is still in the system of the programmer who made it."
	self checkBasicClasses.	"Unlikely, but important to catch when it does happen."	"Every class that implements veryDeepInner: must copy all its inst vars.  Danger is that a user will add a new instance variable and forget to copy it.  So check that the last one is mentioned in the copy method."
	(aClass includesSelector: #veryDeepInner:)
		ifTrue: [ ((aClass compiledMethodAt: #veryDeepInner:) writesField: aClass instSize)
				ifFalse: [ aClass instSize > 0
						ifTrue: [ self warnInstanceVariableNotCopiedIn: aClass selector: #veryDeepInner: ] ] ].
	(aClass includesSelector: #veryDeepCopyWith:)
		ifTrue: [ meth := aClass compiledMethodAt: #veryDeepCopyWith:.
			meth size > 20 & (meth literals includes: #veryDeepCopyWith:) not
				ifTrue: [ (meth writesField: aClass instSize)
						ifFalse: [ self warnInstanceVariableNotCopiedIn: aClass selector: #veryDeepCopyWith: ] ] ]
]

DeepCopier >> checkDeep
[
	"Write exceptions in the Transcript.  Every class that implements veryDeepInner: must copy all its inst vars.  Danger is that a user will add a new instance variable and forget to copy it.  This check is only run by hand once in a while to make sure nothing was forgotten.  
(Please do not remove this method.)
	DeepCopier new checkDeep 	"

	Transcript
		cr;
		show: 'Instance variables shared with the original object when it is copied'.
	(self systemNavigation allClassesImplementing: #veryDeepInner:)
		do: [ :aClass | | mm |
			(mm := aClass instVarNames size) > 0
				ifTrue: [ aClass instSize - mm + 1 to: aClass instSize do: [ :index | ((aClass compiledMethodAt: #veryDeepInner:) writesField: index)
							ifFalse: [ Transcript
									cr;
									show: aClass name;
									space;
									show: (aClass allInstVarNames at: index) ] ] ] ]
]

DeepCopier >> checkVariables
[
	"Check that no indexes of instance vars have changed in certain classes.  If you get an error in this method, an implementation of veryDeepCopyWith: needs to be updated.  The idea is to catch a change while it is still in the system of the programmer who made it.  
	DeepCopier new checkVariables	"

	self checkBasicClasses.	"Every class that implements veryDeepInner: must copy all its inst vars.  Danger is that a user will add a new instance variable and forget to copy it.  So check that the last one is mentioned in the copy method."
	(self systemNavigation allClassesImplementing: #veryDeepInner:)
		do: [ :aClass | ((aClass compiledMethodAt: #veryDeepInner:) writesField: aClass instSize)
				ifFalse: [ aClass instSize > 0
						ifTrue: [ self warnInstanceVariableNotCopiedIn: aClass selector: #veryDeepInner: ] ] ].
	(self systemNavigation allClassesImplementing: #veryDeepCopyWith:)
		do: [ :aClass | | meth |
			meth := aClass compiledMethodAt: #veryDeepCopyWith:.
			meth size > 20 & (meth literals includes: #veryDeepCopyWith:) not
				ifTrue: [ (meth writesField: aClass instSize)
						ifFalse: [ self warnInstanceVariableNotCopiedIn: aClass selector: #veryDeepCopyWith: ] ] ]
]

DeepCopier >> fixDependents
[
	"They are not used much, but need to be right"

	DependentsFields
		associationsDo: [ :pair | pair value
				do: [ :dep | (references at: dep ifAbsent: [ nil ])
						ifNotNil: [ :newDep | | newModel |
							newModel := references at: pair key ifAbsent: [ pair key ].
							newModel addDependent: newDep ] ] ]
]

DeepCopier >> initialize
[
	super initialize.
	self initialize: 4096
]

DeepCopier >> initialize: size
[
	references := IdentityDictionary new: size
]

DeepCopier >> references
[
	^ references
]

DeepCopier >> warnInstanceVariableNotCopiedIn: aClass selector: aSelector
[
	"Warn the user to update veryDeepCopyWith: or veryDeepInner:"

	self
		inform:
			('An instance variable was added to to class ' , aClass name , ',\and it is not copied in the method ' , aSelector
				, '.\Please rewrite it to handle all instance variables.\See DeepCopier class comment.') withCRs.
	(Smalltalk respondsTo: #tools)
		ifTrue: [ Smalltalk tools browser fullOnClass: aClass selector: aSelector ]
]

 variables.\See DeepCopier class comment.') withCRs.
	(Smalltalk respondsTo: #tools)
		ifTrue: [ Smalltalk tools browser fullOnClass: aClass selector: aSelector ]
]

