Duration
	superclass: #Magnitude;
	instanceVariables: #(#nanos #seconds );
	sharedPools: #(#ChronologyConstants );
	package: #Kernel.

Duration >> * operand
[
	"operand is a Number"

	^ self class nanoSeconds: (self asNanoSeconds * operand) asInteger
]

Duration >> + operand
[
	"operand is a Duration"

	^ self class nanoSeconds: self asNanoSeconds + operand asNanoSeconds
]

Duration >> - operand
[
	"operand is a Duration"

	^ self + operand negated
]

Duration >> / operand
[
	"operand is a Duration or a Number"

	^ operand isNumber
		ifTrue: [ self class nanoSeconds: (self asNanoSeconds / operand) asInteger ]
		ifFalse: [ self asNanoSeconds / operand asDuration asNanoSeconds ]
]

Duration >> // operand
[
	"operand is a Duration or a Number"

	^ operand isNumber
		ifTrue: [ self class nanoSeconds: (self asNanoSeconds // operand) asInteger ]
		ifFalse: [ self asNanoSeconds // operand asDuration asNanoSeconds ]
]

Duration >> < comparand
[
	^ self asNanoSeconds < comparand asNanoSeconds
]

Duration >> = comparand
[
	"Answer whether the argument is a <Duration> representing the same 
 	period of time as the receiver."

	^ self == comparand
		ifTrue: [ true ]
		ifFalse: [ self species = comparand species
				ifTrue: [ self asNanoSeconds = comparand asNanoSeconds ]
				ifFalse: [ false ] ]
]

Duration >> \\ operand
[
	"modulo. Remainder defined in terms of //. Answer a Duration with the 
 	same sign as aDuration. operand is a Duration or a Number."

	^ operand isNumber
		ifTrue: [ self class nanoSeconds: self asNanoSeconds \\ operand ]
		ifFalse: [ self - (operand * (self // operand)) ]
]

Duration >> abs
[
	^ self class seconds: seconds abs nanoSeconds: nanos abs
]

Duration >> asDays
[
	"Answer the number of days in the receiver."

	^ self asHours / 24
]

Duration >> asDelay
[
	^ Delay forDuration: self
]

Duration >> asDuration
[
	^ self
]

Duration >> asHours
[
	"Answer the number of hours in the receiver."

	^ self asMinutes / 60.0
]

Duration >> asMilliSeconds
[
	^ (seconds * NanosInSecond + nanos) // (10 raisedToInteger: 6)
]

Duration >> asMinutes
[
	"Answer the number of minutes in the receiver."

	^ seconds / 60.0
]

Duration >> asNanoSeconds
[
	^ seconds * NanosInSecond + nanos
]

Duration >> asSeconds
[
	"Answer the number of seconds in the receiver."

	^ seconds
]

Duration >> days
[
	"Answer a number that represents the number of complete days in the receiver"

	^ seconds quo: SecondsInDay
]

Duration >> hash
[
	^ seconds bitXor: nanos
]

Duration >> hours
[
	"Answer a number that represents the number of complete hours in the receiver, after the number of complete days has been removed."

	^ (seconds rem: SecondsInDay) quo: SecondsInHour
]

Duration >> initialize
[
	super initialize.
	self seconds: 0 nanoSeconds: 0
]

Duration >> isZero
[
	^ seconds = 0 and: [ nanos = 0 ]
]

Duration >> minutes
[
	"Answer a number that represents the number of complete minutes in the receiver, after the number of complete hours has been removed."

	^ (seconds rem: SecondsInHour) quo: SecondsInMinute
]

Duration >> nanoSeconds
[
	^ nanos
]

Duration >> negated
[
	^ self class seconds: seconds negated nanoSeconds: nanos negated
]

Duration >> negative
[
	^ self positive not
]

Duration >> positive
[
	^ seconds = 0
		ifTrue: [ nanos positive ]
		ifFalse: [ seconds positive ]
]

Duration >> printOn: aStream
[
	"Format as per ANSI 5.8.2.16: [-]D:HH:MM:SS[.S]"

	| d h m s n |
	d := self days abs.
	h := self hours abs.
	m := self minutes abs.
	s := self seconds abs truncated.
	n := self nanoSeconds abs.
	self negative
		ifTrue: [ aStream nextPut: $- ].
	d printOn: aStream.
	aStream nextPut: $:.
	h < 10
		ifTrue: [ aStream nextPut: $0 ].
	h printOn: aStream.
	aStream nextPut: $:.
	m < 10
		ifTrue: [ aStream nextPut: $0 ].
	m printOn: aStream.
	aStream nextPut: $:.
	s < 10
		ifTrue: [ aStream nextPut: $0 ].
	s printOn: aStream.
	n = 0
		ifFalse: [ | z ps |
			aStream nextPut: $..
			ps := n printString padLeftTo: 9 with: $0.
			z := ps findLast: [ :c | c asciiValue > $0 asciiValue ].
			ps from: 1 to: z do: [ :c | aStream nextPut: c ] ]
]

Duration >> roundTo: aDuration
[
	"e.g. if the receiver is 5 minutes, 37 seconds, and aDuration is 2 minutes, answer 6 minutes."

	^ self class nanoSeconds: (self asNanoSeconds roundTo: aDuration asNanoSeconds)
]

Duration >> seconds
[
	"Answer a number that represents the number of complete seconds in the receiver, after the number of complete minutes has been removed."

	^ seconds rem: SecondsInMinute
]

Duration >> seconds: secondCount nanoSeconds: nanoCount
[
	"Private - only used by Duration class"

	seconds := secondCount.
	nanos := nanoCount rounded.	"normalize if signs do not match"
	[ nanos < 0 and: [ seconds > 0 ] ] whileTrue: [ seconds := seconds - 1.
			nanos := nanos + NanosInSecond ].
	[ seconds < 0 and: [ nanos > 0 ] ] whileTrue: [ seconds := seconds + 1.
			nanos := nanos - NanosInSecond ]
]

Duration >> storeOn: aStream
[
	aStream
		nextPut: $(;
		nextPutAll: self className;
		nextPutAll: ' seconds: ';
		print: seconds;
		nextPutAll: ' nanoSeconds: ';
		print: nanos;
		nextPut: $)
]

Duration >> ticks
[
	"Answer an array {days. seconds. nanoSeconds}. Used by DateAndTime and Time."

	| days |
	days := self days.
	^ Array with: days with: seconds - (days * SecondsInDay) with: nanos
]

Duration >> truncateTo: aDuration
[
	"e.g. if the receiver is 5 minutes, 37 seconds, and aDuration is 2 minutes, answer 4 minutes."

	^ self class nanoSeconds: (self asNanoSeconds truncateTo: aDuration asNanoSeconds)
]

Duration >> wait
[
	self asDelay wait
]

Duration class >> days: aNumber
[
	^ self seconds: aNumber * SecondsInDay nanoSeconds: 0
]

Duration class >> days: days hours: hours minutes: minutes seconds: seconds
[
	^ self
		days: days
		hours: hours
		minutes: minutes
		seconds: seconds
		nanoSeconds: 0
]

Duration class >> days: days hours: hours minutes: minutes seconds: seconds nanoSeconds: nanos
[
	^ self
		seconds: days * SecondsInDay + (hours * SecondsInHour) + (minutes * SecondsInMinute) + seconds
		nanoSeconds: nanos
]

Duration class >> days: days seconds: seconds
[
	^ self basicNew seconds: days * SecondsInDay + seconds nanoSeconds: 0
]

Duration class >> fromString: aString
[
	^ self readFrom: aString readStream
]

Duration class >> hours: aNumber
[
	^ self seconds: aNumber * SecondsInHour nanoSeconds: 0
]

Duration class >> milliSeconds: milliCount
[
	^ self seconds: (milliCount quo: 1000) nanoSeconds: (milliCount rem: 1000) * NanosInMillisecond
]

Duration class >> minutes: aNumber
[
	^ self seconds: aNumber * SecondsInMinute nanoSeconds: 0
]

Duration class >> month: aMonth
[
	"aMonth is an Integer or a String"

	^ (Month month: aMonth) duration
]

Duration class >> nanoSeconds: nanos
[
	"This method is slow. If you have nanos less than 10^6 you should use #seconds:nanoSeconds: instead."

	| quo |
	quo := nanos quo: NanosInSecond.
	^ self basicNew seconds: quo nanoSeconds: nanos - (quo * NanosInSecond)
]

Duration class >> readFrom: aStream
[
	"Formatted as per ANSI 5.8.2.16: [-]D:HH:MM:SS[.S]"

	| sign days hours minutes seconds nanos nanosBuffer |
	sign := (aStream peekFor: $-)
		ifTrue: [ -1 ]
		ifFalse: [ 1 ].
	days := (aStream upTo: $:) asInteger sign: sign.
	hours := (aStream upTo: $:) asInteger sign: sign.
	minutes := (aStream upTo: $:) asInteger sign: sign.
	seconds := (aStream upTo: $.) asInteger sign: sign.
	nanosBuffer := '000000000' copy.
	nanos := nanosBuffer writeStream.
	[ aStream atEnd not and: [ aStream peek isDigit ] ] whileTrue: [ nanos nextPut: aStream next ].
	^ self
		days: days
		hours: hours
		minutes: minutes
		seconds: seconds
		nanoSeconds: (nanosBuffer asInteger sign: sign)
]

Duration class >> seconds: seconds
[
	^ self seconds: seconds nanoSeconds: 0
]

Duration class >> seconds: seconds nanoSeconds: nanos
[
	^ self basicNew seconds: seconds truncated nanoSeconds: seconds fractionPart * NanosInSecond + nanos
]

Duration class >> weeks: aNumber
[
	^ self days: aNumber * 7 seconds: 0
]

Duration class >> years: aNumber
[
	^ self days: aNumber * 365 seconds: 0
]

Duration class >> zero
[
	^ self basicNew seconds: 0 nanoSeconds: 0
]

