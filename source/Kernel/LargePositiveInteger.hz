LargePositiveInteger
	superclass: #LargeInteger;
	instanceSpecification: #(#variable #byte );
	package: #Kernel.

LargePositiveInteger >> abs
[abs
	
]

LargePositiveInteger >> bitAt: anInteger
[bitAt: anInteger
	"Optimize super algorithm to avoid long bit operations.
	Instead work on digits which are known to be SmallInteger and fast.
	Note that this algorithm does not work for negative integers."

	| digitIndex bitIndex |
	digitIndex := (anInteger - 1) // 8 + 1.
	digitIndex > self digitLength
		ifTrue: [ ^ 0 ].
	bitIndex := (anInteger - 1) \\ 8 + 1.
	^ (self digitAt: digitIndex) bitAt: bitIndex
]

LargePositiveInteger >> highBit
[highBit
	"Answer the index of the high order bit of the receiver, or zero if the  
	receiver is zero. Raise an error if the receiver is negative, since  
	negative integers are defined to have an infinite number of leading 1's 
	in 2's-complement arithmetic. Use >>highBitOfMagnitude if you want to  
	get the highest bit of the magnitude."

	^ self highBitOfMagnitude
]

LargePositiveInteger >> ln
[ln
	"This function is defined because super ln might overflow."

	| res h |
	res := super ln.
	res isFinite
		ifTrue: [ ^ res ].
	h := self highBit.
	^ 2 ln * h + (self / (1 << h)) asFloat ln
]

LargePositiveInteger >> log
[log
	"This function is defined because super log might overflow."

	| res h |
	res := super log.
	res isFinite
		ifTrue: [ ^ res ].
	h := self highBit.
	^ 2 log * h + (self / (1 << h)) asFloat log
]

LargePositiveInteger >> negated
[negated
	^ (self copyto: (LargeNegativeInteger new: self digitLength)) normalize	"Need to normalize to catch SmallInteger minVal"
]

LargePositiveInteger >> negative
[negative
	"Answer whether the receiver is mathematically negative."

	^ false
]

LargePositiveInteger >> normalize
[normalize
	"Check for leading zeroes and return shortened copy if so"

	<primitive: 'primNormalizePositive' module: 'LargeIntegers'>
	| sLen val len oldLen |
	len := oldLen := self digitLength.	"First establish len = significant length"
	[ len = 0
		ifTrue: [ ^ 0 ].
	(self digitAt: len) = 0 ] whileTrue: [ len := len - 1 ].	"Now check if in SmallInteger range"
	sLen := SmallInteger maxVal digitLength.
	(len <= sLen and: [ (self digitAt: sLen) <= (SmallInteger maxVal digitAt: sLen) ])
		ifTrue: [ "If so, return its SmallInt value"
			val := 0.
			len to: 1 by: -1 do: [ :i | val := val * 256 + (self digitAt: i) ].
			^ val ].	"Return self, or a shortened copy"
	len < oldLen
		ifTrue: [ ^ self growto: len ]
		ifFalse: [ ^ self ]
]

LargePositiveInteger >> positive
[positive
	"Answer whether the receiver is positive or equal to 0. (ST-80 protocol).
	See also strictlyPositive"

	^ true
]

LargePositiveInteger >> printOn: aStream base: b
[printOn: aStream base: b
	"Append a representation of this number in base b on aStream.
	In order to reduce cost of LargePositiveInteger ops, split the number in approximately two equal parts in number of digits."

	| halfDigits halfPower head tail nDigitsUnderestimate |
	"Don't engage any arithmetic if not normalized"
	(self digitLength = 0 or: [ (self digitAt: self digitLength) = 0 ])
		ifTrue: [ ^ self normalize printOn: aStream base: b ].
	nDigitsUnderestimate := b = 10
		ifTrue: [ ((self highBit - 1) * 1233 >> 12) + 1	"This is because (2 log)/(10 log)*4096 is slightly greater than 1233" ]
		ifFalse: [ self highBit quo: b highBit ].	"splitting digits with a whole power of two is more efficient"
	halfDigits := 1 bitShift: nDigitsUnderestimate highBit - 2.
	halfDigits <= 1
		ifTrue: [ "Hmmm, this could happen only in case of a huge base b... Let lower level fail"
			^ self printOn: aStream base: b nDigits: (self numberOfDigitsInBase: b) ].	"Separate in two halves, head and tail"
	halfPower := b raisedToInteger: halfDigits.
	head := self quo: halfPower.
	tail := self - (head * halfPower).	"print head"
	head printOn: aStream base: b.	"print tail without the overhead to count the digits"
	tail printOn: aStream base: b nDigits: halfDigits
]

LargePositiveInteger >> sign
[sign
	"Optimization. Answer 1 since receiver is greater than 0."

	^ 1
]

LargePositiveInteger >> sqrt
[sqrt
	"If we know for sure no exact solution exists, then just answer the cheap float approximation without wasting time."

	| selfAsFloat |
	self mightBeASquare
		ifFalse: [ selfAsFloat := self asFloat.
			selfAsFloat isFinite
				ifTrue: [ ^ self asFloat sqrt ] ].	"If some exact solution might exist, or self asFloat isInfinite, call potentially expensive super"
	^ super sqrt
]

LargePositiveInteger >> strictlyPositive
[strictlyPositive
	"Answer whether the receiver is mathematically positive."

	^ true
]

