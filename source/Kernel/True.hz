True
	superclass: #Boolean;
	package: #Kernel.

True >> & aBoolean
[
	"Evaluating conjunction -- answer aBoolean since receiver is true."

	^ aBoolean
]

True >> and: alternativeBlock
[
	"Nonevaluating conjunction -- answer the value of alternativeBlock since
	the receiver is true."

	^ alternativeBlock value
]

True >> asBit
[
	^ 1
]

True >> ifFalse: alternativeBlock
[
	"Since the condition is true, the value is the true alternative, which is nil. 
	Execution does not actually reach here because the expression is compiled 
	in-line."

	^ nil
]

True >> ifFalse: falseAlternativeBlock ifTrue: trueAlternativeBlock
[
	"Answer the value of trueAlternativeBlock. Execution does not 
	actually reach here because the expression is compiled in-line."

	^ trueAlternativeBlock value
]

True >> ifTrue: alternativeBlock
[
	"Answer the value of alternativeBlock. Execution does not actually 
	reach here because the expression is compiled in-line."

	^ alternativeBlock value
]

True >> ifTrue: trueAlternativeBlock ifFalse: falseAlternativeBlock
[
	"Answer with the value of trueAlternativeBlock. Execution does not 
	actually reach here because the expression is compiled in-line."

	^ trueAlternativeBlock value
]

True >> not
[
	"Negation--answer false since the receiver is true."

	^ false
]

True >> or: alternativeBlock
[
	"Nonevaluating disjunction -- answer true since the receiver is true."

	^ self
]

True >> printOn: aStream
[
	aStream nextPutAll: 'true'
]

True >> xor: aBoolean
[
	^ aBoolean value not
]

True >> | aBoolean
[
	"Evaluating disjunction (OR) -- answer true since the receiver is true."

	^ self
]

