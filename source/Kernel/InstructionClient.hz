InstructionClient
	package: #Kernel.

InstructionClient >> blockReturnTop
[blockReturnTop
	"Return Top Of Stack bytecode."

	
]

InstructionClient >> doDup
[doDup
	"Duplicate Top Of Stack bytecode."

	
]

InstructionClient >> doPop
[doPop
	"Remove Top Of Stack bytecode."

	
]

InstructionClient >> jump: offset
[jump: offset
	"Unconditional Jump bytecode."

	
]

InstructionClient >> jump: offset if: condition
[jump: offset if: condition
	"Conditional Jump bytecode."

	
]

InstructionClient >> methodReturnConstant: value
[methodReturnConstant: value
	"Return Constant bytecode."

	
]

InstructionClient >> methodReturnReceiver
[methodReturnReceiver
	"Return Self bytecode."

	
]

InstructionClient >> methodReturnTop
[methodReturnTop
	"Return Top Of Stack bytecode."

	
]

InstructionClient >> popIntoLiteralVariable: anAssociation
[popIntoLiteralVariable: anAssociation
	"Remove Top Of Stack And Store Into Literal Variable bytecode."

	
]

InstructionClient >> popIntoReceiverVariable: offset
[popIntoReceiverVariable: offset
	"Remove Top Of Stack And Store Into Instance Variable bytecode."

	
]

InstructionClient >> popIntoRemoteTemp: remoteTempIndex inVectorAt: tempVectorIndex
[popIntoRemoteTemp: remoteTempIndex inVectorAt: tempVectorIndex
	"Remove Top Of Stack And Store Into Offset of Temp Vector bytecode."

	
]

InstructionClient >> popIntoTemporaryVariable: offset
[popIntoTemporaryVariable: offset
	"Remove Top Of Stack And Store Into Temporary Variable bytecode."

	
]

InstructionClient >> pushActiveContext
[pushActiveContext
	"Push Active Context On Top Of Its Own Stack bytecode."

	
]

InstructionClient >> pushClosureCopyNumCopiedValues: numCopied numArgs: numArgs blockSize: blockSize
[pushClosureCopyNumCopiedValues: numCopied numArgs: numArgs blockSize: blockSize
	"Push Closure bytecode."

	
]

InstructionClient >> pushConsArrayWithElements: numElements
[pushConsArrayWithElements: numElements
	"Push Cons Array of size numElements popping numElements items from the stack into the array bytecode."

	
]

InstructionClient >> pushConstant: value
[pushConstant: value
	"Push Constant, value, on Top Of Stack bytecode."

	
]

InstructionClient >> pushLiteralVariable: anAssociation
[pushLiteralVariable: anAssociation
	"Push Contents Of anAssociation On Top Of Stack bytecode."

	
]

InstructionClient >> pushNewArrayOfSize: numElements
[pushNewArrayOfSize: numElements
	"Push New Array of size numElements bytecode."

	
]

InstructionClient >> pushReceiver
[pushReceiver
	"Push Active Context's Receiver on Top Of Stack bytecode."

	
]

InstructionClient >> pushReceiverVariable: offset
[pushReceiverVariable: offset
	"Push Contents Of the Receiver's Instance Variable Whose Index 
	is the argument, offset, On Top Of Stack bytecode."

	
]

InstructionClient >> pushRemoteTemp: remoteTempIndex inVectorAt: tempVectorIndex
[pushRemoteTemp: remoteTempIndex inVectorAt: tempVectorIndex
	"Push Contents at Offset in Temp Vector bytecode."

	
]

InstructionClient >> pushTemporaryVariable: offset
[pushTemporaryVariable: offset
	"Push Contents Of Temporary Variable Whose Index Is the 
	argument, offset, On Top Of Stack bytecode."

	
]

InstructionClient >> send: selector super: supered numArgs: numberArguments
[send: selector super: supered numArgs: numberArguments
	"Send Message With Selector, selector, bytecode. The argument, 
	supered, indicates whether the receiver of the message is specified with 
	'super' in the source method. The arguments of the message are found in 
	the top numArguments locations on the stack and the receiver just 
	below them."

	
]

InstructionClient >> storeIntoLiteralVariable: anAssociation
[storeIntoLiteralVariable: anAssociation
	"Store Top Of Stack Into Literal Variable Of Method bytecode."

	
]

InstructionClient >> storeIntoReceiverVariable: offset
[storeIntoReceiverVariable: offset
	"Store Top Of Stack Into Instance Variable Of Method bytecode."

	
]

InstructionClient >> storeIntoRemoteTemp: remoteTempIndex inVectorAt: tempVectorIndex
[storeIntoRemoteTemp: remoteTempIndex inVectorAt: tempVectorIndex
	"Store Top Of Stack And Store Into Offset of Temp Vector bytecode."

	
]

InstructionClient >> storeIntoTemporaryVariable: offset
[storeIntoTemporaryVariable: offset
	"Store Top Of Stack Into Temporary Variable Of Method bytecode."

	
]

