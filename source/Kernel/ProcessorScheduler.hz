ProcessorScheduler
	instanceVariables: #(#quiescentProcessLists #activeProcess );
	classVariables: #(#TimingPriority #LowIOPriority #SystemBackgroundPriority #UserBackgroundPriority #BackgroundProcess #SystemRockBottomPriority #UserSchedulingPriority #HighIOPriority #UserInterruptPriority );
	package: #Kernel.

ProcessorScheduler >> activePriority
[
	"Answer the priority level of the currently running Process."

	^ activeProcess priority
]

ProcessorScheduler >> activeProcess
[
	"Answer the currently running Process."

	^ activeProcess
]

ProcessorScheduler >> anyProcessesAbove: highestPriority
[
	"Do any instances of Process exist with higher priorities?"

	^ (Process allInstances select: [ :aProcess | aProcess priority > highestPriority ]) isEmpty	"allSubInstances"	"If anyone ever makes a subclass of Process, be sure to use allSubInstances."
]

ProcessorScheduler >> initProcessLists
[
	quiescentProcessLists := (1 to: 80) collect: [ :index | LinkedList new ]
]

ProcessorScheduler >> backgroundProcess
[
	"Answer the background process"

	^ BackgroundProcess
]

ProcessorScheduler >> highIOPriority
[
	"Answer the priority at which the most time critical input/output 
	processes should run. An example is the process handling input from a 
	network."

	^ HighIOPriority
]

ProcessorScheduler >> highestPriority
[
	"Answer the number of priority levels currently available for use."

	^ quiescentProcessLists size
]

ProcessorScheduler >> highestPriority: newHighestPriority
[
	"Change the number of priority levels currently available for use."

	| continue newProcessLists |
	(quiescentProcessLists size > newHighestPriority and: [ self anyProcessesAbove: newHighestPriority ])
		ifTrue: [ self error: 'There are processes with priority higher than ' , newHighestPriority printString ].
	newProcessLists := Array new: newHighestPriority.
	1 to: (quiescentProcessLists size min: newProcessLists size) do: [ :priority | newProcessLists at: priority put: (quiescentProcessLists at: priority) ].
	quiescentProcessLists size to: newProcessLists size do: [ :priority | newProcessLists at: priority put: LinkedList new ].
	quiescentProcessLists := newProcessLists
]

ProcessorScheduler >> isSelfEvaluating
[
	^ self == Processor
]

ProcessorScheduler >> lowIOPriority
[
	"Answer the priority at which most input/output processes should run. 
	Examples are the process handling input from the user (keyboard, 
	pointing device, etc.) and the process distributing input from a network."

	^ LowIOPriority
]

ProcessorScheduler >> lowestPriority
[
	"Return the lowest priority that is allowed with the scheduler"

	^ SystemRockBottomPriority
]

ProcessorScheduler >> nextReadyProcess
[
	quiescentProcessLists
		reverseDo: [ :list | list isEmpty
				ifFalse: [ | proc |
					proc := list first.
					proc suspendedContext ifNotNil: [ ^ proc ] ] ].
	^ nil
]

ProcessorScheduler >> preemptedProcess
[
	"Return the process that the currently active process just preempted."

	| list |
	activeProcess priority to: 1 by: -1 do: [ :priority | list := quiescentProcessLists at: priority.
		list isEmpty
			ifFalse: [ ^ list last ] ].
	^ nil	"Processor preemptedProcess"
]

ProcessorScheduler >> printOn: aStream
[
	self isSelfEvaluating
		ifFalse: [ ^ super printOn: aStream ].
	aStream nextPutAll: #Processor
]

ProcessorScheduler >> remove: aProcess ifAbsent: aBlock
[
	"Remove aProcess from the list on which it is waiting for the processor 
	and answer aProcess. If it is not waiting, evaluate aBlock."

	(quiescentProcessLists at: aProcess priority) remove: aProcess ifAbsent: aBlock.
	^ aProcess
]

ProcessorScheduler >> scanSchedule: aBlock startingAt: topPriority
[
	"Iterate over scheduled processes  list, starting from topPriority down to lowest one. "

	topPriority to: 1 by: -1 do: [ :priority | | list |
		list := quiescentProcessLists at: priority.
		list do: [ :proc | aBlock value: proc ] ]
]

ProcessorScheduler >> suspendFirstAt: aPriority
[
	"Suspend the first Process that is waiting to run with priority aPriority."

	^ self suspendFirstAt: aPriority ifNone: [ self error: 'No Process to suspend' ]
]

ProcessorScheduler >> suspendFirstAt: aPriority ifNone: noneBlock
[
	"Suspend the first Process that is waiting to run with priority aPriority. If 
	no Process is waiting, evaluate the argument, noneBlock."

	| aList |
	aList := quiescentProcessLists at: aPriority.
	aList isEmpty
		ifTrue: [ ^ noneBlock value ]
		ifFalse: [ ^ aList first suspend ]
]

ProcessorScheduler >> systemBackgroundPriority
[
	"Answer the priority at which system background processes should run. 
	Examples are an incremental garbage collector or status checker."

	^ SystemBackgroundPriority
]

ProcessorScheduler >> tallyCPUUsageFor: seconds
[
	"Start a high-priority process that will tally the next ready process for the given
	number of seconds. Answer a Block that will return the tally (a Bag) after the task
	is complete"

	^ self tallyCPUUsageFor: seconds every: 10
]

ProcessorScheduler >> tallyCPUUsageFor: seconds every: msec
[
	"Start a high-priority process that will tally the next ready process for the given
	number of seconds. Answer a Block that will return the tally (a Bag) after the task
	is complete"

	| tally sem delay endDelay |
	tally := IdentityBag new: 200.
	delay := Delay forMilliseconds: msec truncated.
	endDelay := Delay forSeconds: seconds.
	endDelay schedule.
	sem := Semaphore new.
	[ [ endDelay isExpired ] whileFalse: [ delay wait.
			tally add: Processor nextReadyProcess ].
	sem signal ]
		forkAt: self highestPriority.
	^ [ sem wait.
	tally ]
]

ProcessorScheduler >> terminateActive
[
	"Terminate the process that is currently running."

	activeProcess terminate
]

ProcessorScheduler >> timingPriority
[
	"Answer the priority at which the system processes keeping track of real 
	time should run."

	^ TimingPriority
]

ProcessorScheduler >> userBackgroundPriority
[
	"Answer the priority at which user background processes should run."

	^ UserBackgroundPriority
]

ProcessorScheduler >> userInterruptPriority
[
	"Answer the priority at which user processes desiring immediate service 
	should run. Processes run at this level will preempt the window 
	scheduler and should, therefore, not consume the processor forever."

	^ UserInterruptPriority
]

ProcessorScheduler >> userSchedulingPriority
[
	"Answer the priority at which the window scheduler should run."

	^ UserSchedulingPriority
]

ProcessorScheduler >> waitingProcessesAt: aPriority
[
	"Return the list of processes at the given priority level."

	^ quiescentProcessLists at: aPriority
]

ProcessorScheduler >> yield
[
	"Give other Processes at the current priority a chance to run."

	<primitive: 167>
	| semaphore |
	semaphore := Semaphore new.
	[ semaphore signal ] fork.
	semaphore wait
]

ProcessorScheduler class >> idleProcess
[
	"A default background process which is invisible."

	[ true ] whileTrue: [ self relinquishProcessorForMicroseconds: 1000 ]
]

ProcessorScheduler class >> initialize
[
	SystemRockBottomPriority := 10.
	SystemBackgroundPriority := 20.
	UserBackgroundPriority := 30.
	UserSchedulingPriority := 40.
	UserInterruptPriority := 50.
	LowIOPriority := 60.
	HighIOPriority := 70.
	TimingPriority := 80	"ProcessorScheduler initialize."
]

ProcessorScheduler class >> new
[
	"New instances of ProcessorScheduler should not be created."

	self
		error:
			'New ProcessSchedulers should not be created sincethe integrity of the system depends on a unique scheduler'
]

ProcessorScheduler class >> relinquishProcessorForMicroseconds: anInteger
[
	"Platform specific. This primitive is used to return processor cycles to the host operating system when Pharo's idle process is running (i.e., when no other Pharo process is runnable). On some platforms, this primitive causes the entire Pharo application to sleep for approximately the given number of microseconds. No Pharo process can run while the Pharo application is sleeping, even if some external event makes it runnable. On the Macintosh, this primitive simply calls GetNextEvent() to give other applications a chance to run. On platforms without a host operating system, it does nothing. This primitive should not be used to add pauses to a Pharo process; use a Delay instead."

	"don't fail if primitive is not implemented, just do nothing"

	<primitive: 230>
	
]

ProcessorScheduler class >> startUp
[
	"Install a background process of the lowest possible priority that is always runnable."

	"Details: The virtual machine requires that there is aways some runnable process that can be scheduled; this background process ensures that this is the case."

	Smalltalk installLowSpaceWatcher.
	BackgroundProcess ifNotNil: [ BackgroundProcess terminate ].
	BackgroundProcess := [ self idleProcess ] newProcess.
	BackgroundProcess priority: SystemRockBottomPriority.
	BackgroundProcess name: 'Idle Process'.
	BackgroundProcess resume
]

