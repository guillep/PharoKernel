MonitorDelay
	superclass: #Delay;
	instanceVariables: #(#monitor #queue );
	package: #Kernel.

MonitorDelay >> setDelay: anInteger forSemaphore: aSemaphore monitor: aMonitor queue: anOrderedCollection
setDelay: anInteger forSemaphore: aSemaphore monitor: aMonitor queue: anOrderedCollection
	monitor := aMonitor.
	queue := anOrderedCollection.
	self setDelay: anInteger forSemaphore: aSemaphore

MonitorDelay >> signalWaitingProcess
signalWaitingProcess
	"The delay time has elapsed; signal the waiting process."

	beingWaitedOn := false.
	monitor signalLock: delaySemaphore inQueue: queue

MonitorDelay class >> signalLock: aSemaphore afterMSecs: anInteger inMonitor: aMonitor queue: anOrderedCollection
signalLock: aSemaphore afterMSecs: anInteger inMonitor: aMonitor queue: anOrderedCollection
	anInteger < 0
		ifTrue: [ self error: 'delay times cannot be negative' ].
	^ (self new
		setDelay: anInteger
		forSemaphore: aSemaphore
		monitor: aMonitor
		queue: anOrderedCollection) schedule

