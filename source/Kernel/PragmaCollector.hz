PragmaCollector
	instanceVariables: #(#announcer #collected #filter );
	package: #Kernel.

PragmaCollector >> addPragma: aPragma
[
	"if aPragma is to be kept, then add it and announce its adding"

	(self keepPragma: aPragma)
		ifTrue: [ self collected add: aPragma.
			self announce: (PragmaAdded pragma: aPragma) ]
]

PragmaCollector >> addedEventOccurs: anEvent
[
	"method adding event occured: if the 
	concerned method contains a pragma then 
	try to update myself with it"

	Pragma
		withPragmasIn: anEvent methodClass
		do: [ :pragma | pragma selector = anEvent selector
				ifTrue: [ self addPragma: pragma ] ]
]

PragmaCollector >> announce: anAnnouncement
[
	"see Announcements packages"

	self announcer ifNotNil: [ announcer announce: anAnnouncement ]
]

PragmaCollector >> announcer
[
	^ announcer
]

PragmaCollector >> classRemovedEventOccurs: anEvent
[
	"a class has been removed: first see if the class is not my class
	because then I must be unplugged from system event notifications"

	anEvent classRemoved = self class
		ifTrue: [ ^ self noMoreNotifications ].	"remove all handler which are from the removed class"
	(self pragmasOfClass: anEvent classRemoved class) do: [ :handler | self removePragma: handler ]
]

PragmaCollector >> collect: aBlock
[
	^ self collected collect: aBlock
]

PragmaCollector >> collected
[
	^ collected ifNil: [ collected := OrderedCollection new ]
]

PragmaCollector >> detect: aBlock
[
	^ self collected detect: aBlock ifNone: [  ]
]

PragmaCollector >> do: aBlock
[
	self collected do: aBlock
]

PragmaCollector >> filter
[
	^ filter ifNil: [ filter := [ :prg | true ] ]
]

PragmaCollector >> filter: aOneArgValuable
[
	filter := aOneArgValuable
]

PragmaCollector >> ifNotEmpty: aBlock
[
	self collected ifNotEmpty: aBlock
]

PragmaCollector >> initialize
[
	super initialize.
	announcer := Announcer new.
	self installSystemNotifications
]

PragmaCollector >> installSystemNotifications
[
	"Allows myself to be kept up-to-date regarding system changes"

	SystemAnnouncer uniqueInstance unsubscribe: self.
	SystemAnnouncer uniqueInstance weak
		on: ClassRemoved send: #classRemovedEventOccurs: to: self;
		on: MethodRemoved send: #removedEventOccurs: to: self;
		on: MethodAdded send: #addedEventOccurs: to: self;
		on: MethodModified send: #modifiedEventOccurs: to: self
]

PragmaCollector >> isEmpty
[
	^ self collected isEmpty
]

PragmaCollector >> isNotEmpty
[
	^ self collected isNotEmpty
]

PragmaCollector >> keepPragma: aPragma
[
	^ self filter value: aPragma
]

PragmaCollector >> modifiedEventOccurs: anEvent
[
	"
	a method has been updated: try to update an handler:
	1 - I already have one for the method, then
	do nothing, 
	2 - I do not have one but method has an acceptable
	pragma in it, then I try to add a new handler
	3 - I have one but changed method has no more
	acceptable pragma in it, then the handler is removed.
	"

	Pragma
		withPragmasIn: anEvent methodClass
		do: [ :pragma | pragma selector = anEvent selector
				ifTrue: [ (self detect: [ :oldprag | oldprag selector = pragma selector and: [ oldprag methodClass = anEvent methodClass ] ])
						ifNotNil: [ :oldprag | ^ self updatePragma: oldprag ].
					^ self addPragma: pragma ] ].	"No pragma but an handler for the method"
	(self pragmaWithSelector: anEvent selector inClass: anEvent methodClass)
		ifNotNil: [ :found | self removePragma: found ]
]

PragmaCollector >> noMoreAnnounceWhile: aBlock
[
	"unplug the announcer during aBlock"

	| oldAnnouncer |
	[ oldAnnouncer := announcer.
	announcer := nil.
	aBlock value ]
		ensure: [ announcer := oldAnnouncer ]
]

PragmaCollector >> noMoreNotifications
[
	"Do not receiver any system change notification anymore"

	SystemAnnouncer uniqueInstance unsubscribe: self
]

PragmaCollector >> noMoreNotificationsWhile: aBlock
[
	"don not receive any system change notification during aBloc"

	self noMoreNotifications.
	[ aBlock value ]
		ensure: [ self installSystemNotifications ]
]

PragmaCollector >> noneSatisfy: aBlock
[
	^ self collected noneSatisfy: aBlock
]

PragmaCollector >> pragmaWithSelector: aSelector inClass: aClass
[
	"return the handler corresponding to a pragma method which selector is aSelector in class aClass"

	^ self detect: [ :prag | prag methodClass = aClass and: [ prag selector = aSelector ] ]
]

PragmaCollector >> pragmasOfClass: aClass
[
	"return all handlers of class aClass"

	^ self select: [ :prag | prag methodClass = aClass ]
]

PragmaCollector >> reject: aBlock
[
	^ self collected reject: aBlock
]

PragmaCollector >> release
[
	self noMoreNotifications.
	announcer := nil.
	collected := nil.
	super release
]

PragmaCollector >> removePragma: aPragma
[
	"remove an handler an announce it"

	self collected remove: aPragma ifAbsent: [  ].
	self announce: (PragmaRemoved pragma: aPragma)
]

PragmaCollector >> removedEventOccurs: anEvent
[
	"a method has been removed, remove any corresponding handler if found"

	(self detect: [ :prag | prag selector = anEvent selector and: [ prag methodClass = anEvent methodClass ] ])
		ifNotNil: [ :found | self removePragma: found ]
]

PragmaCollector >> reset
[
	"reinitialize current system settings"

	self
		noMoreAnnounceWhile: [ self collected copy do: [ :pragma | self removePragma: pragma ].
			self class allSystemPragmas do: [ :pragma | self addPragma: pragma ] ].
	self announce: (PragmaCollectorReset collector: self)
]

PragmaCollector >> select: aBlock
[
	^ self collected select: aBlock
]

PragmaCollector >> subscribe: anAnnouncement send: aSelector to: anObject
[
	"see Announcements packages"

	self announcer subscribe: anAnnouncement send: aSelector to: anObject
]

PragmaCollector >> unsubscribe: anObject
[
	"see Announcements packages"

	self announcer unsubscribe: anObject
]

PragmaCollector >> updatePragma: aPragma
[
	"only announce that the pragma has been updated"

	self announcer announce: (PragmaUpdated pragma: aPragma)
]

PragmaCollector >> whenChangedSend: aSelector to: anObject
[
	"record a change listener"

	self subscribe: PragmaAnnouncement send: aSelector to: anObject
]

PragmaCollector >> whenResetSend: aSelector to: anObject
[
	"record a change listener"

	self subscribe: PragmaCollectorReset send: aSelector to: anObject
]

PragmaCollector class >> allSystemPragmas
[
	^ Array
		streamContents: [ :stream | SystemNavigation new
				allBehaviorsDo: [ :behavior | Pragma withPragmasIn: behavior do: [ :pragma | stream nextPut: pragma ] ] ]
]

PragmaCollector class >> filter: aOneArgValuable
[
	^ self new filter: aOneArgValuable
]

Updated pragma: aPragma)
]

PragmaCollector >> whenChangedSend: aSelector to: anObject
[whenChangedSend: aSelector to: anObject
	"record a change listener"

	self subscribe: PragmaAnnouncement send: aSelector to: anObject
]

PragmaCollector >> whenResetSend: aSelector to: anObject
[whenResetSend: aSelector to: anObject
	"record a change listener"

	self subscribe: PragmaCollectorReset send: aSelector to: anObject
]

PragmaCollector class >> allSystemPragmas
[allSystemPragmas
	^ Array
		streamContents: [ :stream | SystemNavigation new
				allBehaviorsDo: [ :behavior | Pragma withPragmasIn: behavior do: [ :pragma | stream nextPut: pragma ] ] ]
]

PragmaCollector class >> filter: aOneArgValuable
[filter: aOneArgValuable
	^ self new filter: aOneArgValuable
]

