Metaclass
	superclass: #ClassDescription;
	traitComposition: TApplyingOnClassSide;
	instanceVariables: #(#thisClass #traitComposition #localSelectors );
	package: #Kernel.

Metaclass >> adoptInstance: oldInstance from: oldMetaClass
[
	"Recreate any existing instances of the argument, oldClass, as instances of 
	the receiver, which is a newly changed class. Permute variables as 
	necessary."

	thisClass class == self
		ifTrue: [ ^ self error: 'Metaclasses have only one instance' ].
	oldMetaClass isMeta
		ifFalse: [ ^ self error: 'Argument must be Metaclass' ].
	oldInstance class == oldMetaClass
		ifFalse: [ ^ self error: 'Not the class of argument' ].
	^ thisClass := self
		newInstanceFrom: oldInstance
		variable: self isVariable
		size: self instSize
		map: (self instVarMappingFrom: oldMetaClass)
]

Metaclass >> baseClass
[
	^ thisClass
]

Metaclass >> basicLocalSelectors
[
	"Direct accessor for the instance variable localSelectors.
	Since localSelectors is lazily initialized, this may 
	return nil, which means that all selectors are local."

	^ localSelectors
]

Metaclass >> basicLocalSelectors: aSetOrNil
[
	localSelectors := aSetOrNil
]

Metaclass >> classClass
[
	^ self
]

Metaclass >> definition
[
	"Refer to the comment in ClassDescription|definition."

	^ String
		streamContents: [ :strm | strm print: self.
			(self hasTraitComposition and: [ self traitComposition notEmpty ])
				ifTrue: [ strm
						crtab;
						nextPutAll: 'uses: ';
						print: self traitComposition ].
			strm
				crtab;
				nextPutAll: 'instanceVariableNames: ';
				store: self instanceVariablesString ]
]

Metaclass >> environment
[
	^ thisClass environment
]

Metaclass >> fileOutOn: aFileStream moveSource: moveSource toFile: fileIndex
[
	^ self
		fileOutOn: aFileStream
		moveSource: moveSource
		toFile: fileIndex
		initializing: true
]

Metaclass >> fileOutOn: aFileStream moveSource: moveSource toFile: fileIndex initializing: aBool
[
	super fileOutOn: aFileStream moveSource: moveSource toFile: fileIndex.
	(aBool and: [ moveSource not and: [ self includesSelector: #initialize ] ])
		ifTrue: [ aFileStream cr.
			aFileStream cr.
			aFileStream nextChunkPut: thisClass name , ' initialize'.
			aFileStream cr ]
]

Metaclass >> instanceVariableNames: instVarString
[
	"Declare additional named variables for my instance."

	^ thisClass classBuilder class: self instanceVariableNames: instVarString
]

Metaclass >> isClass
[
	^ true
]

Metaclass >> name
[
	"Answer a String that is the name of the receiver, either 'Metaclass' or 
	the name of the receiver's class followed by ' class'."

	thisClass == nil
		ifTrue: [ ^ 'a Metaclass' ]
		ifFalse: [ ^ thisClass name , ' class' ]
]

Metaclass >> new
[
	"The receiver can only have one instance. Create it or complain that
	one already exists."

	thisClass class ~~ self
		ifTrue: [ ^ thisClass := self basicNew ]
		ifFalse: [ self error: 'A Metaclass should only have one instance!' ]
]

Metaclass >> postCopy
[
	"Don't share the reference to the sole instance."

	super postCopy.
	thisClass := nil
]

Metaclass >> soleInstance
[
	"The receiver has only one instance. Answer it."

	^ thisClass
]

Metaclass >> traitComposition
[
	traitComposition ifNil: [ traitComposition := TraitComposition new ].
	^ traitComposition
]

Metaclass >> traitComposition: aTraitComposition
[
	traitComposition := aTraitComposition
]

Metaclass >> veryDeepCopyWith: deepCopier
[
	"Return self.  Must be created, not copied.  Do not record me."

	
]

	^ thisClass
]

Metaclass >> traitComposition
[traitComposition
	traitComposition ifNil: [ traitComposition := TraitComposition new ].
	^ traitComposition
]

Metaclass >> traitComposition: aTraitComposition
[traitComposition: aTraitComposition
	traitComposition := aTraitComposition
]

Metaclass >> veryDeepCopyWith: deepCopier
[veryDeepCopyWith: deepCopier
	"Return self.  Must be created, not copied.  Do not record me."

	
]

