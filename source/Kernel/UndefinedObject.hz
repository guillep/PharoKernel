UndefinedObject
	package: #Kernel.

UndefinedObject >> addDependent: ignored
[
	"Refer to the comment in Object|dependents."

	self error: 'Nil should not have dependents'
]

UndefinedObject >> addSubclass: aClass
[
	"Ignored -- necessary to support disjoint class hierarchies"

	
]

UndefinedObject >> allSuperclassesDo: aBlockContext
[
	"Ignored -- necessary to support disjoint class hierarchies"

	
]

UndefinedObject >> asSetElement
[
	"Since nil is a singleton, we need only a single wrapper instance to represent it in set,
	created in advance"

	^ SetElement withNil
]

UndefinedObject >> canHandleSignal: exception
[
	"When no more handler (on:do:) context left in sender chain this gets called"

	^ false
]

UndefinedObject >> classBuilder
[
	"Answer the object responsible of creating classes in the system."

	^ OldClassBuilderAdapter new
]

UndefinedObject >> deepCopy
[
	"Only one instance of UndefinedObject should ever be made, so answer 
	with self."

	
]

UndefinedObject >> environment
[
	"Necessary to support disjoint class hierarchies."

	^ self class environment
]

UndefinedObject >> haltIfNil
[
	self halt
]

UndefinedObject >> handleSignal: exception
[
	"When no more handler (on:do:) context left in sender chain this gets called.  Return from signal with default action."

	^ exception resumeUnchecked: exception defaultAction
]

UndefinedObject >> ifNil: aBlock
[
	"A convenient test, in conjunction with Object ifNil:"

	^ aBlock value
]

UndefinedObject >> ifNil: nilBlock ifNotNil: ifNotNilBlock
[
	"Evaluate the block for nil because I'm == nil"

	^ nilBlock value
]

UndefinedObject >> ifNil: nilBlock ifNotNilDo: ifNotNilBlock
[
	"please use #ifNil:ifNotNil: "

	^ nilBlock value
]

UndefinedObject >> ifNotNil: aBlock
[
	"A convenient test, in conjunction with Object ifNotNil:"

	^ self
]

UndefinedObject >> ifNotNil: ifNotNilBlock ifNil: nilBlock
[
	"If I got here, I am nil, so evaluate the block nilBlock"

	^ nilBlock value
]

UndefinedObject >> ifNotNilDo: aBlock
[
	"Please use #ifNotNil: instead"

	^ self
]

UndefinedObject >> ifNotNilDo: ifNotNilBlock ifNil: nilBlock
[
	"please use #ifNotNil:ifNil: "

	^ nilBlock value
]

UndefinedObject >> isEmptyOrNil
[
	"Answer whether the receiver contains any elements, or is nil.  Useful in numerous situations where one wishes the same reaction to an empty collection or to nil"

	^ true
]

UndefinedObject >> isLiteral
[
	^ true
]

UndefinedObject >> isNil
[
	"Refer to the comment in Object|isNil."

	^ true
]

UndefinedObject >> isNotNil
[
	"Refer to the comment in Object|isNotNil."

	^ false
]

UndefinedObject >> literalScannedAs: scannedLiteral notifying: requestor
[
	^ scannedLiteral
]

UndefinedObject >> notNil
[
	"Refer to the comment in Object|notNil."

	^ false
]

UndefinedObject >> printOn: aStream
[
	"Refer to the comment in Object|printOn:."

	aStream nextPutAll: 'nil'
]

UndefinedObject >> release
[
	"Nil release is a no-op"

	
]

UndefinedObject >> removeSubclass: aClass
[
	"Ignored -- necessary to support disjoint class hierarchies"

	
]

UndefinedObject >> shallowCopy
[
	"Only one instance of UndefinedObject should ever be made, so answer 
	with self."

	
]

UndefinedObject >> storeOn: aStream
[
	"Refer to the comment in Object|storeOn:."

	aStream nextPutAll: 'nil'
]

UndefinedObject >> subclass: name type: type uses: aTraitComposition instanceVariableNames: instanceVariableNames classVariableNames: classVariableNames classInstanceVariableNames: classInstanceVariableNames poolDictionaries: sharedPoolString compactClassIndex: index category: category
[
	| newClass |
	newClass := PharoClassInstaller make: [ :builder |
		builder
			superclass: self;
			name: name;
			layoutClass: type;
			slots: instanceVariableNames asSlotCollection;
			sharedVariables: classVariableNames;
			sharedPools: sharedPoolString;
			category: category;
			environment: self environment;
			classSlots: classInstanceVariableNames asSlotCollection ].
	newClass setTraitComposition: aTraitComposition asTraitComposition.
	newClass layout compactClassIndex: index.
]

UndefinedObject >> subclassDefinerClass
[
	"For disjunct class hierarchies -- how should subclasses of nil be evaluated"

	^ self class compilerClass
]

UndefinedObject >> subclasses
[
	"Return all the subclasses of nil"

	| classList |
	classList := Array new writeStream.
	self subclassesDo: [ :class | classList nextPut: class ].
	^ classList contents
]

UndefinedObject >> subclassesDo: aBlock
[
	"Evaluate aBlock with all subclasses of nil.  Others are not direct subclasses of Class."

	^ Class subclassesDo: [ :cl | cl isMeta
				ifTrue: [ aBlock value: cl soleInstance ] ]
]

UndefinedObject >> suspend
[
	"Kills off processes that didn't terminate properly"

	"Display reverse; reverse."

	"<-- So we can catch the suspend bug"

	Processor terminateActive
]

UndefinedObject >> typeOfClass
[
	"Necessary to support disjoint class hierarchies."

	^ #normal
]

UndefinedObject >> veryDeepCopyWith: deepCopier
[
	"Return self.  I can't be copied.  Do not record me."

	
]

UndefinedObject class >> allInstances
[
	"It is well known there is a single instance"

	^ Array with: nil
]

UndefinedObject class >> allInstancesDo: aBlock
[
	"It is well known there is a single instance"

	aBlock value: nil
]

UndefinedObject class >> new
[
	self error: 'You may not create any more undefined objects--use nil'
]

