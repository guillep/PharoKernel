DomainError
	superclass: #ArithmeticError;
	instanceVariables: #(#from #to );
	package: #Kernel.

DomainError >> from
from
	^ from

DomainError >> from: start
from: start
	from := start

DomainError >> to
to
	^ to

DomainError >> to: end
to: end
	to := end

DomainError class >> signal: signallerText from: start
signal: signallerText from: start
	^ self signal: signallerText from: start to: Float infinity

DomainError class >> signal: signallerText from: start to: end
signal: signallerText from: start to: end
	^ self new
		from: start;
		to: end;
		signal: signallerText

DomainError class >> signal: signallerText to: end
signal: signallerText to: end
	^ self signal: signallerText from: Float infinity negated to: end

DomainError class >> signalFrom: start
signalFrom: start
	^ self signalFrom: start to: Float infinity

DomainError class >> signalFrom: start to: end
signalFrom: start to: end
	| msgStart msgEnd |
	msgStart := (start isFloat and: [ start isFinite not ])
		ifTrue: [ '(-infinity' ]
		ifFalse: [ '[' , start printString ].
	msgEnd := (end isFloat and: [ end isFinite not ])
		ifTrue: [ 'infinity)' ]
		ifFalse: [ end printString , ']' ].
	^ self
		signal: 'Value outside ' , msgStart , ' , ' , msgEnd from: start;
		to: end

DomainError class >> signalTo: end
signalTo: end
	^ self signalFrom: Float infinity negated to: end

