DelayWaitTimeout
	superclass: #Delay;
	instanceVariables: #(#process #expired );
	package: #Kernel.

DelayWaitTimeout >> isExpired
isExpired
	"Did this timeout fire before the associated semaphore was signaled?"

	^ expired

DelayWaitTimeout >> setDelay: anInteger forSemaphore: aSemaphore
setDelay: anInteger forSemaphore: aSemaphore
	super setDelay: anInteger forSemaphore: aSemaphore.
	process := Processor activeProcess.
	expired := false

DelayWaitTimeout >> signalWaitingProcess
signalWaitingProcess
	"Release the given process from the semaphore it is waiting on.
	This method relies on running at highest priority so that it cannot be preempted
	by the process being released."

	beingWaitedOn := false.	"Release the process but only if it is still waiting on its original list"
	process suspendingList == delaySemaphore
		ifTrue: [ expired := true.
			process
				suspend;
				resume ]

DelayWaitTimeout >> wait
wait
	"Wait until either the semaphore is signaled or the delay times out"

	[ 
	self schedule.	"It is critical that the following has no suspension point so that	the test and the wait primitive are atomic. In addition, if the delay	is no longer being waited on while entering the way we know that it 	is expired because the delay has already fired."
	beingWaitedOn
		ifTrue: [ delaySemaphore wait ]
		ifFalse: [ expired := true ] ]
		ensure: [ self unschedule ].
	^ self isExpired

