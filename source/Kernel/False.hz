False
	superclass: #Boolean;
	package: #Kernel.

False >> & aBoolean
[
	"Evaluating conjunction -- answer false since receiver is false."

	^ self
]

False >> and: alternativeBlock
[
	"Nonevaluating conjunction -- answer with false since the receiver is false."

	^ self
]

False >> asBit
[
	^ 0
]

False >> ifFalse: alternativeBlock
[
	"Answer the value of alternativeBlock. Execution does not actually
	reach here because the expression is compiled in-line."

	^ alternativeBlock value
]

False >> ifFalse: falseAlternativeBlock ifTrue: trueAlternativeBlock
[
	"Answer the value of falseAlternativeBlock. Execution does not
	actually reach here because the expression is compiled in-line."

	^ falseAlternativeBlock value
]

False >> ifTrue: alternativeBlock
[
	"Since the condition is false, answer the value of the false alternative, 
	which is nil. Execution does not actually reach here because the
	expression is compiled in-line."

	^ nil
]

False >> ifTrue: trueAlternativeBlock ifFalse: falseAlternativeBlock
[
	"Answer the value of falseAlternativeBlock. Execution does not
	actually reach here because the expression is compiled in-line."

	^ falseAlternativeBlock value
]

False >> not
[
	"Negation -- answer true since the receiver is false."

	^ true
]

False >> or: alternativeBlock
[
	"Nonevaluating disjunction -- answer value of alternativeBlock."

	^ alternativeBlock value
]

False >> printOn: aStream
[
	aStream nextPutAll: 'false'
]

False >> xor: aBoolean
[
	^ aBoolean value
]

False >> | aBoolean
[
	"Evaluating disjunction (OR) -- answer with the argument, aBoolean."

	^ aBoolean
]

ck value
]

False >> printOn: aStream
[printOn: aStream
	aStream nextPutAll: 'false'
]

False >> xor: aBoolean
[xor: aBoolean
	^ aBoolean value
]

False >> | aBoolean
[| aBoolean
	"Evaluating disjunction (OR) -- answer with the argument, aBoolean."

	^ aBoolean
]

