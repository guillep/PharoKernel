InstructionStream
	instanceVariables: #(#sender #pc );
	classVariables: #(#SpecialConstants );
	package: #Kernel.

InstructionStream >> addSelectorTo: set
[addSelectorTo: set
	"If this instruction is a send, add its selector to set."

	| selectorOrSelf |
	(selectorOrSelf := self selectorToSendOrSelf) == self
		ifFalse: [ set add: selectorOrSelf ]
]

InstructionStream >> atEnd
[atEnd
	^ pc > self method endPC
]

InstructionStream >> debuggerMap
[debuggerMap
	^ self method debuggerMap
]

InstructionStream >> firstByte
[firstByte
	"Answer the first byte of the current bytecode."

	^ self method at: pc
]

InstructionStream >> followingByte
[followingByte
	"Answer the next bytecode."

	^ self method at: pc + 1
]

InstructionStream >> followingBytecode
[followingBytecode
	"Answer the bytecode of the following bytecode (different to nextByte)."

	^ self method at: self followingPc
]

InstructionStream >> followingPc
[followingPc
	"Answer the pc of the following bytecode."

	^ self nextPc: (self method at: pc)
]

InstructionStream >> fourthByte
[fourthByte
	"Answer the fourth byte of the current bytecode."

	^ self method at: pc + 3
]

InstructionStream >> interpret
[interpret
	| endPC |
	endPC := self method endPC.
	[ pc > endPC ] whileFalse: [ self interpretNextInstructionFor: self ]
]

InstructionStream >> interpretExtension: offset in: method for: client
[interpretExtension: offset in: method for: client
	| type offset2 byte2 byte3 byte4 |
	offset <= 6
		ifTrue: [ "Extended op codes 128-134"
			byte2 := method at: pc.
			pc := pc + 1.
			offset <= 2
				ifTrue: [ "128-130:  extended pushes and pops"
					type := byte2 // 64.
					offset2 := byte2 \\ 64.
					offset = 0
						ifTrue: [ type = 0
								ifTrue: [ ^ client pushReceiverVariable: offset2 ].
							type = 1
								ifTrue: [ ^ client pushTemporaryVariable: offset2 ].
							type = 2
								ifTrue: [ ^ client pushConstant: (method literalAt: offset2 + 1) ].
							type = 3
								ifTrue: [ ^ client pushLiteralVariable: (method literalAt: offset2 + 1) ] ].
					offset = 1
						ifTrue: [ type = 0
								ifTrue: [ ^ client storeIntoReceiverVariable: offset2 ].
							type = 1
								ifTrue: [ ^ client storeIntoTemporaryVariable: offset2 ].
							type = 2
								ifTrue: [ self error: 'illegalStore' ].
							type = 3
								ifTrue: [ ^ client storeIntoLiteralVariable: (method literalAt: offset2 + 1) ] ].
					offset = 2
						ifTrue: [ type = 0
								ifTrue: [ ^ client popIntoReceiverVariable: offset2 ].
							type = 1
								ifTrue: [ ^ client popIntoTemporaryVariable: offset2 ].
							type = 2
								ifTrue: [ self error: 'illegalStore' ].
							type = 3
								ifTrue: [ ^ client popIntoLiteralVariable: (method literalAt: offset2 + 1) ] ] ].	"131-134: extended sends"
			offset = 3
				ifTrue: [ "Single extended send"
					^ client send: (method literalAt: byte2 \\ 32 + 1) super: false numArgs: byte2 // 32 ].
			offset = 4
				ifTrue: [ "Double extended do-anything"
					byte3 := method at: pc.
					pc := pc + 1.
					type := byte2 // 32.
					type = 0
						ifTrue: [ ^ client send: (method literalAt: byte3 + 1) super: false numArgs: byte2 \\ 32 ].
					type = 1
						ifTrue: [ ^ client send: (method literalAt: byte3 + 1) super: true numArgs: byte2 \\ 32 ].
					type = 2
						ifTrue: [ ^ client pushReceiverVariable: byte3 ].
					type = 3
						ifTrue: [ ^ client pushConstant: (method literalAt: byte3 + 1) ].
					type = 4
						ifTrue: [ ^ client pushLiteralVariable: (method literalAt: byte3 + 1) ].
					type = 5
						ifTrue: [ ^ client storeIntoReceiverVariable: byte3 ].
					type = 6
						ifTrue: [ ^ client popIntoReceiverVariable: byte3 ].
					type = 7
						ifTrue: [ ^ client storeIntoLiteralVariable: (method literalAt: byte3 + 1) ] ].
			offset = 5
				ifTrue: [ "Single extended send to super"
					^ client send: (method literalAt: byte2 \\ 32 + 1) super: true numArgs: byte2 // 32 ].
			offset = 6
				ifTrue: [ "Second extended send"
					^ client send: (method literalAt: byte2 \\ 64 + 1) super: false numArgs: byte2 // 64 ] ].
	offset = 7
		ifTrue: [ ^ client doPop ].
	offset = 8
		ifTrue: [ ^ client doDup ].
	offset = 9
		ifTrue: [ ^ client pushActiveContext ].
	byte2 := method at: pc.
	pc := pc + 1.
	offset = 10
		ifTrue: [ ^ byte2 < 128
				ifTrue: [ client pushNewArrayOfSize: byte2 ]
				ifFalse: [ client pushConsArrayWithElements: byte2 - 128 ] ].
	offset = 11
		ifTrue: [ ^ self error: 'unusedBytecode' ].
	byte3 := method at: pc.
	pc := pc + 1.
	offset = 12
		ifTrue: [ ^ client pushRemoteTemp: byte2 inVectorAt: byte3 ].
	offset = 13
		ifTrue: [ ^ client storeIntoRemoteTemp: byte2 inVectorAt: byte3 ].
	offset = 14
		ifTrue: [ ^ client popIntoRemoteTemp: byte2 inVectorAt: byte3 ].	"offset = 15"
	byte4 := method at: pc.
	pc := pc + 1.
	^ client
		pushClosureCopyNumCopiedValues: (byte2 bitShift: -4)
		numArgs: (byte2 bitAnd: 16rF)
		blockSize: byte3 * 256 + byte4
]

InstructionStream >> interpretJump
[interpretJump
	| byte |
	byte := self method at: pc.
	(byte between: 144 and: 151)
		ifTrue: [ pc := pc + 1.
			^ byte - 143 ].
	(byte between: 160 and: 167)
		ifTrue: [ pc := pc + 2.
			^ (byte - 164) * 256 + (self method at: pc - 1) ].
	^ nil
]

InstructionStream >> interpretJumpIfCond
[interpretJumpIfCond
	| byte |
	byte := self method at: pc.
	(byte between: 152 and: 159)
		ifTrue: [ pc := pc + 1.
			^ byte - 151 ].
	(byte between: 168 and: 175)
		ifTrue: [ pc := pc + 2.
			^ (byte bitAnd: 3) * 256 + (self method at: pc - 1) ].
	^ nil
]

InstructionStream >> interpretNextInstructionFor: client
[interpretNextInstructionFor: client
	"Send to the argument, client, a message that specifies the type of the 
	next instruction."

	| byte type offset method |
	method := self method.
	byte := method at: pc.
	type := byte // 16.
	offset := byte \\ 16.
	pc := pc + 1.	"We do an inline binary search on each of the possible 16 values of type:	The old, cleaner but slowe code is retained as a comment below"
	type < 8
		ifTrue: [ type < 4
				ifTrue: [ type < 2
						ifTrue: [ type < 1
								ifTrue: [ "type = 0"
									^ client pushReceiverVariable: offset ]
								ifFalse: [ "type = 1"
									^ client pushTemporaryVariable: offset ] ]
						ifFalse: [ type < 3
								ifTrue: [ "type = 2"
									^ client pushConstant: (method literalAt: offset + 1) ]
								ifFalse: [ "type = 3"
									^ client pushConstant: (method literalAt: offset + 17) ] ] ]
				ifFalse: [ type < 6
						ifTrue: [ type < 5
								ifTrue: [ "type = 4"
									^ client pushLiteralVariable: (method literalAt: offset + 1) ]
								ifFalse: [ "type = 5"
									^ client pushLiteralVariable: (method literalAt: offset + 17) ] ]
						ifFalse: [ type < 7
								ifTrue: [ "type = 6"
									offset < 8
										ifTrue: [ ^ client popIntoReceiverVariable: offset ]
										ifFalse: [ ^ client popIntoTemporaryVariable: offset - 8 ] ]
								ifFalse: [ "type = 7"
									offset = 0
										ifTrue: [ ^ client pushReceiver ].
									offset < 8
										ifTrue: [ ^ client pushConstant: (SpecialConstants at: offset) ].
									offset = 8
										ifTrue: [ ^ client methodReturnReceiver ].
									offset < 12
										ifTrue: [ ^ client methodReturnConstant: (SpecialConstants at: offset - 8) ].
									offset = 12
										ifTrue: [ ^ client methodReturnTop ].
									offset = 13
										ifTrue: [ ^ client blockReturnTop ].
									offset > 13
										ifTrue: [ ^ self error: 'unusedBytecode' ] ] ] ] ]
		ifFalse: [ type < 12
				ifTrue: [ type < 10
						ifTrue: [ type < 9
								ifTrue: [ "type = 8"
									^ self interpretExtension: offset in: method for: client ]
								ifFalse: [ "type = 9 (short jumps)"
									offset < 8
										ifTrue: [ ^ client jump: offset + 1 ].
									^ client jump: offset - 8 + 1 if: false ] ]
						ifFalse: [ type < 11
								ifTrue: [ "type = 10 (long jumps)"
									byte := method at: pc.
									pc := pc + 1.
									offset < 8
										ifTrue: [ ^ client jump: (offset - 4) * 256 + byte ].
									^ client jump: (offset bitAnd: 3) * 256 + byte if: offset < 12 ]
								ifFalse: [ "type = 11"
									^ client
										send: (Smalltalk specialSelectorAt: offset + 1)
										super: false
										numArgs: (Smalltalk specialNargsAt: offset + 1) ] ] ]
				ifFalse: [ type = 12
						ifTrue: [ ^ client send: (Smalltalk specialSelectorAt: offset + 17) super: false numArgs: (Smalltalk specialNargsAt: offset + 17) ]
						ifFalse: [ "type = 13, 14 or 15"
							^ client send: (method literalAt: offset + 1) super: false numArgs: type - 13 ] ] ]	"    old code 	type=0 ifTrue: [^client pushReceiverVariable: offset].	type=1 ifTrue: [^client pushTemporaryVariable: offset].	type=2 ifTrue: [^client pushConstant: (method literalAt: offset+1)].	type=3 ifTrue: [^client pushConstant: (method literalAt: offset+17)].	type=4 ifTrue: [^client pushLiteralVariable: (method literalAt: offset+1)].	type=5 ifTrue: [^client pushLiteralVariable: (method literalAt: offset+17)].	type=6 		ifTrue: [offset<8					ifTrue: [^client popIntoReceiverVariable: offset]					ifFalse: [^client popIntoTemporaryVariable: offset-8]].	type=7		ifTrue: [offset=0 ifTrue: [^client pushReceiver].				offset<8 ifTrue: [^client pushConstant: (SpecialConstants at: offset)].				offset=8 ifTrue: [^client methodReturnReceiver].				offset<12 ifTrue: [^client methodReturnConstant: 												(SpecialConstants at: offset-8)].				offset=12 ifTrue: [^client methodReturnTop].				offset=13 ifTrue: [^client blockReturnTop].				offset>13 ifTrue: [^self error: 'unusedBytecode']].	type=8 ifTrue: [^self interpretExtension: offset in: method for: client].	type=9		ifTrue:  short jumps			[offset<8 ifTrue: [^client jump: offset+1].			^client jump: offset-8+1 if: false].	type=10 		ifTrue:  long jumps			[byte:= method at: pc.  pc:= pc+1.			offset<8 ifTrue: [^client jump: offset-4*256 + byte].			^client jump: (offset bitAnd: 3)*256 + byte if: offset<12].	type=11 		ifTrue: 			[^client 				send: (Smalltalk specialSelectorAt: offset+1) 				super: false				numArgs: (Smalltalk specialNargsAt: offset+1)].	type=12 		ifTrue: 			[^client 				send: (Smalltalk specialSelectorAt: offset+17) 				super: false				numArgs: (Smalltalk specialNargsAt: offset+17)].	type>12		ifTrue: 			[^client send: (method literalAt: offset+1) 					super: false					numArgs: type-13]"
]

InstructionStream >> method
[method
	"Answer the compiled method that supplies the receiver's bytecodes."

	^ sender	"method access when used alone (not as part of a context)"
]

InstructionStream >> method: method pc: startpc
[method: method pc: startpc
	sender := method.	"allows this class to stand alone as a method scanner"
	pc := startpc
]

InstructionStream >> nextByte
[nextByte
	"Answer the next bytecode."

	^ self method at: pc
]

InstructionStream >> nextInstruction
[nextInstruction
	"Return the next bytecode instruction as a message that an InstructionClient would understand.  This advances the pc by one instruction."

	^ self interpretNextInstructionFor: MessageCatcher new
]

InstructionStream >> nextPc: currentByte
[nextPc: currentByte
	"Answer the pc of the next bytecode following the current one, given the current bytecode.."

	| type |
	type := currentByte // 16.	"extensions"
	^ type = 8
		ifTrue: [ pc + (#(2 2 2 2 3 2 2 1 1 1 2 1 3 3 3 4) at: currentByte \\ 16 + 1) ]
		ifFalse: [ "long jumps"
			type = 10
				ifTrue: [ pc + 2 ]
				ifFalse: [ pc + 1 ] ]
]

InstructionStream >> pc
[pc
	"Answer the index of the next bytecode."

	^ pc
]

InstructionStream >> pc: anInteger
[pc: anInteger
	pc := anInteger
]

InstructionStream >> peekInstruction
[peekInstruction
	"Return the next bytecode instruction as a message that an InstructionClient would understand.  The pc remains unchanged."

	| currentPc instruction |
	currentPc := self pc.
	instruction := self nextInstruction.
	self pc: currentPc.
	^ instruction
]

InstructionStream >> previousPc
[previousPc
	^ self method pcPreviousTo: pc
]

InstructionStream >> scanFor: scanBlock
[scanFor: scanBlock
	"Answer the index of the first bytecode for which scanBlock
	 answers true when supplied with that bytecode."

	| method end byte |
	method := self method.
	end := method endPC.
	[ pc <= end ]
		whileTrue: [ (scanBlock value: (byte := method at: pc))
				ifTrue: [ ^ true ].
			pc := self nextPc: byte ].
	^ false
]

InstructionStream >> secondByte
[secondByte
	"Answer the second byte of the current bytecode."

	^ self method at: pc + 1
]

InstructionStream >> selectorToSendOrSelf
[selectorToSendOrSelf
	"If this instruction is a send, answer the selector, otherwise answer self."

	| byte byte2 |
	byte := self method at: pc.
	byte < 131
		ifTrue: [ ^ self ].
	byte >= 176
		ifTrue: [ "special byte or short send"
			byte >= 208
				ifTrue: [ ^ self method literalAt: (byte bitAnd: 15) + 1 ]
				ifFalse: [ ^ Smalltalk specialSelectorAt: byte - 176 + 1 ] ]
		ifFalse: [ byte <= 134
				ifTrue: [ byte2 := self method at: pc + 1.
					byte = 131
						ifTrue: [ ^ self method literalAt: byte2 \\ 32 + 1 ].
					byte = 132
						ifTrue: [ byte2 < 64
								ifTrue: [ ^ self method literalAt: (self method at: pc + 2) + 1 ] ].
					byte = 133
						ifTrue: [ ^ self method literalAt: byte2 \\ 32 + 1 ].
					byte = 134
						ifTrue: [ ^ self method literalAt: byte2 \\ 64 + 1 ] ] ]
]

InstructionStream >> skipBackBeforeJump
[skipBackBeforeJump
	"Assuming that the receiver is positioned jast after a jump, skip back one or two bytes, depending on the size of the previous jump instruction."

	| strm short |
	strm := InstructionStream on: self method.
	(strm
		scanFor: [ :byte | ((short := byte between: 152 and: 159) or: [ byte between: 168 and: 175 ])
				and: [ strm pc = (short
								ifTrue: [ pc - 1 ]
								ifFalse: [ pc - 2 ]) ] ])
		ifFalse: [ self error: 'Where''s the jump??' ].
	self jump: (short
				ifTrue: [ -1 ]
				ifFalse: [ -2 ])
]

InstructionStream >> thirdByte
[thirdByte
	"Answer the third byte of the current bytecode."

	^ self method at: pc + 2
]

InstructionStream >> willBlockReturn
[willBlockReturn
	^ (self method at: pc) = 125
]

InstructionStream >> willCreateBlock
[willCreateBlock
	"next bytecode is a block creation"

	^ (self method at: pc) = 143
]

InstructionStream >> willJump
[willJump
	"unconditionally"

	| byte |
	byte := self method at: pc.
	^ (byte between: 144 and: 151) or: [ byte between: 160 and: 167 ]
]

InstructionStream >> willJumpIfFalse
[willJumpIfFalse
	"Answer whether the next bytecode is a jump-if-false."

	| byte |
	byte := self method at: pc.
	^ (byte between: 152 and: 159) or: [ byte between: 172 and: 175 ]
]

InstructionStream >> willJumpIfTrue
[willJumpIfTrue
	"Answer whether the next bytecode is a jump-if-true."

	| byte |
	byte := self method at: pc.
	^ byte between: 168 and: 171
]

InstructionStream >> willJustPop
[willJustPop
	^ (self method at: pc) = 135
]

InstructionStream >> willReturn
[willReturn
	"Answer whether the next bytecode is a return."

	^ (self method at: pc) between: 120 and: 125
]

InstructionStream >> willSend
[willSend
	"Answer whether the next bytecode is a message-send."

	| byte |
	byte := self method at: pc.
	^ byte >= 131 and: [ "special send or short send"
			byte >= 176 or: [ "long sends"
					byte <= 134 ] ]
]

InstructionStream >> willStore
[willStore
	"Answer whether the next bytecode is a store or store-pop"

	| byte |
	byte := self method at: pc.
	^ (byte between: 96 and: 142)
		and: [ "96 103		storeAndPopReceiverVariableBytecode"
			"104 111	storeAndPopTemporaryVariableBytecode"
			byte <= 111
				or: [ "129		extendedStoreBytecode"
					byte >= 129
						and: [ "130		extendedStoreAndPopBytecode"
							byte <= 130
								or: [ (byte = 132 and: [ (self method at: pc + 1) >= 160 ])
										or: [ "141		storeRemoteTempLongBytecode"
											byte = 141 or: [ "142		storeAndPopRemoteTempLongBytecode"
													byte = 142 ] ]	"132		doubleExtendedDoAnythingBytecode" ] ] ] ]
]

InstructionStream >> willStorePop
[willStorePop
	"Answer whether the next bytecode is a store-pop."

	| byte |
	byte := self method at: pc.	"130		extendedStoreAndPopBytecode"
	^ byte = 130
		or: [ "142		storeAndPopRemoteTempLongBytecode"
			byte = 142
				or: [ "96 103		storeAndPopReceiverVariableBytecode"
					"104 111	storeAndPopTemporaryVariableBytecode"
					byte between: 96 and: 111 ] ]
]

InstructionStream class >> initialize
[initialize
	"Initialize an array of special constants returned by single-bytecode returns."

	SpecialConstants := (Array with: true with: false with: nil) , (Array
				with: -1
				with: 0
				with: 1
				with: 2)	"InstructionStream initialize."
]

InstructionStream class >> on: method
[on: method
	"Answer an instance of me on the argument, method."

	^ self new method: method pc: method initialPC
]

