Halt
	superclass: #Exception;
	package: #Kernel.

Halt class
	instanceVariables: #(#isHaltOnceEnabled #callsUntilHaltOnCount ).

Halt >> defaultAction
[
	"No one has handled this error, but now give them a chance to decide how to debug it.  If none handle this either then open debugger (see UnhandedError-defaultAction)"

	^ UIManager default unhandledErrorDefaultAction: self	"^ UnhandledError signalForException: self"
]

Halt >> signalerContext
[
	"specialized version to find the proper context to open the debugger on.
	This will find the first context whose method is no longer on Halt or Halt class nor is #halt method iteself."

	^ signalContext
		findContextSuchThat: [ :context | (context receiver == self or: [ context receiver == self class or: [ context method selector = #halt ] ]) not ]
]

Halt class >> callsUntilHaltOnCount
[
	^ callsUntilHaltOnCount
]

Halt class >> callsUntilHaltOnCount: anInteger
[
	callsUntilHaltOnCount := anInteger
]

Halt class >> disableHaltOnce
[
	isHaltOnceEnabled := false
]

Halt class >> enableHaltOnce
[
	"self enableHaltOnce"

	isHaltOnceEnabled := true
]

Halt class >> halt
[
	"backward compatible method with self halt"

	self signal
]

Halt class >> halt: aString
[
	"backward compatible method with self halt:"

	self signal: aString
]

Halt class >> haltIfBlockWithCallingObject: aBlock
[
	| callingObject |
	callingObject := thisContext sender sender receiver.
	(aBlock cull: callingObject)
		ifTrue: [ self signal ]
		ifFalse: [ ^ self ]
]

Halt class >> haltIfCallChainContains: aSelector
[
	| cntxt |
	cntxt := thisContext.
	[ cntxt sender isNil ] whileFalse: [ cntxt := cntxt sender.
			cntxt selector = aSelector
				ifTrue: [ self signal ] ]
]

Halt class >> if: condition
[
	"This is the typical message to use for inserting breakpoints during 
	debugging.
	
	The argument can be one of the following:
		- a block: if the Block has one arg, the calling object is bound to that.
		- an expression
 		- a selector: Halt if found in the call chain"

	condition isSymbol
		ifTrue: [ ^ self haltIfCallChainContains: condition ].
	condition isBlock
		ifTrue: [ ^ self haltIfBlockWithCallingObject: condition ].
	condition
		ifTrue: [ self signal ]
]

Halt class >> ifShiftPressed
[
	self if: [ Sensor shiftPressed ]
]

Halt class >> initialize
[
	isHaltOnceEnabled := false.
	callsUntilHaltOnCount := 1
]

Halt class >> isCounting
[
	^ callsUntilHaltOnCount > 0
]

Halt class >> isHaltOnceEnabled
[
	^ isHaltOnceEnabled ifNil: [ isHaltOnceEnabled := false ]
]

Halt class >> now
[
	self signal
]

Halt class >> now: aString
[
	"set a breakpoint with some explanation"

	self signal: aString
]

Halt class >> onCount: anInteger
[
	"Halt on the anInteger-th time through"

	| currentCount |
	currentCount := self isCounting
		ifTrue: [ self callsUntilHaltOnCount ]
		ifFalse: [ anInteger ].
	self callsUntilHaltOnCount: currentCount - 1.
	self callsUntilHaltOnCount = 0
		ifTrue: [ self signal ]
]

Halt class >> once
[
	"To enable, use self enableHaltOnce"

	self isHaltOnceEnabled
		ifTrue: [ self disableHaltOnce.
			^ self signal ]
]

Halt class >> stopCounting
[
	callsUntilHaltOnCount := 0
]

ilHaltOnCount: currentCount - 1.
	self callsUntilHaltOnCount = 0
		ifTrue: [ self signal ]
]

Halt class >> once
[once
	"To enable, use self enableHaltOnce"

	self isHaltOnceEnabled
		ifTrue: [ self disableHaltOnce.
			^ self signal ]
]

Halt class >> stopCounting
[stopCounting
	callsUntilHaltOnCount := 0
]

