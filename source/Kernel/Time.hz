Time
	superclass: #Magnitude;
	instanceVariables: #(#seconds #nanos );
	sharedPools: #(#ChronologyConstants );
	package: #Kernel.

Time >> < aTime
< aTime
	^ self asDuration < aTime asDuration

Time >> = aTime
= aTime
	^ [ self ticks = aTime ticks ]
		on: MessageNotUnderstood
		do: [ false ]

Time >> addSeconds: nSeconds
addSeconds: nSeconds
	"Answer a Time that is nSeconds after the receiver."

	^ self class seconds: self asSeconds + nSeconds

Time >> addTime: timeAmount
addTime: timeAmount
	"Answer a Time that is timeInterval after the receiver. timeInterval is an 
 	instance of Date or Time."

	^ self class seconds: self asSeconds + timeAmount asSeconds

Time >> asDate
asDate
	^ Date today

Time >> asDateAndTime
asDateAndTime
	^ DateAndTime today + self

Time >> asDuration
asDuration
	"Answer the duration since midnight"

	^ Duration seconds: seconds nanoSeconds: nanos

Time >> asMilliSeconds
asMilliSeconds
	"Answer the number of milliseconds since midnight"

	^ self asDuration asMilliSeconds

Time >> asMonth
asMonth
	^ self asDateAndTime asMonth

Time >> asNanoSeconds
asNanoSeconds
	"Answer the number of nanoseconds since midnight"

	^ self asDuration asNanoSeconds

Time >> asSeconds
asSeconds
	"Answer the number of seconds since midnight of the receiver."

	^ seconds

Time >> asTime
asTime
	^ self

Time >> asTimeStamp
asTimeStamp
	^ self asDateAndTime asTimeStamp

Time >> asWeek
asWeek
	^ self asDateAndTime asWeek

Time >> asYear
asYear
	^ self asDateAndTime asYear

Time >> duration
duration
	^ Duration zero

Time >> hash
hash
	^ self ticks hash

Time >> hhmm24
hhmm24
	"Return a string of the form 1123 (for 11:23 am), 2154 (for 9:54 pm), of exactly 4 digits"

	^ String
		new: 4
		streamContents: [ :aStream | self hour
				printOn: aStream
				base: 10
				length: 2
				padded: true.
			self minute
				printOn: aStream
				base: 10
				length: 2
				padded: true ]

Time >> hour
hour
	^ self hour24

Time >> hour12
hour12
	"Answer an <integer> between 1 and 12, inclusive, representing the hour 
 	of the day in the 12-hour clock of the local time of the receiver."

	^ (self hour24 - 1) \\ 12 + 1

Time >> hour24
hour24
	"Answer a number that represents the number of complete hours in the receiver, 
	after the number of complete days has been removed."

	^ (seconds rem: SecondsInDay) quo: SecondsInHour

Time >> hours
hours
	^ self hour

Time >> intervalString
intervalString
	"Treat the time as a difference.  Give it in hours and minutes with two digits of accuracy."

	| d |
	d := self asDuration.
	^ String
		streamContents: [ :s | d hours > 0
				ifTrue: [ s
						print: d hours;
						nextPutAll: ' hours' ].
			d minutes > 0
				ifTrue: [ s
						space;
						print: d minutes;
						nextPutAll: ' minutes' ].
			d seconds > 0
				ifTrue: [ s
						space;
						print: d seconds;
						nextPutAll: ' seconds' ] ]

Time >> meridianAbbreviation
meridianAbbreviation
	^ self hour < 12
		ifTrue: [ 'AM' ]
		ifFalse: [ 'PM' ]

Time >> minute
minute
	"Answer a number that represents the number of complete minutes in the receiver,
	after the number of complete hours has been removed."

	^ (seconds rem: SecondsInHour) quo: SecondsInMinute

Time >> minutes
minutes
	^ self asDuration minutes

Time >> nanoSecond
nanoSecond
	^ nanos

Time >> print24
print24
	"Return as 8-digit string 'hh:mm:ss', with leading zeros if needed"

	^ String new: 8 streamContents: [ :aStream | self print24: true on: aStream ]

Time >> print24: hr24 on: aStream
print24: hr24 on: aStream
	"Format is 'hh:mm:ss' or 'h:mm:ss am' "

	self print24: hr24 showSeconds: true on: aStream

Time >> print24: hr24 showSeconds: showSeconds on: aStream
print24: hr24 showSeconds: showSeconds on: aStream
	"Format is 'hh:mm:ss' or 'h:mm:ss am'  or, if showSeconds is false, 'hh:mm' or 'h:mm am'"

	| h m s |
	h := self hour.
	m := self minute.
	s := self second.
	hr24
		ifTrue: [ h < 10
				ifTrue: [ aStream nextPut: $0 ].
			h printOn: aStream ]
		ifFalse: [ h > 12
				ifTrue: [ h - 12 printOn: aStream ]
				ifFalse: [ h < 1
						ifTrue: [ 12 printOn: aStream ]
						ifFalse: [ h printOn: aStream ] ] ].
	aStream nextPutAll: (m < 10
				ifTrue: [ ':0' ]
				ifFalse: [ ':' ]).
	m printOn: aStream.
	showSeconds
		ifTrue: [ aStream nextPutAll: (s < 10
						ifTrue: [ ':0' ]
						ifFalse: [ ':' ]).
			s printOn: aStream.
			nanos = 0
				ifFalse: [ | n len |
					n := nanos.
					len := 9.
					[ n \\ 10 = 0 ] whileTrue: [ n := n / 10.
							len := len - 1 ].
					aStream nextPut: $..
					n
						printOn: aStream
						base: 10
						length: len
						padded: true ] ].
	hr24
		ifFalse: [ aStream nextPutAll: (h < 12
						ifTrue: [ ' am' ]
						ifFalse: [ ' pm' ]) ]

Time >> printMinutes
printMinutes
	"Return as string 'hh:mm pm'  "

	^ String new: 8 streamContents: [ :aStream | self print24: false showSeconds: false on: aStream ]

Time >> printOn: aStream
printOn: aStream
	self print24: false showSeconds: (self seconds ~= 0 or: [ self nanoSecond ~= 0 ]) on: aStream

Time >> second
second
	"Answer a number that represents the number of complete seconds in the receiver, 
	after the number of complete minutes has been removed."

	^ seconds rem: SecondsInMinute

Time >> seconds
seconds
	^ self second

Time >> seconds: secondCount
seconds: secondCount
	"Private - only used by Time class."

	seconds := secondCount.
	nanos := 0

Time >> seconds: secondCount nanoSeconds: nanoCount
seconds: secondCount nanoSeconds: nanoCount
	"Private - only used by Time class."

	seconds := secondCount.
	nanos := nanoCount

Time >> storeOn: aStream
storeOn: aStream
	aStream
		print: self printString;
		nextPutAll: ' asTime'

Time >> subtractTime: timeAmount
subtractTime: timeAmount
	"Answer a Time that is timeInterval before the receiver. timeInterval is  
	an instance of Date or Time."

	^ self class seconds: self asSeconds - timeAmount asSeconds

Time >> ticks
ticks
	"Answer an Array: { seconds. nanoSeconds }"

	^ Array with: 0 with: seconds with: nanos

Time >> ticks: anArray
ticks: anArray
	"ticks is an Array: { days. seconds. nanoSeconds }"

	seconds := anArray at: 2.
	nanos := anArray at: 3

Time >> to: anEnd
to: anEnd
	"Answer a Timespan. anEnd must respond to #asDateAndTime"

	^ self asDateAndTime to: anEnd

Time class >> benchmarkMillisecondClock
benchmarkMillisecondClock
	"Time benchmarkMillisecondClock"

	"Benchmark the time spent in a call to Time>>millisecondClockValue.
	On the VM level this tests the efficiency of calls to ioMSecs()."

	"PII/400 Windows 98: 0.725 microseconds per call"

	| temp1 temp2 temp3 delayTime nLoops time |
	delayTime := 5000.	"Time to run benchmark is approx. 2*delayTime"	"Don't run the benchmark if we have an active delay since	we will measure the additional penalty in the primitive dispatch	mechanism (see #benchmarkPrimitiveResponseDelay)."
	Delay anyActive
		ifTrue: [ 
			^ self
				notify:
					'Some delay is currently active.Running this benchmark will not give any useful result.' ].	"Flush the cache for this benchmark so we will have	a clear cache hit for each send to #millisecondClockValue below"
	Object flushCache.
	temp1 := 0.
	temp2 := self.	"e.g., temp1 == Time"
	temp3 := self millisecondClockValue + delayTime.	"Now check how often we can run the following loop in the given time"
	[ temp2 millisecondClockValue < temp3 ] whileTrue: [ temp1 := temp1 + 1 ].
	nLoops := temp1.	"Remember the loops we have run during delayTime"	"Setup the second loop"
	temp1 := 0.
	temp3 := nLoops.	"Now measure how much time we spend without sending #millisecondClockValue"
	time := Time millisecondClockValue.
	[ temp1 < temp3 ] whileTrue: [ temp1 := temp1 + 1 ].
	time := Time millisecondsSince: time.	"And compute the number of microseconds spent per call to #millisecondClockValue"
	^ ((delayTime - time) * 1000.0 / nLoops truncateTo: 0.001) printString
		, ' microseconds per call to Time>>millisecondClockValue'

Time class >> benchmarkPrimitiveResponseDelay
benchmarkPrimitiveResponseDelay
	"Time benchmarkPrimitiveResponseDelay"

	"Benchmark the overhead for primitive dispatches with an active Delay.
	On the VM level, this tests the efficiency of ioLowResMSecs."

	"PII/400 Windows98: 0.128 microseconds per prim"

	"ar 9/6/1999: This value is *extremely* important for stuff like sockets etc.
	I had a bad surprise when Michael pointed this particular problem out:
	Using the hardcoded clock() call for ioLowResMSecs on Win32 resulted in an overhead
	of 157.4 microseconds per primitive call - meaning you can't get no more than
	approx. 6000 primitives per second on my 400Mhz PII system with an active delay!
	BTW, it finally explains why Squeak seemed soooo slow when running PWS or 
	other socket stuff. The new version (not using clock() but some Windows function) 
	looks a lot better (see above; approx. 8,000,000 prims per sec with an active delay)."

	| nLoops bb index baseTime actualTime delayTime |
	delayTime := 5000.	"Time to run this test is approx. 3*delayTime"
	Delay anyActive
		ifTrue: [ 
			^ self
				notify:
					'Some delay is currently active.Running this benchmark will not give any useful result.' ].
	bb := Array new: 1.	"The object we send the prim message to"	"Compute the # of loops we'll run in a decent amount of time"
	[ (Delay forMilliseconds: delayTime) wait ] forkAt: Processor userInterruptPriority.
	nLoops := 0.
	[ Delay anyActive ]
		whileTrue: [ bb
				basicSize;
				basicSize;
				basicSize;
				basicSize;
				basicSize;
				basicSize;
				basicSize;
				basicSize;
				basicSize;
				basicSize.
			nLoops := nLoops + 1 ].	"Flush the cache and make sure #basicSize is in there"
	Object flushCache.
	bb basicSize.	"Now run the loop without any active delay	for getting an idea about its actual speed."
	baseTime := self millisecondClockValue.
	index := nLoops.
	[ index > 0 ]
		whileTrue: [ bb
				basicSize;
				basicSize;
				basicSize;
				basicSize;
				basicSize;
				basicSize;
				basicSize;
				basicSize;
				basicSize;
				basicSize.
			index := index - 1 ].
	baseTime := self millisecondsSince: baseTime.	"Setup the active delay but try to never make it active"
	[ (Delay forMilliseconds: delayTime + delayTime) wait ] forkAt: Processor userInterruptPriority.	"And run the loop"
	actualTime := self millisecondClockValue.
	index := nLoops.
	[ index > 0 ]
		whileTrue: [ bb
				basicSize;
				basicSize;
				basicSize;
				basicSize;
				basicSize;
				basicSize;
				basicSize;
				basicSize;
				basicSize;
				basicSize.
			index := index - 1 ].
	actualTime := self millisecondsSince: actualTime.	"And get us some result"
	^ ((actualTime - baseTime) * 1000 asFloat / (nLoops * 10) truncateTo: 0.001) printString
		, ' microseconds overhead per primitive call'

Time class >> current
current
	^ self now

Time class >> dateAndTimeFromSeconds: secondCountSinceEpoch
dateAndTimeFromSeconds: secondCountSinceEpoch
	| dateAndTime |
	dateAndTime := DateAndTime fromSeconds: secondCountSinceEpoch.
	^ Array with: dateAndTime asDate with: dateAndTime asTime

Time class >> fromSeconds: secondCount
fromSeconds: secondCount
	"Answer an instance of me that is secondCount number of seconds since midnight."

	| integerSeconds nanos |
	integerSeconds := secondCount truncated.
	integerSeconds = secondCount
		ifTrue: [ nanos := 0 ]
		ifFalse: [ nanos := ((secondCount - integerSeconds) * NanosInSecond) asInteger ].
	^ self seconds: integerSeconds nanoSeconds: nanos

Time class >> fromString: aString
fromString: aString
	^ self readFrom: aString readStream

Time class >> hour: hour minute: minute second: second
hour: hour minute: minute second: second
	"Answer a Time"

	^ self
		hour: hour
		minute: minute
		second: second
		nanoSecond: 0

Time class >> hour: hour minute: minute second: second nanoSecond: nanoCount
hour: hour minute: minute second: second nanoSecond: nanoCount
	"Answer a Time - only second precision for now"

	^ self seconds: hour * SecondsInHour + (minute * SecondsInMinute) + second nanoSeconds: nanoCount

Time class >> microsecondClockValue
microsecondClockValue
	"Answer the number of microseconds since Squeak Epoch"

	^ self primUTCMicrosecondsClock

Time class >> microsecondsSince: lastTimeInMicroSeconds
microsecondsSince: lastTimeInMicroSeconds
	"Answer the elapsed time since last recorded in microseconds"

	^ self microsecondClockValue - lastTimeInMicroSeconds

Time class >> microsecondsToRun: timedBlock
microsecondsToRun: timedBlock
	"Answer the number of milliseconds timedBlock takes to return its value."

	| initialMicroseconds |
	initialMicroseconds := self microsecondClockValue.
	timedBlock value.
	^ self microsecondClockValue - initialMicroseconds

Time class >> midnight
midnight
	^ self seconds: 0

Time class >> millisecondClockValue
millisecondClockValue
	"Answer the number of milliseconds since the millisecond clock was last reset or rolled over.
	Answer 0 if the primitive fails."

	<primitive: 135>
	^ 0

Time class >> milliseconds: currentTime since: lastTime
milliseconds: currentTime since: lastTime
	"Answer the elapsed time since last recorded in milliseconds.
	Compensate for rollover."

	| delta |
	delta := currentTime - lastTime.
	^ delta < 0
		ifTrue: [ SmallInteger maxVal + delta ]
		ifFalse: [ delta ]

Time class >> millisecondsSince: lastTime
millisecondsSince: lastTime
	"Answer the elapsed time since last recorded in milliseconds.
 	Compensate for rollover."

	^ self milliseconds: self millisecondClockValue since: lastTime

Time class >> millisecondsToRun: timedBlock
millisecondsToRun: timedBlock
	"Answer the number of milliseconds timedBlock takes to return its value."

	^ (self microsecondsToRun: timedBlock) // 1e3

Time class >> new
new
	"Answer a Time representing midnight"

	^ self midnight

Time class >> noon
noon
	^ self seconds: SecondsInDay / 2

Time class >> now
now
	"Answer a Time representing the time right now - this is a 24 hour clock."

	^ self nowLocal

Time class >> nowLocal
nowLocal
	"Answer the time since midnight in local timezone"

	| microSecondsToday |
	microSecondsToday := self primUTCMicrosecondsClock.
	^ self
		seconds: (microSecondsToday // 1000000 + DateAndTime localTimeZone offset asSeconds) \\ SecondsInDay
		nanoSeconds: microSecondsToday \\ 1000000 * 1000

Time class >> nowUTC
nowUTC
	"Answer the time since midnight in UTC timezone"

	| microSecondsToday |
	microSecondsToday := self primUTCMicrosecondsClock \\ MicrosecondsInDay.
	^ self seconds: microSecondsToday // 1000000 nanoSeconds: microSecondsToday \\ 1000000 * 1000

Time class >> primMillisecondClock
primMillisecondClock
	"Primitive. Answer the number of milliseconds since the millisecond clock
	 was last reset or rolled over. Answer zero if the primitive fails.
	As an alternative you can use #primUTCMillisecondsClock which does not overflow."

	<primitive: 135>
	^ 0

Time class >> primUTCMicrosecondsClock
primUTCMicrosecondsClock
	"Answer the number of micro-seconds ellapsed since Squeak epoch.
	That is since 00:00 on the morning of January 1, 1901 UTC.
	At least a 60-bit unsigned integer is used internally which is enough for dates up to year 38435.
	Essential. See Object documentation whatIsAPrimitive. "

	<primitive: 240>
	self primitiveFailed

Time class >> primUTCMillisecondsClock
primUTCMillisecondsClock
	"Answer the number of whole milliseconds ellapsed since Squeak epoch.
	That is since 00:00 on the morning of January 1, 1901 UTC"

	^ self primUTCMicrosecondsClock // 1e3

Time class >> primUTCSecondsClock
primUTCSecondsClock
	"Answer the number of whole seconds ellapsed since Squeak epoch.
	That is since 00:00 on the morning of January 1, 1901 UTC"

	^ self primUTCMicrosecondsClock // 1e6

Time class >> readFrom: aStream
readFrom: aStream
	"Read a Time from the stream in the form:
		<hour>:<minute>:<second>.<nseconds> <am/pm>
	<minute>, <second> or <am/pm> may be omitted.  e.g. 1:59:30 pm; 8AM; 15:30"

	| hour minute second ampm nanos power |
	hour := Integer readFrom: aStream.
	minute := second := nanos := 0.
	(aStream peekFor: $:)
		ifTrue: [ minute := Integer readFrom: aStream.
			(aStream peekFor: $:)
				ifTrue: [ second := Integer readFrom: aStream.
					(aStream peekFor: $.)
						ifTrue: [ power := 1.
							[ aStream atEnd not and: [ aStream peek isDigit ] ]
								whileTrue: [ nanos := nanos * 10 + aStream next digitValue.
									power := power * 10 ].
							nanos := nanos / power * 1000000000 ] ] ].
	aStream skipSeparators.
	(aStream atEnd not and: [ 'APap' includes: aStream peek ])
		ifTrue: [ ampm := aStream next asLowercase.
			(ampm = $p and: [ hour < 12 ])
				ifTrue: [ hour := hour + 12 ].
			(ampm = $a and: [ hour = 12 ])
				ifTrue: [ hour := 0 ].
			(aStream peekFor: $m)
				ifFalse: [ aStream peekFor: $M ] ].
	^ self
		hour: hour
		minute: minute
		second: second
		nanoSecond: nanos

Time class >> seconds: seconds
seconds: seconds
	"Answer a Time from midnight."

	^ self basicNew ticks: (Duration seconds: seconds) ticks

Time class >> seconds: seconds nanoSeconds: nanoCount
seconds: seconds nanoSeconds: nanoCount
	"Answer a Time from midnight."

	^ self basicNew ticks: (Duration seconds: seconds nanoSeconds: nanoCount) ticks

Time class >> secondsWhenClockTicks
secondsWhenClockTicks
	"waits for the moment when a new second begins"

	| lastSecond |
	lastSecond := self primUTCSecondsClock.
	[ lastSecond = self primUTCSecondsClock ] whileTrue: [ (Delay forMilliseconds: 1) wait ].
	^ lastSecond + 1

Time class >> totalSeconds
totalSeconds
	"Answer the total seconds ellapsed since the Squeak epoch: 1 January 1901 00:00 UTC"

	^ self primUTCSecondsClock

