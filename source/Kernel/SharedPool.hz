SharedPool
	package: #Kernel.

SharedPool class >> bindingOf: varName
[
	"Answer the binding of some variable resolved in the scope of the receiver"

	| aSymbol binding |
	aSymbol := varName asSymbol.	"First look in classVar dictionary."
	binding := self classPool bindingOf: aSymbol.
	binding ifNotNil: [ ^ binding ].	"Next look in shared pools."
	self sharedPools do: [ :pool | binding := pool bindingOf: aSymbol.
			binding ifNotNil: [ ^ binding ] ].	"subclassing and environment are not preserved"
	^ nil
]

SharedPool class >> bindingsDo: aBlock
[
	^ self classPool bindingsDo: aBlock
]

SharedPool class >> classBindingOf: varName
[
	"For initialization messages grant the regular scope"

	^ super bindingOf: varName
]

SharedPool class >> hasBindingThatBeginsWith: aString
[
	"Answer true if the receiver has a binding that begins with aString, false otherwise"

	"First look in classVar dictionary."

	(self classPool hasBindingThatBeginsWith: aString)
		ifTrue: [ ^ true ].	"Next look in shared pools."
	self sharedPools do: [ :pool | (pool hasBindingThatBeginsWith: aString)
				ifTrue: [ ^ true ] ].
	^ false
]

SharedPool class >> includesKey: aName
[
	"does this pool include aName"

	^ (self bindingOf: aName) notNil
]

SharedPool class >> keysDo: aBlock
[
	"A hopefully temporary fix for an issue arising from miss-spelled variable names in code being compiled. The correction code (see Class>possibleVariablesFor:continuedFrom: assumes that sharedPools are Dictionaries. The proper fix would involve making sure all pools are actually subclasses of SharedPool, which they are not currently."

	self bindingsDo: [ :b | aBlock value: b key ]
]

ls are actually subclasses of SharedPool, which they are not currently."

	self bindingsDo: [ :b | aBlock value: b key ]
]

