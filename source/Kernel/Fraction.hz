Fraction
	superclass: #Number;
	instanceVariables: #(#numerator #denominator );
	package: #Kernel.

Fraction >> * aNumber
* aNumber
	"Answer the result of multiplying the receiver by aNumber."

	| d1 d2 |
	aNumber isFraction
		ifTrue: [ d1 := numerator gcd: aNumber denominator.
			d2 := denominator gcd: aNumber numerator.
			(d2 = denominator and: [ d1 = aNumber denominator ])
				ifTrue: [ ^ numerator // d1 * (aNumber numerator // d2) ].
			^ Fraction
				numerator: numerator // d1 * (aNumber numerator // d2)
				denominator: denominator // d2 * (aNumber denominator // d1) ].
	^ aNumber adaptToFraction: self andSend: #*

Fraction >> + aNumber
+ aNumber
	"Answer the sum of the receiver and aNumber."

	| n d d1 d2 |
	aNumber isInteger
		ifTrue: [ ^ Fraction numerator: numerator + (denominator * aNumber) denominator: denominator ].
	aNumber isFraction
		ifTrue: [ d := denominator gcd: aNumber denominator.
			n := numerator * (d1 := aNumber denominator // d) + (aNumber numerator * (d2 := denominator // d)).
			d1 := d1 * d2.
			n := n // (d2 := n gcd: d).
			(d := d1 * (d // d2)) = 1
				ifTrue: [ ^ n ].
			^ Fraction numerator: n denominator: d ].
	^ aNumber adaptToFraction: self andSend: #+

Fraction >> - aNumber
- aNumber
	"Answer the difference between the receiver and aNumber."

	aNumber isInteger
		ifTrue: [ ^ Fraction numerator: numerator - (denominator * aNumber) denominator: denominator ].
	aNumber isFraction
		ifTrue: [ ^ self + aNumber negated ].
	^ aNumber adaptToFraction: self andSend: #-

Fraction >> / aNumber
/ aNumber
	"Answer the result of dividing the receiver by aNumber."

	aNumber isFraction
		ifTrue: [ ^ self * aNumber reciprocal ].
	^ aNumber adaptToFraction: self andSend: #/

Fraction >> < aNumber
< aNumber
	aNumber isFraction
		ifTrue: [ ^ numerator * aNumber denominator < (aNumber numerator * denominator) ].
	^ aNumber adaptToFraction: self andCompare: #<

Fraction >> <= aNumber
<= aNumber
	aNumber isFraction
		ifTrue: [ ^ numerator * aNumber denominator <= (aNumber numerator * denominator) ].
	^ aNumber adaptToFraction: self andCompare: #<=

Fraction >> = aNumber
= aNumber
	aNumber isNumber
		ifFalse: [ ^ false ].
	aNumber isFraction
		ifTrue: [ 
			numerator = 0
				ifTrue: [ ^ aNumber numerator = 0 ].
			^ numerator * aNumber denominator = (aNumber numerator * denominator)	"Note: used to just compare num and denom,					but this fails for improper fractions" ].
	^ aNumber adaptToFraction: self andCompare: #=

Fraction >> > aNumber
> aNumber
	aNumber isFraction
		ifTrue: [ ^ numerator * aNumber denominator > (aNumber numerator * denominator) ].
	^ aNumber adaptToFraction: self andCompare: #>

Fraction >> >= aNumber
>= aNumber
	aNumber isFraction
		ifTrue: [ ^ numerator * aNumber denominator >= (aNumber numerator * denominator) ].
	^ aNumber adaptToFraction: self andCompare: #>=

Fraction >> adaptToInteger: rcvr andSend: selector
adaptToInteger: rcvr andSend: selector
	"If I am involved in arithmetic with an Integer, convert it to a Fraction."

	^ (Fraction numerator: rcvr denominator: 1) perform: selector with: self

Fraction >> asFloat
asFloat
	"Answer a Float that closely approximates the value of the receiver.
	This implementation will answer the closest floating point number to the receiver.
	In case of a tie, it will use the IEEE 754 round to nearest even mode.
	In case of overflow, it will answer +/- Float infinity."

	| a b mantissa exponent hasTruncatedBits lostBit n ha hb hm |
	a := numerator abs.
	b := denominator.	"denominator is always positive"
	ha := a highBitOfMagnitude.
	hb := b highBitOfMagnitude.	"Number of bits to keep in mantissa plus one to handle rounding."
	n := 1 + Float precision.	"If both numerator and denominator are represented exactly in floating point number,	then fastest thing to do is to use hardwired float division."
	(ha < n and: [ hb < n ])
		ifTrue: [ ^ numerator asFloat / denominator asFloat ].	"Shift the fraction by a power of two exponent so as to obtain a mantissa with n bits.	First guess is rough, the mantissa might have n+1 bits."
	exponent := ha - hb - n.
	exponent >= 0
		ifTrue: [ b := b bitShift: exponent ]
		ifFalse: [ a := a bitShift: exponent negated ].
	mantissa := a quo: b.
	hasTruncatedBits := a > (mantissa * b).
	hm := mantissa highBit.	"Check for gradual underflow, in which case the mantissa will loose bits.	Keep at least one bit to let underflow preserve the sign of zero."
	lostBit := Float emin - (exponent + hm - 1).
	lostBit > 0
		ifTrue: [ n := n - lostBit max: 1 ].	"Remove excess bits in the mantissa."
	hm > n
		ifTrue: [ exponent := exponent + hm - n.
			hasTruncatedBits := hasTruncatedBits or: [ mantissa anyBitOfMagnitudeFrom: 1 to: hm - n ].
			mantissa := mantissa bitShift: n - hm ].	"Check if mantissa must be rounded upward.	The case of tie (mantissa odd & hasTruncatedBits not)	will be handled by Integer>>asFloat."
	(hasTruncatedBits and: [ mantissa odd ])
		ifTrue: [ mantissa := mantissa + 1 ].
	^ (self positive
		ifTrue: [ mantissa asFloat ]
		ifFalse: [ mantissa asFloat negated ]) timesTwoPower: exponent

Fraction >> asFraction
asFraction
	"Answer the receiver itself."

	^ self

Fraction >> asLargerPowerOfTwo
asLargerPowerOfTwo
	"Convert the receiver into a power of two which is not less than the receiver"

	| quotient |
	(numerator = 0 or: [ numerator sign ~= denominator sign ])
		ifTrue: [ ^ DomainError signal: 'Value outside (0 , infinity)' from: 0 ].
	^ (quotient := denominator // numerator) > 0
		ifTrue: [ Fraction numerator: 1 denominator: (1 bitShift: quotient highBit - 1) ]
		ifFalse: [ 
			quotient := numerator // denominator.	"If my quotient is a power of two, we, we need to check remainder, to see if we should shift by highbit or not.				 (This is equivalent to Integer asLargerPowerOfTwo returning self when receiver is power of two) "
			(quotient isPowerOfTwo and: [ numerator \\ denominator = 0 ])
				ifTrue: [ quotient ]
				ifFalse: [ 1 bitShift: quotient highBit ] ]

Fraction >> asScaledDecimal
asScaledDecimal
	"Convert the receiver to a ScaledDecimal.
	If there is a finite decimal representation of the receiver, then use the exact number of decimal places required.
	Else, use a default number of decimals."

	| pow2 pow5 q q5 |
	pow2 := denominator lowBit - 1.
	q := denominator bitShift: pow2 negated.
	pow5 := 0.
	[ q = 1 ]
		whileFalse: [ q5 := q // 5.
			q - (5 * q5) = 0
				ifFalse: [ ^ super asScaledDecimal ].
			q := q5.
			pow5 := pow5 + 1 ].
	^ self asScaledDecimal: (pow2 max: pow5)

Fraction >> asSmallerPowerOfTwo
asSmallerPowerOfTwo
	"Convert the receiver into a power of two which is not larger than the receiver"

	| quotient |
	(numerator = 0 or: [ numerator sign ~= denominator sign ])
		ifTrue: [ ^ DomainError signal: 'Value outside (0 , infinity)' from: 0 ].
	^ (quotient := denominator // numerator) > 0
		ifTrue: [ 
			"If my quotient is a power of two, we, we need to check remainder, to see if we should shift by highbit or not.				 (This is equivalent to Integer asSmallerPowerOfTwo returning self when receiver is power of two) "
			(quotient isPowerOfTwo and: [ denominator \\ numerator = 0 ])
				ifTrue: [ Fraction numerator: 1 denominator: quotient ]
				ifFalse: [ Fraction numerator: 1 denominator: (1 bitShift: quotient highBit) ] ]
		ifFalse: [ 1 bitShift: (numerator // denominator) highBit - 1 ]

Fraction >> denominator
denominator
	^ denominator

Fraction >> hash
hash
	"Hash is reimplemented because = is implemented.
	Care is taken that a Fraction equal to a Float also have an equal hash"

	| tmp |
	denominator isPowerOfTwo
		ifTrue: [ "If denominator is a power of two, I can be exactly equal to a Float"
			tmp := self asFloat.
			tmp isFinite
				ifTrue: [ ^ tmp hash ] ].	"Else, I cannot be exactly equal to a Float, use own hash algorithm.	(Assume the fraction is already reduced)"
	^ numerator hash bitXor: denominator hash

Fraction >> isFraction
isFraction
	^ true

Fraction >> isPowerOfTwo
isPowerOfTwo
	| reduced |
	reduced := self reduced.
	^ (reduced numerator = 1 and: [ reduced denominator isPowerOfTwo ])
		or: [ reduced denominator = 1 and: [ reduced numerator isPowerOfTwo ] ]

Fraction >> isSelfEvaluating
isSelfEvaluating
	^ true

Fraction >> ln
ln
	"This function is defined because super ln might overflow."

	| res int |
	self <= 0
		ifTrue: [ ^ DomainError signal: 'ln is only defined for x > 0' from: 0 ].	"Test self < 1 before converting to float in order to avoid precision loss due to gradual underflow."
	numerator < denominator
		ifTrue: [ ^ self reciprocal ln negated ].
	res := super ln.
	res isFinite
		ifTrue: [ ^ res ].
	^ numerator ln - denominator ln

Fraction >> log
log
	"This function is defined because super log might overflow."

	| res int |
	self <= 0
		ifTrue: [ ^ DomainError signal: 'log is only defined for x > 0' from: 0 ].	"Test self < 1 before converting to float in order to avoid precision loss due to gradual underflow."
	numerator < denominator
		ifTrue: [ ^ self reciprocal log negated ].
	res := super log.
	res isFinite
		ifTrue: [ ^ res ].
	^ numerator log - denominator log

Fraction >> negated
negated
	"Refer to the comment in Number|negated."

	^ Fraction numerator: numerator negated denominator: denominator

Fraction >> negative
negative
	^ numerator negative

Fraction >> nthRoot: aPositiveInteger
nthRoot: aPositiveInteger
	"Answer the nth root of the receiver."

	| d n |
	n := numerator nthRoot: aPositiveInteger.
	d := denominator nthRoot: aPositiveInteger.	"The #sqrt method in integer will only answer a Float if there's no exact square root.	So, we need a float anyway."
	(n isInfinite or: [ d isInfinite ])
		ifTrue: [ ^ self asFloat nthRoot: aPositiveInteger ].
	^ n / d

Fraction >> numerator
numerator
	^ numerator

Fraction >> printOn: aStream
printOn: aStream
	aStream nextPut: $(.
	numerator printOn: aStream.
	aStream nextPut: $/.
	denominator printOn: aStream.
	aStream nextPut: $)

Fraction >> printOn: aStream base: base
printOn: aStream base: base
	aStream nextPut: $(.
	numerator printOn: aStream base: base.
	aStream nextPut: $/.
	denominator printOn: aStream base: base.
	aStream nextPut: $)

Fraction >> printOn: aStream showingDecimalPlaces: placesDesired
printOn: aStream showingDecimalPlaces: placesDesired
	"Same as super, but provides a faster implementation by inlining some Fraction protocol thus avoiding intermediate Fraction creation."

	| roundedFractionPart integerPart scaling |
	placesDesired <= 0
		ifTrue: [ self rounded printOn: aStream ]
		ifFalse: [ scaling := 10 raisedToInteger: placesDesired.
			integerPart := numerator abs quo: denominator.
			roundedFractionPart := (numerator abs - (integerPart * denominator)) * scaling * 2 + denominator quo: denominator * 2.
			roundedFractionPart = scaling
				ifTrue: [ integerPart := integerPart + 1.
					roundedFractionPart := 0 ].	"Don't print minus sign if result is rouded to zero"
			(numerator negative and: [ integerPart > 0 or: [ roundedFractionPart > 0 ] ])
				ifTrue: [ aStream nextPut: $- ].
			integerPart printOn: aStream.
			aStream nextPut: $..
			roundedFractionPart
				printOn: aStream
				base: 10
				length: placesDesired
				padded: true ]

Fraction >> raisedToInteger: anInteger
raisedToInteger: anInteger
	"See Number | raisedToInteger:"

	anInteger = 0
		ifTrue: [ ^ 1 ].
	anInteger < 0
		ifTrue: [ ^ self reciprocal raisedToInteger: anInteger negated ].
	^ Fraction numerator: (numerator raisedToInteger: anInteger) denominator: (denominator raisedToInteger: anInteger)

Fraction >> reciprocal
reciprocal
	numerator abs = 1
		ifTrue: [ ^ denominator * numerator ].
	^ self class numerator: denominator denominator: numerator

Fraction >> reduced
reduced
	| gcd numer denom |
	numerator = 0
		ifTrue: [ ^ 0 ].
	gcd := numerator gcd: denominator.
	numer := numerator // gcd.
	denom := denominator // gcd.
	denom = 1
		ifTrue: [ ^ numer ].
	^ Fraction numerator: numer denominator: denom

Fraction >> round: numberOfWishedDecimal
round: numberOfWishedDecimal
	^ self asFloat round: numberOfWishedDecimal

Fraction >> setNumerator: n denominator: d
setNumerator: n denominator: d
	d = 0
		ifTrue: [ ^ (ZeroDivide dividend: n) signal ]
		ifFalse: [ numerator := n asInteger.
			denominator := d asInteger abs.	"keep sign in numerator"
			d < 0
				ifTrue: [ numerator := numerator negated ] ]

Fraction >> sqrt
sqrt
	| d n |
	n := numerator sqrt.
	d := denominator sqrt.	"The #sqrt method in integer will only answer a Float if there's no exact square root.	So, we need a float anyway."
	(n isInfinite or: [ d isInfinite ])
		ifTrue: [ ^ self asFloat sqrt ].
	^ n / d

Fraction >> squared
squared
	"See Fraction (Number) | squared"

	^ Fraction numerator: numerator squared denominator: denominator squared

Fraction >> storeOn: aStream base: base
storeOn: aStream base: base
	aStream nextPut: $(.
	numerator storeOn: aStream base: base.
	aStream nextPut: $/.
	denominator storeOn: aStream base: base.
	aStream nextPut: $)

Fraction >> truncated
truncated
	"Refer to the comment in Number|truncated."

	^ numerator quo: denominator

Fraction class >> numerator: numInteger denominator: denInteger
numerator: numInteger denominator: denInteger
	"Answer an instance of me (numInteger/denInteger).
	NOTE: This primitive initialization method will not reduce improper fractions,
	so normal usage should be coded as, eg,
		(Fraction numerator: a denominator: b) reduced
	or, more simply, as
		a / b."

	^ self new setNumerator: numInteger denominator: denInteger

Fraction class >> readFrom: stringOrStream
readFrom: stringOrStream
	"Answer a Fraction as described on aStream with following rules:
	- numerator can specify a different radix (like '16rABC').
	- fraction sign '/' is optional, and must immediately follow numerator without space.
	- denominator must immediately follow fraction sign and can specify a different radix (like 16rABC).
	If stringOrStream does not start with a valid number description, fail."

	^ (NumberParser on: stringOrStream) nextFraction

