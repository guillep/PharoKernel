Class
	superclass: #ClassDescription;
	traitComposition: TClass;
	instanceVariables: #(#subclasses #name #classPool #sharedPools #environment #category #traitComposition #localSelectors );
	package: #Kernel.

Class >> addInstVarNamed: aString
[
	"Add the argument, aString, as one of the receiver's instance variables."

	^ self classBuilder
		name: self name
		inEnvironment: self environment
		subclassOf: self superclass
		type: self typeOfClass
		instanceVariableNames: self instanceVariablesString , ' ' , aString
		classVariableNames: self classVariablesString
		poolDictionaries: self sharedPoolsString
		category: self category
]

Class >> addSubclass: aSubclass
[
	"Make the argument, aSubclass, be one of the subclasses of the receiver. 
	Create an error notification if the argument's superclass is not the receiver."

	aSubclass superclass ~~ self
		ifTrue: [ ^ self error: aSubclass name , ' is not my subclass' ].
	subclasses ifNil: [ self subclasses: (Array with: aSubclass).
			^ self ].
	self subclasses do: [ :cl | cl == aSubclass
				ifTrue: [ ^ self ] ].	"Already my subclass"
	self subclasses: (subclasses copyWith: aSubclass)
]

Class >> baseClass
[
	^ self
]

Class >> basicCategory
[
	^ category
]

Class >> basicCategory: aSymbol
[
	category := aSymbol
]

Class >> basicLocalSelectors
[
	"Direct accessor for the instance variable localSelectors.
	Since localSelectors is lazily initialized, this may 
	return nil, which means that all selectors are local."

	^ localSelectors
]

Class >> basicLocalSelectors: aSetOrNil
[
	localSelectors := aSetOrNil
]

Class >> classClass
[
	^ self class
]

Class >> classPool
[
	"Answer the dictionary of class variables."

	classPool ifNil: [ classPool := Dictionary new ].
	^ classPool
]

Class >> classPool: aDictionary
[
	classPool := aDictionary
]

Class >> copy
[
	"Answer a copy of the receiver without a list of subclasses.
	 This copy is used by the ClassBuilder when mutating classes on redefinition.
	 (SystemNavigation new browseAllCallsOn: #copy localTo: ClassBuilder)"

	| newClass |
	newClass := self class copy new
		superclass: superclass
		methodDict: self methodDict copy
		format: format
		name: name
		organization: self organization copy
		instVarNames: instanceVariables copy
		classPool: classPool copy
		sharedPools: sharedPools copy.
	Class instSize + 1 to: self class instSize do: [ :offset | newClass instVarAt: offset put: (self instVarAt: offset) ].
	^ newClass
]

Class >> environment
[
	environment ifNil: [ ^ super environment ].
	^ environment
]

Class >> environment: anEnvironment
[
	environment := anEnvironment
]

Class >> fileOutOn: aFileStream moveSource: moveSource toFile: fileIndex initializing: aBool
[
	"File a description of the receiver on aFileStream. If the boolean argument,
	moveSource, is true, then set the trailing bytes to the position of aFileStream and
	to fileIndex in order to indicate where to find the source code."

	self crTrace: self name.
	super fileOutOn: aFileStream moveSource: moveSource toFile: fileIndex.
	self class nonTrivial
		ifTrue: [ aFileStream
				cr;
				nextPutAll: '"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!';
				cr;
				cr.
			self class
				fileOutOn: aFileStream
				moveSource: moveSource
				toFile: fileIndex
				initializing: aBool ]
]

Class >> getName
[
	^ name
]

Class >> isClass
[
	^ true
]

Class >> name
[
	"Answer the name of the receiver."

	^ name ifNil: [ super name ]
]

Class >> name: aSymbol
[
	name := aSymbol
]

Class >> newAnonymousSubclass
[
	^ AnonymousClassInstaller make: [ :builder | builder superclass: self ]
]

Class >> setName: aSymbol
[
	name := aSymbol
]

Class >> sharedPools
[
	"Answer an orderedCollection  of the shared pools declared in the receiver."

	^ sharedPools ifNil: [ sharedPools := OrderedCollection new ]
]

Class >> sharedPools: aCollection
[
	sharedPools := aCollection
]

Class >> subclass: t instanceVariableNames: f classVariableNames: d poolDictionaries: s category: cat
[
	"This is the standard initialization message for creating a new class as a 
	subclass of an existing class (the receiver)."

	| class |
	class := self classBuilder
		superclass: self
		subclass: t
		instanceVariableNames: f
		classVariableNames: d
		poolDictionaries: s
		category: cat.
	class ifNotNil: [ class setTraitComposition: {} asTraitComposition ].
	^ class
]

Class >> subclass: className type: type uses: aTraitComposition instanceVariableNames: instanceVariableNames classVariableNames: classVariableNames classInstanceVariableNames: classInstanceVariableNames poolDictionaries: sharedPoolString compactClassIndex: index category: newCategory
[
	| newClass |
	newClass := PharoClassInstaller make: [ :builder |
		builder
			superclass: self;
			name: className;
			layoutClass: type;
			slots: instanceVariableNames asSlotCollection;
			sharedVariables: classVariableNames;
			sharedPools: sharedPoolString;
			category: newCategory;
			environment: self environment;
			classSlots: classInstanceVariableNames asSlotCollection ].
	newClass setTraitComposition: aTraitComposition asTraitComposition.
	newClass layout compactClassIndex: index.
	^ newClass
]

Class >> subclasses
[
	"Answer a Set containing the receiver's subclasses."

	^ subclasses ifNil: [ #() ] ifNotNil: [ subclasses copy ]
]

Class >> subclasses: aCollection
[
	subclasses := aCollection
]

Class >> traitComposition
[
	traitComposition ifNil: [ traitComposition := TraitComposition new ].
	^ traitComposition
]

Class >> traitComposition: aTraitComposition
[
	traitComposition := aTraitComposition
]

