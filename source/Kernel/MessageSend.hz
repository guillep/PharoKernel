MessageSend
	instanceVariables: #(#receiver #selector #arguments );
	package: #Kernel.

MessageSend >> = anObject
[
	^ anObject species == self species
		and: [ receiver == anObject receiver and: [ selector == anObject selector and: [ arguments = anObject arguments ] ] ]
]

MessageSend >> arguments
[
	^ arguments
]

MessageSend >> arguments: anArray
[
	arguments := anArray
]

MessageSend >> asMinimalRepresentation
[
	^ self
]

MessageSend >> asWeakMessageSend
[
	^ WeakMessageSend receiver: receiver selector: selector arguments: arguments copy
]

MessageSend >> collectArguments: anArgArray
[
	"Private"

	| staticArgs |
	staticArgs := self arguments.
	^ anArgArray size = staticArgs size
		ifTrue: [ anArgArray ]
		ifFalse: [ (staticArgs isEmpty
				ifTrue: [ staticArgs := Array new: selector numArgs ]
				ifFalse: [ staticArgs copy ])
				replaceFrom: 1
				to: (anArgArray size min: staticArgs size)
				with: anArgArray
				startingAt: 1 ]
]

MessageSend >> cull: arg
[
	^ selector numArgs = 0
		ifTrue: [ self value ]
		ifFalse: [ self value: arg ]
]

MessageSend >> cull: arg1 cull: arg2
[
	^ selector numArgs < 2
		ifTrue: [ self cull: arg1 ]
		ifFalse: [ self value: arg1 value: arg2 ]
]

MessageSend >> cull: arg1 cull: arg2 cull: arg3
[
	^ selector numArgs < 3
		ifTrue: [ self cull: arg1 cull: arg2 ]
		ifFalse: [ self value: arg1 value: arg2 value: arg3 ]
]

MessageSend >> hash
[
	^ receiver hash bitXor: selector hash
]

MessageSend >> isMessageSend
[
	^ true
]

MessageSend >> isValid
[
	^ true
]

MessageSend >> numArgs
[
	"Answer the number of arguments in this message"

	^ arguments size
]

MessageSend >> printOn: aStream
[
	aStream
		nextPutAll: self class name;
		nextPut: $(.
	selector printOn: aStream.
	aStream nextPutAll: ' -> '.
	receiver printOn: aStream.
	aStream nextPut: $)
]

MessageSend >> receiver
[
	^ receiver
]

MessageSend >> receiver: anObject
[
	receiver := anObject
]

MessageSend >> selector
[
	^ selector
]

MessageSend >> selector: aSymbol
[
	selector := aSymbol
]

MessageSend >> value
[
	"Send the message and answer the return value"

	receiver class isObsolete
		ifTrue: [ ^ nil ].
	(receiver isBehavior and: [ receiver isObsolete ])
		ifTrue: [ ^ nil ].
	arguments ifNil: [ ^ receiver perform: selector ].
	^ receiver perform: selector withArguments: (self collectArguments: arguments)
]

MessageSend >> value: anObject
[
	receiver class isObsolete
		ifTrue: [ ^ nil ].
	(receiver isBehavior and: [ receiver isObsolete ])
		ifTrue: [ ^ nil ].
	^ receiver perform: selector with: anObject
]

MessageSend >> value: anObject1 value: anObject2
[
	^ receiver perform: selector with: anObject1 with: anObject2
]

MessageSend >> value: anObject1 value: anObject2 value: anObject3
[
	^ receiver
		perform: selector
		with: anObject1
		with: anObject2
		with: anObject3
]

MessageSend >> valueWithArguments: anArray
[
	^ receiver perform: selector withArguments: (self collectArguments: anArray)
]

MessageSend >> valueWithEnoughArguments: anArray
[
	"call the selector with enough arguments from arguments and anArray"

	| args |
	args := Array new: selector numArgs.
	args
		replaceFrom: 1
		to: (arguments size min: args size)
		with: arguments
		startingAt: 1.
	args size > arguments size
		ifTrue: [ args
				replaceFrom: arguments size + 1
				to: (arguments size + anArray size min: args size)
				with: anArray
				startingAt: 1 ].
	^ receiver perform: selector withArguments: args
]

MessageSend class >> receiver: anObject selector: aSymbol
[
	^ self receiver: anObject selector: aSymbol arguments: #()
]

MessageSend class >> receiver: anObject selector: aSymbol argument: aParameter
[
	^ self receiver: anObject selector: aSymbol arguments: (Array with: aParameter)
]

MessageSend class >> receiver: anObject selector: aSymbol arguments: anArray
[
	^ self new
		receiver: anObject;
		selector: aSymbol;
		arguments: anArray
]

>> receiver: anObject selector: aSymbol
[receiver: anObject selector: aSymbol
	^ self receiver: anObject selector: aSymbol arguments: #()
]

MessageSend class >> receiver: anObject selector: aSymbol argument: aParameter
[receiver: anObject selector: aSymbol argument: aParameter
	^ self receiver: anObject selector: aSymbol arguments: (Array with: aParameter)
]

MessageSend class >> receiver: anObject selector: aSymbol arguments: anArray
[receiver: anObject selector: aSymbol arguments: anArray
	^ self new
		receiver: anObject;
		selector: aSymbol;
		arguments: anArray
]

