SubscriptOutOfBounds
	superclass: #Error;
	instanceVariables: #(#subscript #lowerBound #upperBound );
	package: #Kernel.

SubscriptOutOfBounds >> lowerBound
lowerBound
	^ lowerBound

SubscriptOutOfBounds >> lowerBound: anObject
lowerBound: anObject
	lowerBound := anObject

SubscriptOutOfBounds >> messageText
messageText
	"Overwritten to initialiaze the message text to a standard text if it has not yet been set"

	^ messageText ifNil: [ messageText := self standardMessageText ]

SubscriptOutOfBounds >> standardMessageText
standardMessageText
	"Generate a standard textual description"

	^ String
		streamContents: [ :stream | self subscript ifNil: [ stream << 'subscript' ] ifNotNil: [ stream print: self subscript ].
			(self lowerBound notNil and: [ self upperBound notNil ])
				ifTrue: [ stream << ' is not between '.
					stream print: self lowerBound.
					stream << ' and '.
					stream print: self upperBound ] ]

SubscriptOutOfBounds >> subscript
subscript
	^ subscript

SubscriptOutOfBounds >> subscript: anObject
subscript: anObject
	subscript := anObject

SubscriptOutOfBounds >> upperBound
upperBound
	^ upperBound

SubscriptOutOfBounds >> upperBound: anObject
upperBound: anObject
	upperBound := anObject

SubscriptOutOfBounds class >> signalFor: subscript
signalFor: subscript
	^ self signalFor: subscript lowerBound: nil upperBound: nil

SubscriptOutOfBounds class >> signalFor: subscript lowerBound: lowerBound upperBound: upperBound
signalFor: subscript lowerBound: lowerBound upperBound: upperBound
	^ self
		signalFor: subscript
		lowerBound: lowerBound
		upperBound: upperBound
		in: nil

SubscriptOutOfBounds class >> signalFor: subscript lowerBound: lowerBound upperBound: upperBound in: object
signalFor: subscript lowerBound: lowerBound upperBound: upperBound in: object
	^ self new
		signaler: object;
		subscript: subscript;
		lowerBound: lowerBound;
		upperBound: upperBound;
		signal

