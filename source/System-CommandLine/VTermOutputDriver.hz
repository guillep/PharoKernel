VTermOutputDriver
	instanceVariables: #(#termcap #outStream #currentBackground #currentColor #light #blink #shouldEcho );
	package: #'System-CommandLine'.

VTermOutputDriver class
	instanceVariables: #(#stdoutTerminalInstance #stderrTerminalInstance ).

VTermOutputDriver >> << aStringOrCharacter
<< aStringOrCharacter
	aStringOrCharacter putOn: outStream

VTermOutputDriver >> background256: aColor
background256: aColor
	"output an xterm 256 color extension sequence"

	self color256: aColor background: true

VTermOutputDriver >> backspace
backspace
	outStream nextPut: Character backspace.
	self deleteCharacter

VTermOutputDriver >> black
black
	self color: 30

VTermOutputDriver >> black: aString
black: aString
	self
		black;
		<< aString;
		flush;
		clear

VTermOutputDriver >> blinking
blinking
	self termcap: 'mb'

VTermOutputDriver >> blue
blue
	self color: 34

VTermOutputDriver >> blue: aString
blue: aString
	self
		blue;
		<< aString;
		flush;
		clear

VTermOutputDriver >> bold
bold
	" double bright mode "

	self termcap: 'md'

VTermOutputDriver >> clear
clear
	self reset.
	self colorEscape

VTermOutputDriver >> clearFromBeginning
clearFromBeginning
	self termcap: 'cb'

VTermOutputDriver >> clearScreen
clearScreen
	self termcap: 'cl'

VTermOutputDriver >> clearToEnd
clearToEnd
	self termcap: 'ce'

VTermOutputDriver >> closed
closed
	^ outStream isNil or: [ outStream closed ]

VTermOutputDriver >> color256: aColor
color256: aColor
	"output an xterm 256 color extension sequence."

	self color256: aColor background: false

VTermOutputDriver >> color256: aColor background: isBackground
color256: aColor background: isBackground
	"use the resources for colors 0-15 - usually more-or-less a reproduction of the standard ANSI colors, but possibly more pleasing shades

	colors 16-231 are a 6x6x6 color cube

	colors 232-255 are a grayscale ramp, intentionally leaving out black and white"

	self csiEscape.
	outStream nextPutAll: (isBackground
				ifFalse: [ '38;5;' ]
				ifTrue: [ '48;5;' ]).
	outStream
		print: aColor closestXTermPixelValue;
		nextPut: $m

VTermOutputDriver >> color: aColor
color: aColor
	currentColor := aColor.
	self colorEscape

VTermOutputDriver >> colorEscape
colorEscape
	self csiEscape.
	blink
		ifTrue: [ outStream nextPutAll: '5;' ].
	outStream print: currentColor.
	currentBackground == 0
		ifFalse: [ outStream
				nextPut: $;;
				print: currentBackground ].
	outStream nextPut: $m

VTermOutputDriver >> columns
columns
	^ termcap getnum: 'co'

VTermOutputDriver >> cr
cr
	self termcap: 'cr'

VTermOutputDriver >> csiEscape
csiEscape
	"Control Sequence Introducer escape"

	outStream
		nextPut: Character escape;
		nextPut: $[

VTermOutputDriver >> cursorEnhanced
cursorEnhanced
	self termcap: 'vs'

VTermOutputDriver >> cursorInvisible
cursorInvisible
	self termcap: 'vi'

VTermOutputDriver >> cursorNormal
cursorNormal
	self termcap: 've'

VTermOutputDriver >> cyan
cyan
	self color: 36

VTermOutputDriver >> cyan: aString
cyan: aString
	self
		cyan;
		<< aString;
		flush;
		clear

VTermOutputDriver >> deleteCharacter
deleteCharacter
	self termcap: 'dc'

VTermOutputDriver >> deleteLine
deleteLine
	self termcap: 'dl'

VTermOutputDriver >> down
down
	self termcap: 'do'

VTermOutputDriver >> down: distance
down: distance
	distance < 0
		ifTrue: [ 0 - distance timesRepeat: [ self up ] ]
		ifFalse: [ distance timesRepeat: [ self down ] ]

VTermOutputDriver >> echo
echo
	self echo: true

VTermOutputDriver >> echo: aBool
echo: aBool
	shouldEcho = aBool
		ifTrue: [ ^ self ].
	shouldEcho := aBool.
	self enable: #echo

VTermOutputDriver >> endInsertMode
endInsertMode
	self termcap: 'ei'

VTermOutputDriver >> erase
erase
	"outStream nextPutAll:
		(termcap parm: '1' in:
			(termcap getstr: 'ec'))"

	self shouldBeImplemented

VTermOutputDriver >> errorColor
errorColor
	self red.
	self reverse

VTermOutputDriver >> escape
escape
	outStream nextPut: Character escape

VTermOutputDriver >> flush
flush
	outStream flush

VTermOutputDriver >> green
green
	self color: 32

VTermOutputDriver >> green: aString
green: aString
	self
		green;
		<< aString;
		flush;
		clear

VTermOutputDriver >> here
here
	self flag: #todo.	"use termcap here"
	self csiEscape.
	outStream nextPut: $E

VTermOutputDriver >> home
home
	self termcap: 'ho'

VTermOutputDriver >> initialize
initialize
	super initialize.
	termcap := Termcap new.
	self reset

VTermOutputDriver >> insertCharacter
insertCharacter
	self termcap: 'ic'

VTermOutputDriver >> insertLine
insertLine
	self termcap: 'al'.
	self lf

VTermOutputDriver >> insertMode
insertMode
	self termcap: 'im'

VTermOutputDriver >> invisible
invisible
	self termcap: 'mk'

VTermOutputDriver >> left
left
	self termcap: 'le'

VTermOutputDriver >> left: distance
left: distance
	distance < 0
		ifTrue: [ 0 - distance timesRepeat: [ self right ] ]
		ifFalse: [ distance timesRepeat: [ self left ] ]

VTermOutputDriver >> lf
lf
	outStream lf

VTermOutputDriver >> light
light
	light := true

VTermOutputDriver >> lines
lines
	^ termcap getnum: 'li'

VTermOutputDriver >> nextPut: aCharacter
nextPut: aCharacter
	outStream nextPut: aCharacter

VTermOutputDriver >> nextPutAll: aString
nextPutAll: aString
	outStream nextPutAll: aString

VTermOutputDriver >> noEcho
noEcho
	self echo: false

VTermOutputDriver >> normal
normal
	self termcap: 'me'

VTermOutputDriver >> outStream
outStream
	^ outStream

VTermOutputDriver >> outStream: stream
outStream: stream
	outStream := stream

VTermOutputDriver >> overwrite: char
overwrite: char
	self flag: #TODO.	"properly implement this"
	outStream nextPut: char

VTermOutputDriver >> pink
pink
	self color: 35

VTermOutputDriver >> pink: aString
pink: aString
	self
		pink;
		nextPutAll: aString;
		flush;
		clear

VTermOutputDriver >> print: anObject
print: anObject
	outStream print: anObject

VTermOutputDriver >> red
red
	self color: 31

VTermOutputDriver >> red: aString
red: aString
	self
		red;
		<< aString;
		flush;
		clear

VTermOutputDriver >> reset
reset
	currentColor := 0.
	currentBackground := 0.
	light := false.
	blink := false

VTermOutputDriver >> restoreCursor
restoreCursor
	self termcap: 'rc'

VTermOutputDriver >> reverse
reverse
	self termcap: 'mr'

VTermOutputDriver >> right
right
	self termcap: 'nd'

VTermOutputDriver >> right: distance
right: distance
	distance < 0
		ifTrue: [ 0 - distance timesRepeat: [ self left ] ]
		ifFalse: [ distance timesRepeat: [ self right ] ]

VTermOutputDriver >> saveCursor
saveCursor
	outStream nextPutAll: (termcap getstr: 'sc')

VTermOutputDriver >> scrollBackward
scrollBackward
	self termcap: 'sr'

VTermOutputDriver >> scrollForward
scrollForward
	self termcap: 'sf'

VTermOutputDriver >> space
space
	outStream space

VTermOutputDriver >> ss3Escape
ss3Escape
	"Control Sequence Introducer escape"

	outStream
		nextPut: Character escape;
		nextPut: $O

VTermOutputDriver >> startOfLine
startOfLine
	^ self cr

VTermOutputDriver >> store: anObject
store: anObject
	outStream store: anObject

VTermOutputDriver >> tab
tab
	outStream tab

VTermOutputDriver >> termcap
termcap
	^ termcap

VTermOutputDriver >> termcap: termcapCapabilityIdentifier
termcap: termcapCapabilityIdentifier
	"Output the termcap command sequence for the identifier.
	Use #basicNextPutAll: to avoid possible conversions applied by the stream"

	outStream basicNextPutAll: (termcap getstr: termcapCapabilityIdentifier)

VTermOutputDriver >> topLeft
topLeft
	self termcap: 'ho'

VTermOutputDriver >> underline
underline
	self termcap: 'us'

VTermOutputDriver >> underlineOff
underlineOff
	self termcap: 'ue'

VTermOutputDriver >> up
up
	self termcap: 'up'

VTermOutputDriver >> up: distance
up: distance
	distance < 0
		ifTrue: [ 0 - distance timesRepeat: [ self down ] ]
		ifFalse: [ distance timesRepeat: [ self up ] ]

VTermOutputDriver >> white
white
	self color: 37

VTermOutputDriver >> white: aString
white: aString
	self
		white;
		<< aString;
		flush;
		clear

VTermOutputDriver >> width
width
	^ self columns

VTermOutputDriver >> yellow
yellow
	self color: 33

VTermOutputDriver >> yellow: aString
yellow: aString
	self
		yellow;
		<< aString;
		flush;
		clear

VTermOutputDriver class >> on: anOutputStream
on: anOutputStream
	^ self new
		outStream: anOutputStream;
		yourself

VTermOutputDriver class >> printText: aText
printText: aText
	" Example code shows how to output formatted text"

	| out |
	out := self stdout.
	aText
		doWithIndex: [ :char :index | aText
				attributesAt: index
				do: [ :attr | (attr isKindOf: TextEmphasis)
						ifTrue: [ out bold ].
					(attr isKindOf: TextColor)
						ifTrue: [ out color256: attr color ] ].
			char = Character cr
				ifTrue: [ out lf ]
				ifFalse: [ out << char ].
			out clear ].
	out lf

VTermOutputDriver class >> stderr
stderr
	^ self on: FileStream stderr

VTermOutputDriver class >> stdout
stdout
	^ self on: FileStream stdout

