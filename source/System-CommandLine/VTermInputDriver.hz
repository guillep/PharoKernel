VTermInputDriver
	instanceVariables: #(#inStream #handler #normal #csi #ss3 );
	package: #'System-CommandLine'.

VTermInputDriver >> closed
[
	^ inStream isNil or: [ inStream closed ]
]

VTermInputDriver >> continueReadCSINumber: v
[
	| value character |
	value := v.
	[ $0 <= (character := inStream next) and: [ character <= $9 ] ]
		whileTrue: [ value := value * 10 + (character asInteger - $0 asInteger) ].
	character = $~
		ifFalse: [ self fail: character in: 'Control Sequence Introducer (number end)' ].
	^ csi at: value ifAbsent: [ self fail: character in: 'Control Sequence Introducer (number end)' ]
]

VTermInputDriver >> fail: value in: mode
[
	self error: mode asString , ' does not support ' , value asString
]

VTermInputDriver >> handler: anObject
[
	handler := anObject
]

VTermInputDriver >> inStream: aStream
[
	inStream := aStream
]

VTermInputDriver >> initialize
[
	normal := Dictionary new.
	self initializeNormal: normal.
	ss3 := Dictionary new.
	self initializeSS3: ss3.
	csi := Dictionary new.
	self initializeCSI: csi
]

VTermInputDriver >> initializeCSI: actions
[
	actions at: $A put: [ handler up ].
	actions at: $B put: [ handler down ].
	actions at: $C put: [ handler right ].
	actions at: $D put: [ handler left ].
	actions at: $E put: [ handler here ].
	actions at: $F put: [ handler pageUp ].
	actions at: $H put: [ handler pageDown ].
	actions at: 1 put: [ handler find ].
	actions at: 2 put: [ handler insert ].
	actions at: 3 put: [ handler remove ].
	actions at: 4 put: [ handler select ].
	actions at: 5 put: [ handler previousScreen ].
	actions at: 6 put: [ handler nextScreen ].
	actions at: 15 put: [ handler functionKey: 5 ].
	actions at: 17 put: [ handler functionKey: 6 ].
	actions at: 18 put: [ handler functionKey: 7 ].
	actions at: 19 put: [ handler functionKey: 8 ].
	actions at: 20 put: [ handler functionKey: 9 ].
	actions at: 21 put: [ handler functionKey: 10 ].
	actions at: 23 put: [ handler functionKey: 11 ].
	actions at: 24 put: [ handler functionKey: 12 ].
	actions at: 25 put: [ handler functionKey: 13 ].
	actions at: 26 put: [ handler functionKey: 14 ].
	actions at: 28 put: [ handler functionKey: 15 ].
	actions at: 29 put: [ handler functionKey: 16 ].
	actions at: 31 put: [ handler functionKey: 17 ].
	actions at: 32 put: [ handler functionKey: 18 ].
	actions at: 33 put: [ handler functionKey: 19 ].
	actions at: 34 put: [ handler functionKey: 20 ].
	actions at: $[ put: [ self readCSI ]
]

VTermInputDriver >> initializeNormal: actions
[
	actions at: 1 put: [ handler startOfHeading ].
	actions at: 2 put: [ handler startOfText ].
	actions at: 3 put: [ handler endOfText ].
	actions at: 4 put: [ handler endOfTransmission ].
	actions at: 5 put: [ handler enquiry ].
	actions at: 6 put: [ handler acknowledge ].
	actions at: 7 put: [ handler bell ].
	actions at: 8 put: [ handler backspace ].
	actions at: 9 put: [ handler tab ].
	actions at: 10 put: [ handler lf ].
	actions at: 11 put: [ handler verticalTab ].
	actions at: 12 put: [ handler formfeed ].
	actions at: 13 put: [ handler carriageReturn ].
	actions at: 14 put: [ handler shiftOut ].
	actions at: 15 put: [ handler shiftIn ].
	actions at: 27 put: [ self readC1 ].
	actions at: 127 put: [ handler backspace ]
]

VTermInputDriver >> initializeSS3: actions
[
	actions at: $p put: [ handler keypad: 0 ].
	actions at: $q put: [ handler keypad: 1 ].
	actions at: $r put: [ handler keypad: 2 ].
	actions at: $s put: [ handler keypad: 3 ].
	actions at: $t put: [ handler keypad: 4 ].
	actions at: $u put: [ handler keypad: 5 ].
	actions at: $v put: [ handler keypad: 6 ].
	actions at: $w put: [ handler keypad: 7 ].
	actions at: $x put: [ handler keypad: 8 ].
	actions at: $y put: [ handler keypad: 9 ].
	actions at: $j put: [ handler keypadTimes ].
	actions at: $k put: [ handler keypadPlus ].
	actions at: $l put: [ handler keypadBacktick ].
	actions at: $n put: [ handler keypadDot ].
	actions at: $M put: [ handler keypadEnter ].
	actions at: $m put: [ handler keypadMinus ].
	actions at: $o put: [ handler keypadDivide ].
	actions at: $X put: [ handler keypadEqual ].
	actions at: $P put: [ handler functionKey: 1 ].
	actions at: $Q put: [ handler functionKey: 2 ].
	actions at: $R put: [ handler functionKey: 3 ].
	actions at: $S put: [ handler functionKey: 4 ].
	actions at: $H put: [ handler home ].
	actions at: $F put: [ handler end ]
]

VTermInputDriver >> read
[
	" C0 Control (Escape) mode "

	| character action |
	character := inStream next.
	character ifNil: [ Error signal: 'could not read character from input' ].
	action := normal at: character asInteger ifAbsent: [ ^ handler write: character ].
	action value
]

VTermInputDriver >> readC1
[
	" C1 Control Escape mode "

	| character |
	character := inStream next.
	character = $[
		ifTrue: [ ^ self readCSI ].
	character = $O
		ifTrue: [ ^ self readSS3 ].
	handler alt: character
]

VTermInputDriver >> readCSI
[
	" Control Sequence Introducer mode "

	| code character action |
	character := inStream next.
	action := ($0 <= character and: [ character <= $9 ])
		ifTrue: [ self continueReadCSINumber: character asInteger - $0 asInteger ]
		ifFalse: [ csi at: character ifAbsent: [ self fail: character in: 'Control Sequence Introducer' ] ].
	action value
]

VTermInputDriver >> readSS3
[
	" Single-Shift 3 mode "

	| character action |
	character := inStream next.
	action := ss3 at: character ifAbsent: [ self fail: character in: 'Single-Shift 3' ].
	action value
]

VTermInputDriver class >> on: inputStream
[
	^ self new
		inStream: inputStream;
		yourself
]

VTermInputDriver class >> stdIn
[
	^ self on: FileStream stdin
]

