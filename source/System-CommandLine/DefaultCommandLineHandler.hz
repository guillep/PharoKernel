DefaultCommandLineHandler
	superclass: #CommandLineHandler;
	package: #'System-CommandLine'.

DefaultCommandLineHandler >> activate
[
	self arguments ifEmpty: [ ^ self ].
	^ self handleArgument: self arguments first
]

DefaultCommandLineHandler >> copyright
[
	self stdout
		nextPutAll: Smalltalk licenseString;
		cr.
	self quit
]

DefaultCommandLineHandler >> error
[
	self arguments size = 1
		ifTrue: [ (self arguments first beginsWith: '-')
				ifTrue: [ self << 'Invalid option: ' ]
				ifFalse: [ self << 'Invalid sub command: ' ] ]
		ifFalse: [ self << 'Invalid arguments: "' ].
	(self << (' ' join: self arguments))
		nextPutAll: '"';
		cr.
	self printHelp.
	self exitFailure
]

DefaultCommandLineHandler >> handleArgument: aString
[
	"give priority to subcommands"

	self handleSubcommand == self
		ifFalse: [ ^ self ].	"check for default options"
	aString = '--version'
		ifTrue: [ ^ self version ].
	aString = '--help'
		ifTrue: [ ^ self help ].
	aString = '--list'
		ifTrue: [ ^ self list ].
	aString = '--copyright'
		ifTrue: [ ^ self copyright ].	"none of the previous options matched hence we output an error message"
	self error
]

DefaultCommandLineHandler >> handleSubcommand
[
	"check if there is an active subcommand"

	| handlers |
	handlers := self selectHandlers.	"ignore the default command line handler"
	handlers first = DefaultCommandLineHandler
		ifTrue: [ ^ self ].
	^ handlers first activateWith: commandLine
]

DefaultCommandLineHandler >> initialize
[
	super initialize.
	commandLine := CommandLineArguments new
]

DefaultCommandLineHandler >> list
[
	| handlers shortNames maxShortNameSize |
	self stdout
		nextPutAll: 'Currently installed Command Line Handlers:';
		lf.
	handlers := self allHandlers reject: [ :cls | cls = DefaultCommandLineHandler ].
	shortNames := handlers collect: #commandName.
	maxShortNameSize := (shortNames detectMax: [ :name | name size ]) size.
	handlers
		do: [ :handler | self stdout
				nextPutAll: '    ';
				nextPutAll: (handler commandName padRightTo: maxShortNameSize);
				nextPutAll: '    ';
				nextPutAll: (handler description ifNil: [ '--' ]);
				lf ].
	self quit
]

DefaultCommandLineHandler >> selectHandlers
[
	| handlers |
	handlers := CommandLineHandler selectHandlersFor: commandLine.
	handlers := handlers sort: [ :a :b | a priority >= b priority ].
	^ handlers
]

DefaultCommandLineHandler >> version
[
	self stdout
		nextPutAll: 'Image: ';
		print: SystemVersion current;
		cr;
		nextPutAll: 'VM:    ';
		nextPutAll: Smalltalk vm version;
		cr.
	self quit
]

DefaultCommandLineHandler class >> commandName
[
	^ ''
]

DefaultCommandLineHandler class >> description
[
	^ 'responsible for the default options and activating other commands'
]

DefaultCommandLineHandler class >> initialize
[
	"hook into the startup list"

	Smalltalk addToStartUpList: self
]

DefaultCommandLineHandler class >> isResponsibleFor: aCommandLine
[
	^ true
]

DefaultCommandLineHandler class >> priority
[
	"low priority"

	^ Float infinity negated
]

DefaultCommandLineHandler class >> startUp: resuming
[
	"only handle when lauching a new image"

	resuming
		ifFalse: [ ^ self ].
	Smalltalk addDeferredStartupAction: [ self new activate ]
]

