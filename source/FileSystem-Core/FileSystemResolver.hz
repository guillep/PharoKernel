FileSystemResolver
	instanceVariables: #(#next );
	package: #'FileSystem-Core'.

FileSystemResolver >> addResolver: aResolver
[
	next ifNil: [ next := aResolver ] ifNotNil: [ next addResolver: aResolver ]
]

FileSystemResolver >> canResolve: aSymbol
[
	^ self supportedOrigins includes: aSymbol
]

FileSystemResolver >> flushCaches
[
	self flushLocalCache.
	next ifNotNil: [ next flushCaches ]
]

FileSystemResolver >> flushLocalCache
[
	
]

FileSystemResolver >> next
[
	^ next
]

FileSystemResolver >> resolve: aSymbol
[
	^ (self canResolve: aSymbol)
		ifTrue: [ self perform: aSymbol ]
		ifFalse: [ self unknownOrigin: aSymbol ]
]

FileSystemResolver >> resolveString: aString
[
	| decoded fs |
	decoded := FilePathEncoder decode: aString.
	fs := FileSystem disk.
	^ FileReference fileSystem: fs path: (fs pathFromString: decoded)
]

FileSystemResolver >> supportedOrigins
[
	^ #()
]

FileSystemResolver >> unknownOrigin: aSymbol
[
	^ next ifNotNil: [ next resolve: aSymbol ]
]

ns
[supportedOrigins
	^ #()
]

FileSystemResolver >> unknownOrigin: aSymbol
[unknownOrigin: aSymbol
	^ next ifNotNil: [ next resolve: aSymbol ]
]

