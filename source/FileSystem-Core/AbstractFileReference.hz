AbstractFileReference
	package: #'FileSystem-Core'.

AbstractFileReference >> , extension
[, extension
	^ self withPath: self path , extension
]

AbstractFileReference >> / aString
[/ aString
	^ self withPath: self path / aString
]

AbstractFileReference >> <= other
[<= other
	^ self path <= other path
]

AbstractFileReference >> absolutePath
[absolutePath
	"Returns the absolute path"

	^ self subclassResponsibility
]

AbstractFileReference >> allChildren
[allChildren
	"Return all the files and folders recursively nested in the receiver"

	^ CollectVisitor breadthFirst: self resolve collect: [ :entry | entry reference ]
]

AbstractFileReference >> allDirectories
[allDirectories
	"Return all the directories recursively nested in the receiver."

	^ (SelectVisitor breadthFirst: self resolve select: [ :entry | entry isDirectory ]) collect: [ :each | each reference ]
]

AbstractFileReference >> allEntries
[allEntries
	^ CollectVisitor breadthFirst: self resolve
]

AbstractFileReference >> allFiles
[allFiles
	"Return all the files (not directories) recursively nested in the receiver."

	^ (SelectVisitor breadthFirst: self resolve select: [ :entry | entry isFile ]) collect: [ :each | each reference ]
]

AbstractFileReference >> asAbsolute
[asAbsolute
	self subclassResponsibility
]

AbstractFileReference >> asFileReference
[asFileReference
	self subclassResponsibility
]

AbstractFileReference >> asPathWith: anObject
[asPathWith: anObject
	^ self resolve asPathWith: anObject
]

AbstractFileReference >> asResolvedBy: anObject
[asResolvedBy: anObject
	^ anObject resolveReference: self
]

AbstractFileReference >> base
[base
	"Returns the base of the basename, i.e. /foo/gloops.taz base is 'gloops'"

	^ self fullPath base
]

AbstractFileReference >> basename
[basename
	"Returns the basename, i.e. /foo/gloops.taz basename is 'gloops.taz'"

	^ self fullPath basename
]

AbstractFileReference >> basenameWithIndicator
[basenameWithIndicator
	"Returns the basename with the indicator appended, i.e. /foo/gloops.taz basenameWithIndicator is 'gloops.taz', whereras /foo basenameWithIndicator is 'foo/'"

	^ self basename , self indicator
]

AbstractFileReference >> basenameWithoutExtension
[basenameWithoutExtension
	"Returns the basename, i.e. /foo/gloops.taz basenameWithoutExtension is 'gloops'"

	^ self fullPath basenameWithoutExtension
]

AbstractFileReference >> childGeneratorBlock: doBlock matching: patterns
[childGeneratorBlock: doBlock matching: patterns
	"
	FileDirectory default fileNamesMatching: '*'
	FileDirectory default fileNamesMatching: '*.image;*.changes'
	"

	| files reference |
	files := Set new.
	reference := self resolve.
	(patterns findTokens: ';' , String crlf)
		do: [ :pattern | doBlock value: reference value: [ :basename | (pattern match: basename)
						ifTrue: [ files add: self / basename ] ] ].
	^ files asOrderedCollection
]

AbstractFileReference >> childNames
[childNames
	^ self children collect: #basename
]

AbstractFileReference >> children
[children
	"Answer an array containing references to the direct children of this reference."

	| reference |
	reference := self resolve.
	^ (reference fileSystem childNamesAt: reference path) collect: [ :aName | self / aName ]
]

AbstractFileReference >> childrenMatching: patterns
[childrenMatching: patterns
	"
	FileSystem disk workingDirectory childrenMatching: '*'
	FileSystem disk workingDirectory childrenMatching: '*.image;*.changes'
	"

	^ self
		childGeneratorBlock: [ :reference :aBlock | reference fileSystem childNamesAt: reference path do: aBlock ]
		matching: patterns
]

AbstractFileReference >> contains: anObject
[contains: anObject
	"Return true if anObject is in a subfolder of me"

	^ anObject isContainedBy: self resolve
]

AbstractFileReference >> containsPath: aPath
[containsPath: aPath
	^ self fullPath containsPath: aPath
]

AbstractFileReference >> contents
[contents
	self readStreamDo: [ :stream | ^ stream contents ]
]

AbstractFileReference >> copyAllTo: aResolvable
[copyAllTo: aResolvable
	"Performs a deep copy of the receiver, to a location specified by the argument. If the receiver is a file, the file will be copied; if a directory, the directory and its contents will be copied recursively. The argument must be a reference that doesn't exist; it will be created by the copy."

	CopyVisitor copy: self resolve asAbsolute to: aResolvable resolve
]

AbstractFileReference >> copyTo: aReference
[copyTo: aReference
	^ self resolve copyTo: aReference resolve
]

AbstractFileReference >> copyWithPath: newPath
[copyWithPath: newPath
	self subclassResponsibility
]

AbstractFileReference >> createDirectory
[createDirectory
	"Create a new repository and raise an error if the directory already exist."

	self resolve createDirectory
]

AbstractFileReference >> creationTime
[creationTime
	^ self resolve creationTime
]

AbstractFileReference >> delete
[delete
	"Delete the receiver, does raise an error if it is not present."

	^ self resolve delete
]

AbstractFileReference >> deleteAll
[deleteAll
	"Delete this directory and all children of it, raise an error if the file does not exist."

	DeleteVisitor delete: self resolve
]

AbstractFileReference >> deleteAllChildren
[deleteAllChildren
	"delete all children of the receiver, raise an error if the receiver does not exist"

	self children do: [ :aReference | aReference deleteAll ]
]

AbstractFileReference >> deleteIfAbsent: aBlock
[deleteIfAbsent: aBlock
	"Delete the receiver, when it does not exist evaluate the block"

	self resolve deleteIfAbsent: aBlock
]

AbstractFileReference >> directories
[directories
	"Return all the directories (by opposition to files) contained in the receiver"

	| reference |
	reference := self resolve.
	^ (reference fileSystem directoryNamesAt: reference path) collect: [ :aName | self withPath: self path / aName ]
]

AbstractFileReference >> directoriesMatching: patterns
[directoriesMatching: patterns
	"
	FileSystem disk workingDirectory directoriesMatching: '*'
	FileSystem disk workingDirectory directoriesMatching: 'package-cache'
	"

	^ self
		childGeneratorBlock: [ :reference :aBlock | reference fileSystem directoryNamesAt: reference path do: aBlock ]
		matching: patterns
]

AbstractFileReference >> directoryNames
[directoryNames
	^ self directories collect: #basename
]

AbstractFileReference >> ensureCreateDirectory
[ensureCreateDirectory
	"Verifies that the directory does not exist and only creates if necessary. Do not remove files contained if they exist."

	^ self resolve ensureCreateDirectory
]

AbstractFileReference >> ensureCreateFile
[ensureCreateFile
	"Create if necessary a file for the receiver."

	self writeStream close
]

AbstractFileReference >> ensureDelete
[ensureDelete
	"Delete the file and does not raise exception if it does not exist contrary to delete"

	self deleteIfAbsent: [  ]
]

AbstractFileReference >> ensureDeleteAll
[ensureDeleteAll
	"Delete this directory and all children of it, and does not raise an error if the file does not exist."

	self exists
		ifFalse: [ ^ self ].
	self deleteAll
]

AbstractFileReference >> ensureDeleteAllChildren
[ensureDeleteAllChildren
	"delete all children of the receiver and does not raise an error if the receiver does not exist"

	self exists
		ifFalse: [ ^ self ].
	self deleteAllChildren
]

AbstractFileReference >> entries
[entries
	^ self resolve entries
]

AbstractFileReference >> entry
[entry
	^ self resolve entry
]

AbstractFileReference >> exists
[exists
	^ self resolve exists
]

AbstractFileReference >> extension
[extension
	^ self fullPath extension
]

AbstractFileReference >> extensions
[extensions
	"#('foo' 'foo.tar' 'foo.tar.gz' 'foo.1.tar' 'foo.1.tar.gz') collect: [:thing| thing extensions] => #(#() #('tar') #('tar' 'gz') #('1' 'tar') #('1' 'tar' 'gz'))"

	^ self fullPath extensions
]

AbstractFileReference >> fileNames
[fileNames
	^ self files collect: #basename
]

AbstractFileReference >> fileSystem
[fileSystem
	^ self resolve fileSystem
]

AbstractFileReference >> files
[files
	"Return all the files (as opposed to folders) contained in the receiver"

	| reference |
	reference := self resolve.
	^ (reference fileSystem fileNamesAt: reference path) collect: [ :aName | self withPath: self path / aName ]
]

AbstractFileReference >> filesMatching: patterns
[filesMatching: patterns
	"
	FileSystem disk workingDirectory filesMatching: '*'
	FileSystem disk workingDirectory filesMatching: '*.image;*.changes'
	"

	^ self
		childGeneratorBlock: [ :reference :aBlock | reference fileSystem fileNamesAt: reference path do: aBlock ]
		matching: patterns
]

AbstractFileReference >> fullName
[fullName
	^ self resolve fullName
]

AbstractFileReference >> fullNameWithIndicator
[fullNameWithIndicator
	"Returns the basename with the indicator appended, i.e. /foo/gloops.taz basenameWithIndicator is '/foo/gloops.taz', whereras /foo basenameWithIndicator is '/foo/'"

	^ self fullName , self indicator
]

AbstractFileReference >> fullPath
[fullPath
	"Returns the absolute path, better use absolutePath"

	^ self subclassResponsibility
]

AbstractFileReference >> glob: aBlock
[glob: aBlock
	^ SelectVisitor breadthFirst: self resolve select: aBlock
]

AbstractFileReference >> hasChildren
[hasChildren
	^ self resolve hasChildren
]

AbstractFileReference >> hasDirectories
[hasDirectories
	^ self resolve hasDirectories
]

AbstractFileReference >> hasFiles
[hasFiles
	^ self resolve hasFiles
]

AbstractFileReference >> hash
[hash
	"Hash is reimplemented because #= is reimplemented"

	^ self path hash
]

AbstractFileReference >> humanReadableSize
[humanReadableSize
	^ self size humanReadableSIByteSize
]

AbstractFileReference >> ifFile: fBlock ifDirectory: dBlock ifAbsent: aBlock
[ifFile: fBlock ifDirectory: dBlock ifAbsent: aBlock
	^ self isFile
		ifTrue: fBlock
		ifFalse: [ self isDirectory
				ifTrue: dBlock
				ifFalse: aBlock ]
]

AbstractFileReference >> indicator
[indicator
	"Returns a string indicating the type of reference:
	- '?' for a non existing reference',
	- '/' for a directory,
	- the empty string for a file."

	"When this framework gets more complete, it is possible to extend this behavior with the following indicators (taken from unix ls utility):
	- '*' for a regular file that is executable
	- '@' for a symbolic link
	- '|' for FIFOs
	- '=' for sockets
	- '>' for doors"

	^ self exists
		ifTrue: [ self isDirectory
				ifTrue: [ '/' ]
				ifFalse: [ '' ] ]
		ifFalse: [ '?' ]
]

AbstractFileReference >> isAbsolute
[isAbsolute
	self subclassResponsibility
]

AbstractFileReference >> isChildOf: anObject
[isChildOf: anObject
	^ self parent = anObject
]

AbstractFileReference >> isContainedBy: anObject
[isContainedBy: anObject
	"DoubleDispatch helper for #contains:"

	^ anObject containsReference: self resolve
]

AbstractFileReference >> isDirectory
[isDirectory
	^ self resolve isDirectory
]

AbstractFileReference >> isFile
[isFile
	^ self resolve isFile
]

AbstractFileReference >> isReadable
[isReadable
	^ self resolve isReadable
]

AbstractFileReference >> isRelative
[isRelative
	self subclassResponsibility
]

AbstractFileReference >> isRoot
[isRoot
	^ self resolve isRoot
]

AbstractFileReference >> isWritable
[isWritable
	^ self resolve isWritable
]

AbstractFileReference >> macTypeAndCreator
[macTypeAndCreator
	^ self resolve macTypeAndCreator
]

AbstractFileReference >> makeRelative: anObject
[makeRelative: anObject
	^ anObject relativeToReference: self resolve
]

AbstractFileReference >> mimeTypes
[mimeTypes
	^ self resolve mimeTypes
]

AbstractFileReference >> modificationTime
[modificationTime
	^ self resolve modificationTime
]

AbstractFileReference >> moveTo: aReference
[moveTo: aReference
	"Move the receiver in the location passed as argument.
	
	(FileSystem disk workingDirectory / 'paf' ) ensureCreateFile.
	(FileSystem disk workingDirectory / 'fooFolder') ensureCreateDirectory. 
	(FileSystem disk workingDirectory / 'paf' ) moveTo: (FileSystem disk workingDirectory / 'fooFolder' / 'paf')
	"

	^ self resolve moveTo: aReference
]

AbstractFileReference >> nextVersion
[nextVersion
	^ self resolve nextVersion
]

AbstractFileReference >> openWritable: aBoolean
[openWritable: aBoolean
	^ self resolve openWritable: aBoolean
]

AbstractFileReference >> parent
[parent
	^ self withPath: self path parent
]

AbstractFileReference >> pathSegments
[pathSegments
	^ self fullPath segments
]

AbstractFileReference >> pathString
[pathString
	^ self resolve pathString
]

AbstractFileReference >> permissions
[permissions
	"Return the FileSystemPermission for this node"

	^ self resolve permissions
]

AbstractFileReference >> readStream
[readStream
	self subclassResponsibility
]

AbstractFileReference >> readStreamDo: aBlock
[readStreamDo: aBlock
	| stream |
	stream := self readStream.
	^ [ aBlock value: stream ]
		ensure: [ stream close ]
]

AbstractFileReference >> readStreamDo: doBlock ifAbsent: absentBlock
[readStreamDo: doBlock ifAbsent: absentBlock
	^ self isFile
		ifTrue: [ self readStreamDo: doBlock ]
		ifFalse: absentBlock
]

AbstractFileReference >> readStreamIfAbsent: absentBlock
[readStreamIfAbsent: absentBlock
	^ self isFile
		ifTrue: [ self readStream ]
		ifFalse: absentBlock
]

AbstractFileReference >> relativeTo: landmark
[relativeTo: landmark
	"Answer a new path relative to landmark."

	"parent/child/grandChild relativeTo: parent returns child/grandChild
	(Filesystem disk / 'griffle' / 'plonk' / 'nurp') relativeTo: (Filesystem disk / 'griffle') 
	returns plonk/nurp"

	^ landmark makeRelative: self resolve
]

AbstractFileReference >> relativeToPath: landmarkPath
[relativeToPath: landmarkPath
	^ self fullPath relativeTo: landmarkPath
]

AbstractFileReference >> relativeToReference: landmarkReference
[relativeToReference: landmarkReference
	"Return the path of the receiver relative to landmarkReference."

	^ self fullPath relativeTo: landmarkReference path
]

AbstractFileReference >> renameTo: newBasename
[renameTo: newBasename
	self subclassResponsibility
]

AbstractFileReference >> resolve
[resolve
	^ self subclassResponsibility
]

AbstractFileReference >> resolve: anObject
[resolve: anObject
	^ anObject asResolvedBy: self
]

AbstractFileReference >> resolvePath: aPath
[resolvePath: aPath
	^ self withPath: (self path resolvePath: aPath)
]

AbstractFileReference >> resolveReference: aReference
[resolveReference: aReference
	^ aReference isAbsolute
		ifTrue: [ aReference ]
		ifFalse: [ self withPath: aReference path ]
]

AbstractFileReference >> resolveString: aString
[resolveString: aString
	self subclassResponsibility
]

AbstractFileReference >> size
[size
	^ self resolve size
]

AbstractFileReference >> streamWritable: writable do: aBlock
[streamWritable: writable do: aBlock
	^ writable
		ifTrue: [ self writeStreamDo: aBlock ]
		ifFalse: [ self readStreamDo: aBlock ]
]

AbstractFileReference >> uri
[uri
	"Convert my path into a file:// type url. For odd characters use %20 notation."

	^ self asUrl
]

AbstractFileReference >> withExtension: aString
[withExtension: aString
	^ self withPath: (self path withExtension: aString)
]

AbstractFileReference >> withPath: newPath
[withPath: newPath
	^ self path == newPath
		ifTrue: [ self ]
		ifFalse: [ self copyWithPath: newPath ]
]

AbstractFileReference >> writeStream
[writeStream
	self subclassResponsibility
]

AbstractFileReference >> writeStreamDo: aBlock
[writeStreamDo: aBlock
	| stream |
	stream := self writeStream.
	^ [ aBlock value: stream ]
		ensure: [ stream close ]
]

AbstractFileReference >> writeStreamDo: doBlock ifPresent: presentBlock
[writeStreamDo: doBlock ifPresent: presentBlock
	^ self isFile
		ifTrue: presentBlock
		ifFalse: [ self writeStreamDo: doBlock ]
]

AbstractFileReference >> writeStreamIfPresent: presentBlock
[writeStreamIfPresent: presentBlock
	^ self isFile
		ifTrue: presentBlock
		ifFalse: [ self writeStream ]
]

