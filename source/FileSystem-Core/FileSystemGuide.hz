FileSystemGuide
	instanceVariables: #(#visitor #work #selectChildren );
	package: #'FileSystem-Core'.

FileSystemGuide >> initialize
[
	super initialize.
	work := OrderedCollection new
]

FileSystemGuide >> initializeWithVisitor: aVisitor
[
	self initialize.
	visitor := aVisitor
]

FileSystemGuide >> pop
[
	^ work removeLast
]

FileSystemGuide >> push: anObject
[
	work add: anObject
]

FileSystemGuide >> pushAll: aCollection
[
	aCollection do: [ :ea | self push: ea ]
]

FileSystemGuide >> selectChildren
[
	^ selectChildren
]

FileSystemGuide >> selectChildren: aBlock
[
	"With this block you can control how the guide spreads over directories.
	Example: 
		self selectChildren: [ :parentEntry | parentEntry isSymlink not ].
		This will prevent the outer visitor to see any children of symlinked directories.
		
	Since the guides essentially rearrange the files visited controlling which children
	you see is the main concern of the guide. All the other visiting aspects can be 
	controlled in the visitor."

	selectChildren := aBlock
]

FileSystemGuide >> shouldVisitChildrenOf: anEntry
[
	^ selectChildren ifNil: [ true ] ifNotNil: [ selectChildren cull: anEntry ]
]

FileSystemGuide >> show: aReference
[
	self subclassResponsibility
]

FileSystemGuide >> top
[
	^ work removeFirst
]

FileSystemGuide >> whileNotDoneDo: aBlock
[
	[ work isEmpty ] whileFalse: [ aBlock value ]
]

FileSystemGuide class >> for: aVisitor
[
	^ self basicNew initializeWithVisitor: aVisitor
]

FileSystemGuide class >> show: aReference to: aVisitor
[
	^ (self for: aVisitor) show: aReference
]

FileSystemGuide class >> show: aReference to: aVisitor selecting: aBlock
[
	^ (self for: aVisitor)
		selectChildren: aBlock;
		show: aReference
]

itor
[show: aReference to: aVisitor
	^ (self for: aVisitor) show: aReference
]

FileSystemGuide class >> show: aReference to: aVisitor selecting: aBlock
[show: aReference to: aVisitor selecting: aBlock
	^ (self for: aVisitor)
		selectChildren: aBlock;
		show: aReference
]

