PharoClassInstaller
	superclass: #AbstractClassInstaller;
	instanceVariables: #(#environment #instanceModification #methodUpdateStrategy );
	package: #Slot.

PharoClassInstaller >> basicClassDefinitionChangedFrom: oldClass to: newClass using: classModification
[
	" Copy over the trait composition "

	self copyTraitCompositionFrom: oldClass to: newClass.	" Copy over the method organization "
	newClass organization: oldClass organization.	" Update the subclass links "
	oldClass superclass == newClass superclass
		ifFalse: [ oldClass superclass removeSubclass: oldClass.
			newClass superclass addSubclass: newClass ].	" Announce if necessary "
	classModification isPropagation
		ifFalse: [ self systemAnnouncer classDefinitionChangedFrom: oldClass to: newClass ]
]

PharoClassInstaller >> classAdded: aClass inCategory: aCategory
[
	" Install the new class in the system "

	environment at: aClass name put: aClass.
	environment flushClassNameCache.	" Update the system's organization "
	environment organization classify: aClass name under: aCategory.
	aClass environment: environment.
	"self systemAnnouncer classAdded: aClass inCategory: aCategory."
	" Inform superclass of new subclass "
	aClass superclass addSubclass: aClass
]

PharoClassInstaller >> classAt: aName ifAbsent: aBlock
[
	^ (environment at: aName ifAbsent: aBlock) ifNil: aBlock
]

PharoClassInstaller >> classDefinitionChangedFrom: oldClass to: newClass by: classModification
[
	self
		copyMethodsFrom: oldClass to: newClass using: classModification;
		basicClassDefinitionChangedFrom: oldClass to: newClass using: classModification;
		fixClassBindings: newClass
]

PharoClassInstaller >> copyMethodsFrom: oldClass to: newClass using: classModification
[
	methodUpdateStrategy transform: oldClass to: newClass using: classModification methodModification
]

PharoClassInstaller >> environment
[
	^ environment
]

PharoClassInstaller >> environment: anEnvironment
[
	environment := anEnvironment
]

PharoClassInstaller >> fixClassBindings: newClass
[
	methodUpdateStrategy updateClassLiteralKeysIn: newClass
]

PharoClassInstaller >> formatChangedFrom: oldClass to: newClass by: classModification
[
	self classDefinitionChangedFrom: oldClass to: newClass by: classModification
]

PharoClassInstaller >> initialize
[
	super initialize.
	environment := nil environment.
	methodUpdateStrategy := MethodRecompileStrategy new
]

PharoClassInstaller >> migrateClasses: old to: new using: anInstanceModification
[
	instanceModification := anInstanceModification.
	old ifEmpty: [ ^ self ].
	[ 1 to: old size do: [ :index | self updateClass: (old at: index) to: (new at: index) ].
	old elementsForwardIdentityTo: new.	" Garbage collect away the zombie instances left behind in garbage memory in #updateInstancesFrom: "	" If we don't clean up this garbage, a second update would revive them with a wrong layout! "	" (newClass rather than oldClass, since they are now both newClass) "
	Smalltalk garbageCollect ]
		valueUnpreemptively
]

PharoClassInstaller >> recategorize: aClass to: newCategory
[
	| oldCategory |
	oldCategory := aClass category.
	oldCategory asSymbol == newCategory asSymbol
		ifTrue: [ ^ self ].
	environment organization classify: aClass name under: newCategory.
	self systemAnnouncer class: aClass recategorizedFrom: oldCategory to: newCategory
]

PharoClassInstaller >> shallowClassDefinitionChangedFrom: oldClass to: newClass by: classModification
[
	" Copy over the method organization "

	" Update the superclass links "

	self
		shallowCopyMethodsFrom: oldClass to: newClass using: classModification;
		basicClassDefinitionChangedFrom: oldClass to: newClass using: classModification
]

PharoClassInstaller >> shallowCopyMethodsFrom: oldClass to: newClass using: classModification
[
	newClass methodDict: oldClass methodDict
]

PharoClassInstaller >> sharedVariableOrSharedPoolChangedFrom: oldClass to: newClass by: classModification
[
	self classDefinitionChangedFrom: oldClass to: newClass by: classModification.	"Adopt sub-hierarchies. No need to propagate the modification to them."
	oldClass subclasses do: [ :each | each superclass: newClass.
			newClass addSubclass: each ]
]

PharoClassInstaller >> slotsChangedFrom: oldClass to: newClass by: classModification
[
	self classDefinitionChangedFrom: oldClass to: newClass by: classModification
]

PharoClassInstaller >> superclassChangedFrom: oldClass to: newClass by: classModification
[
	self shallowClassDefinitionChangedFrom: oldClass to: newClass by: classModification
]

PharoClassInstaller >> systemAnnouncer
[
	^ SystemAnnouncer uniqueInstance
]

PharoClassInstaller >> updateClass: oldClass to: newClass
[
	newClass layout compactClassIndex: oldClass layout compactClassIndex.
	self updateInstancesFrom: oldClass to: newClass
]

PharoClassInstaller >> updateInstancesFrom: old to: new
[
	| oldInstances variable instSize newInstances map |
	oldInstances := old allInstances asArray.
	variable := new isVariable.
	instSize := new instSize.
	newInstances := Array new: oldInstances size.
	map := new instVarMappingFrom: old.
	1 to: oldInstances size do: [ :i | newInstances
			at: i
			put: (new
					newInstanceFrom: (oldInstances at: i)
					variable: variable
					size: instSize
					map: map) ].
	oldInstances elementsForwardIdentityTo: newInstances
]

PharoClassInstaller class >> example
[
	^ PharoClassInstaller
		make: [ :aSlotClassBuilder | aSlotClassBuilder
				superclass: Object;
				name: #MyClass;
				slots: #(#varA #varB);
				category: 'My-Category' ]
]

PharoClassInstaller class >> validateClassName: aString
[
	"Validate if a string can be the name of a new class. Raise an error if not."

	self new builder name: aString
]

