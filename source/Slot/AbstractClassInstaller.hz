AbstractClassInstaller
	instanceVariables: #(#builder );
	package: #Slot.

AbstractClassInstaller >> builder
[
	^ builder
]

AbstractClassInstaller >> classAdded: aClass inCategory: aCategory
[
	self subclassResponsibility
]

AbstractClassInstaller >> classAt: aName ifAbsent: aBlock
[
	self subclassResponsibility
]

AbstractClassInstaller >> classDefinitionDeeplyChangedFrom: oldClass to: newClass by: classModification
[
	self subclassResponsibility
]

AbstractClassInstaller >> classDefinitionShallowChangedFrom: oldClass to: newClass by: classModification
[
	self subclassResponsibility
]

AbstractClassInstaller >> copyTraitCompositionFrom: oldClass to: newClass
[
	self installTraitComposition: oldClass traitComposition copyTraitExpression on: newClass.	"We have to manually unsubcribe the newClass from its traits. Later in the class-building phase newClass becomeForward: oldClass and hence we can no longer distinguish the two. Which would leave `newClass trait users`, an IdetitySet, in an invalid state, as it's elements have been modified (the becomeForward:) without a proper rehash."
	newClass traitComposition traits do: [ :trait | trait removeUser: newClass ]
]

AbstractClassInstaller >> environment
[
	self subclassResponsibility
]

AbstractClassInstaller >> environment: anEnvironment
[
	self subclassResponsibility
]

AbstractClassInstaller >> initialize
[
	builder := SlotClassBuilder new.
	builder installer: self
]

AbstractClassInstaller >> installTraitComposition: aTraitComposition on: aClass
[
	self flag: 'Should probably send something else to test'.
	aClass setTraitComposition: aTraitComposition
]

AbstractClassInstaller >> migrateClasses: old to: new using: anInstanceModification
[
	self subclassResponsibility
]

AbstractClassInstaller >> recategorize: aClass to: aCategory
[
	self subclassResponsibility
]

AbstractClassInstaller class >> make: aBlock
[
	| builder |
	builder := self new builder.
	aBlock value: builder.
	^ builder build
]

