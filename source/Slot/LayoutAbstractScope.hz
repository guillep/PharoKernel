LayoutAbstractScope
	package: #Slot.

LayoutAbstractScope >> = other
[
	^ self class = other class
]

LayoutAbstractScope >> allSlotsDo: aBlock
[
	self subclassResponsibility
]

LayoutAbstractScope >> allSlotsReverseDo: aBlock
[
	self subclassResponsibility
]

LayoutAbstractScope >> atName: aName
[
	^ self atName: aName ifAbsent: [ SlotNotFound signalForName: aName ]
]

LayoutAbstractScope >> atName: aName ifAbsent: aBlock
[
	self allSlotsDo: [ :slot | slot name == aName
				ifTrue: [ ^ slot ] ].
	^ aBlock value
]

LayoutAbstractScope >> extend
[
	^ self extend: {}
]

LayoutAbstractScope >> extend: someSlots
[
	^ self extend: someSlots as: LayoutClassScope
]

LayoutAbstractScope >> extend: someSlots as: type
[
	| scope fieldIndex currentParentScope nextParentScope |
	scope := type new: someSlots size.
	fieldIndex := self firstFieldIndex.
	currentParentScope := self.
	someSlots
		withIndexDo: [ :slot :slotIndex | | realSlot |
			realSlot := slot asSlot.
			nextParentScope := realSlot parentScopeFor: currentParentScope.
			nextParentScope == currentParentScope
				ifFalse: [ currentParentScope := nextParentScope.
					fieldIndex := fieldIndex + currentParentScope ownFieldSize ].
			realSlot index: fieldIndex.
			fieldIndex := fieldIndex + realSlot size.
			scope at: slotIndex put: realSlot ].
	scope parentScope: currentParentScope.
	^ scope
]

LayoutAbstractScope >> fieldSize
[
	self subclassResponsibility
]

LayoutAbstractScope >> firstFieldIndex
[
	^ self fieldSize + 1
]

LayoutAbstractScope >> flatten
[
	self subclassResponsibility
]

LayoutAbstractScope >> hasFields
[
	self subclassResponsibility
]

LayoutAbstractScope >> hasSlots
[
	self subclassResponsibility
]

LayoutAbstractScope >> hash
[
	^ self class hash
]

LayoutAbstractScope >> ownFieldSize
[
	self subclassResponsibility
]

LayoutAbstractScope >> printSlotDefinitionOn: aStream
[
	self subclassResponsibility
]

LayoutAbstractScope >> rebase: originalScope to: newScope
[
	self error: 'Should not happen'
]

LayoutAbstractScope >> visibleSlotNames
[
	self subclassResponsibility
]

LayoutAbstractScope >> withParentScopesDo: aBlock
[
	self subclassResponsibility
]

