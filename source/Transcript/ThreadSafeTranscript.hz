ThreadSafeTranscript
	instanceVariables: #(#stream #accessSemaphore );
	package: #Transcript.

ThreadSafeTranscript >> << aString
[
	self show: aString
]

ThreadSafeTranscript >> black
[
	"copied from Transcripter"

	Display depth = 1
		ifTrue: [ ^ Bitmap with: 16rFFFFFFFF	"Works without color support" ].
	^ Color black
]

ThreadSafeTranscript >> characterLimit
[
	^ 20000
]

ThreadSafeTranscript >> clear
[
	"Clear all characters and redisplay the view"

	self changed: #clearText.
	accessSemaphore critical: [ stream reset ]
]

ThreadSafeTranscript >> close
[
	self flush.
	accessSemaphore critical: [ stream close ]
]

ThreadSafeTranscript >> contents
[
	^ accessSemaphore critical: [ stream contents ]
]

ThreadSafeTranscript >> cr
[
	accessSemaphore critical: [ stream cr ]
]

ThreadSafeTranscript >> crShow: anObject
[
	self
		cr;
		show: anObject
]

ThreadSafeTranscript >> endEntry
[
	"Display all the characters since the last endEntry, and reset the
  stream "

	accessSemaphore critical: [ self changed: #appendEntry.
			stream resetContents ]
]

ThreadSafeTranscript >> ensureCr
[
	"do nothing, its here only for compatibility"

	
]

ThreadSafeTranscript >> flush
[
	self endEntry
]

ThreadSafeTranscript >> initialExtent
[
	^ 447 @ 300
]

ThreadSafeTranscript >> initialize
[
	super initialize.
	accessSemaphore := Mutex new.
	stream := String new writeStream
]

ThreadSafeTranscript >> isSelfEvaluating
[
	self == Transcript
		ifTrue: [ ^ true ].
	^ super isSelfEvaluating
]

ThreadSafeTranscript >> nextPut: value
[
	accessSemaphore critical: [ stream nextPut: value ].
	^ value
]

ThreadSafeTranscript >> nextPutAll: value
[
	accessSemaphore critical: [ stream nextPutAll: value ].
	^ value
]

ThreadSafeTranscript >> pastEndPut: anObject
[
	"If the stream reaches its limit, just output the contents and reset."

	self endEntry.
	^ self nextPut: anObject
]

ThreadSafeTranscript >> print: anObject
[
	self nextPutAll: anObject asString
]

ThreadSafeTranscript >> printOn: aStream
[
	self == Transcript
		ifFalse: [ ^ super printOn: aStream ].
	aStream nextPutAll: 'Transcript'
]

ThreadSafeTranscript >> reset
[
	
]

ThreadSafeTranscript >> show: anObject
[
	self
		print: anObject;
		endEntry
]

ThreadSafeTranscript >> space
[
	accessSemaphore critical: [ stream space ]
]

ThreadSafeTranscript >> tab
[
	accessSemaphore critical: [ stream tab ]
]

ThreadSafeTranscript >> title
[
	^ 'Transcript'
]

ThreadSafeTranscript >> white
[
	"copied from Transcripter"

	Display depth = 1
		ifTrue: [ ^ Bitmap with: 0	"Works without color support" ].
	^ Color white
]

ThreadSafeTranscript >> with: aBlock
[
	^ accessSemaphore critical: [ aBlock value: stream ]
]

ThreadSafeTranscript class >> examples
[
	"self examples"

	| tt |
	Smalltalk globals at: #STranscript ifAbsent: [ self installThreadSafeAsSTranscript ].
	tt := Smalltalk globals at: #STranscript.
	tt open.
	tt
		nextPutAll: 'Pharo';
		flush;
		cr;
		tab.
	tt
		show: ' is cool';
		cr.
	tt reset.
	tt clear.
	tt
		nextPutAll: 'Pharo';
		flush;
		cr;
		tab.
	tt
		show: ' is really cool';
		cr
]

ThreadSafeTranscript class >> examplesConcurrent
[
	"self examplesConcurrent"

	| tt |
	Smalltalk globals at: #STranscript ifAbsent: [ self installThreadSafeAsSTranscript ].
	tt := Smalltalk globals at: #STranscript.
	tt open.
	[ 1 to: 10 do: [ :i | tt
			nextPutAll: i printString;
			nextPutAll: '*'.
		Processor yield ].
	tt flush ] fork.
	[ 100 to: 110 do: [ :i | tt
			nextPutAll: i printString;
			nextPutAll: '-'.
		Processor yield ].
	tt flush ] fork
]

ThreadSafeTranscript class >> examplesForegroundUpdate
[
	"self examplesForegroundUpdate"

	| tt length |
	Smalltalk globals at: #STranscript ifAbsent: [ self installThreadSafeAsSTranscript ].
	tt := Smalltalk globals at: #STranscript.
	tt open.
	length := 20.
	tt
		cr;
		show: 'STARTING----->'.	"Foreground updates"
	1000 to: 1000 + length do: [ :i | tt show: '---' , i printString , '---'.
		(Delay forSeconds: 1) wait ]
]

ThreadSafeTranscript class >> install
[
	self installThreadSafeAsTranscript
]

ThreadSafeTranscript class >> installThreadSafeAsTranscript
[
	Smalltalk globals at: #Transcript put: self new	"ThreadSafeTranscript open"
]

ThreadSafeTranscript class >> menuCommandOn: aBuilder
[
	<worldMenu>
	(aBuilder item: #Transcript)
		action: [ Smalltalk tools transcript open ];
		parent: #Tools;
		help: 'Transcript';
		icon: self taskbarIcon
]

