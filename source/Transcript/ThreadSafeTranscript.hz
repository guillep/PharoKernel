ThreadSafeTranscript
	superclass: #Model;
	instanceVariables: #(#stream #accessSemaphore );
	package: #Transcript.

ThreadSafeTranscript >> << aString
<< aString
	self show: aString

ThreadSafeTranscript >> black
black
	"copied from Transcripter"

	Display depth = 1
		ifTrue: [ ^ Bitmap with: 16rFFFFFFFF	"Works without color support" ].
	^ Color black

ThreadSafeTranscript >> characterLimit
characterLimit
	^ 20000

ThreadSafeTranscript >> clear
clear
	"Clear all characters and redisplay the view"

	self changed: #clearText.
	accessSemaphore critical: [ stream reset ]

ThreadSafeTranscript >> close
close
	self flush.
	accessSemaphore critical: [ stream close ]

ThreadSafeTranscript >> codePaneMenu: aMenu shifted: shifted
codePaneMenu: aMenu shifted: shifted
	"Note that unless we override perform:orSendTo:, 
	PluggableTextController will respond to all menu items in a 
	text pane"

	^ shifted
		ifTrue: [ SmalltalkEditor shiftedYellowButtonMenu ]
		ifFalse: [ SmalltalkEditor yellowButtonMenu ]

ThreadSafeTranscript >> contents
contents
	^ accessSemaphore critical: [ stream contents ]

ThreadSafeTranscript >> cr
cr
	accessSemaphore critical: [ stream cr ]

ThreadSafeTranscript >> crShow: anObject
crShow: anObject
	self
		cr;
		show: anObject

ThreadSafeTranscript >> endEntry
endEntry
	"Display all the characters since the last endEntry, and reset the
  stream "

	accessSemaphore critical: [ self changed: #appendEntry.
			stream resetContents ]

ThreadSafeTranscript >> ensureCr
ensureCr
	"do nothing, its here only for compatibility"

	

ThreadSafeTranscript >> flush
flush
	self endEntry

ThreadSafeTranscript >> initialExtent
initialExtent
	^ 447 @ 300

ThreadSafeTranscript >> initialize
initialize
	super initialize.
	accessSemaphore := Mutex new.
	stream := String new writeStream

ThreadSafeTranscript >> isSelfEvaluating
isSelfEvaluating
	self == Transcript
		ifTrue: [ ^ true ].
	^ super isSelfEvaluating

ThreadSafeTranscript >> nextPut: value
nextPut: value
	accessSemaphore critical: [ stream nextPut: value ].
	^ value

ThreadSafeTranscript >> nextPutAll: value
nextPutAll: value
	accessSemaphore critical: [ stream nextPutAll: value ].
	^ value

ThreadSafeTranscript >> pastEndPut: anObject
pastEndPut: anObject
	"If the stream reaches its limit, just output the contents and reset."

	self endEntry.
	^ self nextPut: anObject

ThreadSafeTranscript >> print: anObject
print: anObject
	self nextPutAll: anObject asString

ThreadSafeTranscript >> printOn: aStream
printOn: aStream
	self == Transcript
		ifFalse: [ ^ super printOn: aStream ].
	aStream nextPutAll: 'Transcript'

ThreadSafeTranscript >> reset
reset
	

ThreadSafeTranscript >> show: anObject
show: anObject
	self
		print: anObject;
		endEntry

ThreadSafeTranscript >> space
space
	accessSemaphore critical: [ stream space ]

ThreadSafeTranscript >> tab
tab
	accessSemaphore critical: [ stream tab ]

ThreadSafeTranscript >> title
title
	^ 'Transcript'

ThreadSafeTranscript >> white
white
	"copied from Transcripter"

	Display depth = 1
		ifTrue: [ ^ Bitmap with: 0	"Works without color support" ].
	^ Color white

ThreadSafeTranscript >> with: aBlock
with: aBlock
	^ accessSemaphore critical: [ aBlock value: stream ]

ThreadSafeTranscript class >> examples
examples
	"self examples"

	| tt |
	Smalltalk globals at: #STranscript ifAbsent: [ self installThreadSafeAsSTranscript ].
	tt := Smalltalk globals at: #STranscript.
	tt open.
	tt
		nextPutAll: 'Pharo';
		flush;
		cr;
		tab.
	tt
		show: ' is cool';
		cr.
	tt reset.
	tt clear.
	tt
		nextPutAll: 'Pharo';
		flush;
		cr;
		tab.
	tt
		show: ' is really cool';
		cr

ThreadSafeTranscript class >> examplesConcurrent
examplesConcurrent
	"self examplesConcurrent"

	| tt |
	Smalltalk globals at: #STranscript ifAbsent: [ self installThreadSafeAsSTranscript ].
	tt := Smalltalk globals at: #STranscript.
	tt open.
	[ 1 to: 10 do: [ :i | tt
			nextPutAll: i printString;
			nextPutAll: '*'.
		Processor yield ].
	tt flush ] fork.
	[ 100 to: 110 do: [ :i | tt
			nextPutAll: i printString;
			nextPutAll: '-'.
		Processor yield ].
	tt flush ] fork

ThreadSafeTranscript class >> examplesForegroundUpdate
examplesForegroundUpdate
	"self examplesForegroundUpdate"

	| tt length |
	Smalltalk globals at: #STranscript ifAbsent: [ self installThreadSafeAsSTranscript ].
	tt := Smalltalk globals at: #STranscript.
	tt open.
	length := 20.
	tt
		cr;
		show: 'STARTING----->'.	"Foreground updates"
	1000 to: 1000 + length do: [ :i | tt show: '---' , i printString , '---'.
		(Delay forSeconds: 1) wait ]

ThreadSafeTranscript class >> install
install
	self installThreadSafeAsTranscript

ThreadSafeTranscript class >> installThreadSafeAsSTranscript
installThreadSafeAsSTranscript
	Smalltalk globals at: #STranscript put: self new	"ThreadSafeTranscript open"

ThreadSafeTranscript class >> installThreadSafeAsTranscript
installThreadSafeAsTranscript
	Smalltalk globals at: #Transcript put: self new	"ThreadSafeTranscript open"

ThreadSafeTranscript class >> menuCommandOn: aBuilder
menuCommandOn: aBuilder
	<worldMenu>
	(aBuilder item: #Transcript)
		action: [ Smalltalk tools transcript open ];
		parent: #Tools;
		help: 'Transcript';
		icon: self taskbarIcon

