LargeNegativeInteger
	superclass: #LargePositiveInteger;
	instanceSpecification: #(#variable #byte );
	package: #'Kernel-Numbers'.

LargeNegativeInteger >> abs
[
	^ self negated
]

LargeNegativeInteger >> asFloat
[
	^ self negated asFloat negated
]

LargeNegativeInteger >> bitAt: anInteger
[
	"super would not work because we have to pretend we are in two-complement.
	this has to be tricky..."

	| digitIndex bitIndex i |
	digitIndex := (anInteger - 1) // 8 + 1.
	digitIndex > self digitLength
		ifTrue: [ ^ 1 ].
	bitIndex := (anInteger - 1) \\ 8 + 1.
	i := 1.
	[ 
	i = digitIndex
		ifTrue: [ 
			"evaluate two complement (bitInvert + 1) on the digit :			(if digitIndex > 1, we must still add 1 due to the carry).			but x bitInvert is -1-x, bitInvert+1 is just x negated..."
			^ (self digitAt: digitIndex) negated bitAt: bitIndex ].
	(self digitAt: i) = 0 ]
		whileTrue: [ 
			"two complement (bitInvert + 1) raises a carry:			0 bitInvert -> 2r11111111.  2r11111111 + 1 -> 0 with carry...			Thus we must inquire one digit forward"
			i := i + 1 ].	"We escaped the while loop, because there is no more carry.	Do a simple bitInvert without a carry"
	^ 1 - ((self digitAt: digitIndex) bitAt: bitIndex)
]

LargeNegativeInteger >> highBit
[
	"Answer the index of the high order bit of the receiver, or zero if the  
	receiver is zero. Raise an error if the receiver is negative, since  
	negative integers are defined to have an infinite number of leading 1's 
	in 2's-complement arithmetic. Use >>highBitOfMagnitude if you want to  
	get the highest bit of the magnitude."

	^ self shouldNotImplement
]

LargeNegativeInteger >> ln
[
	^ DomainError signal: 'ln is only defined for x > 0' from: 0
]

LargeNegativeInteger >> log
[
	^ DomainError signal: 'log is only defined for x > 0' from: 0
]

LargeNegativeInteger >> negated
[
	^ self copyto: (LargePositiveInteger new: self digitLength)
]

LargeNegativeInteger >> negative
[
	"Answer whether the receiver is mathematically negative."

	^ true
]

LargeNegativeInteger >> normalize
[
	"Check for leading zeroes and return shortened copy if so"

	<primitive: 'primNormalizeNegative' module: 'LargeIntegers'>
	| sLen val len oldLen minVal |
	len := oldLen := self digitLength.	"First establish len = significant length"
	[ len = 0
		ifTrue: [ ^ 0 ].
	(self digitAt: len) = 0 ] whileTrue: [ len := len - 1 ].	"Now check if in SmallInteger range"
	sLen := 4.	"SmallInteger minVal digitLength"
	len <= sLen
		ifTrue: [ minVal := SmallInteger minVal.
			(len < sLen or: [ (self digitAt: sLen) < minVal lastDigit ])
				ifTrue: [ "If high digit less, then can be small"
					val := 0.
					len to: 1 by: -1 do: [ :i | val := val * 256 - (self digitAt: i) ].
					^ val ].
			1 to: sLen do: [ :i "If all digits same, then = minVal" | (self digitAt: i) = (minVal digitAt: i)
					ifFalse: [ "Not so; return self shortened"
						len < oldLen
							ifTrue: [ ^ self growto: len ]
							ifFalse: [ ^ self ] ] ].
			^ minVal ].	"Return self, or a shortened copy"
	len < oldLen
		ifTrue: [ ^ self growto: len ]
		ifFalse: [ ^ self ]
]

LargeNegativeInteger >> positive
[
	"Answer whether the receiver is positive or equal to 0. (ST-80 protocol).
	See also strictlyPositive"

	^ false
]

LargeNegativeInteger >> printOn: aStream base: b
[
	"Append a representation of this number in base b on aStream."

	aStream nextPut: $-.
	self abs printOn: aStream base: b
]

LargeNegativeInteger >> sign
[
	"Optimization. Answer -1 since receiver is less than 0."

	^ -1
]

LargeNegativeInteger >> sqrt
[
	"Answer the square root of the receiver."

	^ DomainError signal: 'sqrt undefined for number less than zero.'
]

LargeNegativeInteger >> strictlyPositive
[
	"Answer whether the receiver is mathematically positive."

	^ false
]

