FilePath
	instanceVariables: #(#squeakPathName #vmPathName );
	package: #'Files-Directories'.

FilePath >> asSqueakPathName
[
	^ self pathName
]

FilePath >> asString
[
	^ self asSqueakPathName
]

FilePath >> asVmPathName
[
	^ vmPathName
]

FilePath >> copySystemToVm
[
	(self class instVarNames includes: 'systemPathName')
		ifTrue: [ vmPathName := self instVarNamed: 'systemPathName' ]
]

FilePath >> isNullPath
[
	"an empty path is used to represent the root path(s) when calling the primitive to list directory entries. Some users need to check for this and this is cleaner than grabbing the pathname and assuming it is a plain String"

	^ self pathName isEmpty
]

FilePath >> pathName
[
	^ squeakPathName
]

FilePath >> pathName: p isEncoded: isEncoded
[
	| encodingConverter |
	encodingConverter := LanguageEnvironment defaultFileNameConverter.
	isEncoded
		ifTrue: [ squeakPathName := p convertFromWithConverter: encodingConverter.
			vmPathName := p ]
		ifFalse: [ squeakPathName := p isOctetString
				ifTrue: [ p asOctetString ]
				ifFalse: [ p ].
			vmPathName := squeakPathName convertToWithConverter: encodingConverter ]
]

FilePath >> printOn: aStream
[
	aStream nextPutAll: 'FilePath('''.
	aStream nextPutAll: squeakPathName.
	aStream nextPutAll: ''')'
]

FilePath class >> classVersion
[
	^ 1
]

FilePath class >> pathName: pathName
[
	^ self pathName: pathName isEncoded: false
]

FilePath class >> pathName: pathName isEncoded: aBoolean
[
	^ self new
		pathName: pathName isEncoded: aBoolean;
		yourself
]

