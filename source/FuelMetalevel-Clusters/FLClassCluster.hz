Class
	name: #FLClassCluster;
	superclass: #ClassFLBehaviorCluster;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #();
	classVariables: #();
	package: #'FuelMetalevel-Clusters'.

Class FLClassCluster >> materializeInstanceWith: aDecoder
[
| aMetaclass |aMetaclass := aDecoder nextEncodedReference.^ aMetaclass new
]

Class FLClassCluster >> materializePostInstance: aClass with: aDecoder
[
| superclass category name instanceVariableNames format |superclass := aDecoder nextEncodedReference.category := aDecoder nextEncodedReference.name := aDecoder nextEncodedReference.format := aDecoder nextEncodedReference.instanceVariableNames := aDecoder nextEncodedString subStrings: ' '.aClass	superclass: superclass;	setFormat: format;	setName: name;	basicInstVarNames: instanceVariableNames;	basicCategory: category;	methodDict: MethodDictionary new
]

Class FLClassCluster >> materializeReferencesOf: aClass with: aDecoder
[
super materializeReferencesOf: aClass with: aDecoder.aClass classPool: aDecoder nextEncodedReference.aClass sharedPools: aDecoder nextEncodedReference.aClass environment: aDecoder nextEncodedReference.aClass basicSubclasses: aDecoder nextEncodedReference.Class class instSize + 1 to: aClass class instSize do: [ :index | aClass instVarAt: index put: aDecoder nextEncodedReference ]
]

Class FLClassCluster >> referencesOf: aClass do: aBlock
[
super referencesOf: aClass do: aBlock.aBlock value: aClass classSide.aBlock value: aClass superclass.aBlock value: aClass basicClassPool.aBlock value: aClass basicSharedPools.aBlock value: aClass category.aBlock value: aClass name.aBlock value: aClass format.aBlock value: aClass basicEnvironment.aBlock value: aClass basicSubclasses.Class class instSize + 1 to: aClass class instSize do: [ :index | aBlock value: (aClass instVarAt: index) ]
]

Class FLClassCluster >> serializeInstance: aClass with: anEncoder
[
anEncoder encodeReferenceTo: aClass classSide
]

Class FLClassCluster >> serializePostInstance: aClass with: anEncoder
[
anEncoder encodeReferenceTo: aClass superclass.	"Do not use #basicCategory because since it may be lazily computed it may happen that it is still in nil. "anEncoder encodeReferenceTo: aClass category.anEncoder encodeReferenceTo: aClass name.anEncoder encodeReferenceTo: aClass format.anEncoder encodeString: aClass instanceVariablesString.self flag: #todo	"The array of variable names represents a circularity problem between clusters: if we encode the reference to such array, then the cluster for arrays should be before of Class cluster. But this would disable us to serialize an array of internal classes."
]

Class FLClassCluster >> serializeReferencesOf: aClass with: anEncoder
[
super serializeReferencesOf: aClass with: anEncoder.anEncoder encodeReferenceTo: aClass basicClassPool.anEncoder encodeReferenceTo: aClass basicSharedPools.anEncoder encodeReferenceTo: aClass basicEnvironment.anEncoder encodeReferenceTo: aClass basicSubclasses.Class class instSize + 1 to: aClass class instSize do: [ :index | anEncoder encodeReferenceTo: (aClass instVarAt: index) ]
]

Metaclass
	name: #FLClassCluster;
	instanceVariables: #().

Metaclass FLClassCluster >> clusterBucketIn: aClusterization
[
^ aClusterization metalevelInstanceSideBucket
]

