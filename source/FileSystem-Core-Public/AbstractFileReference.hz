AbstractFileReference
	package: #'FileSystem-Core-Public'.

AbstractFileReference >> , extension
[
	^ self withPath: self path , extension
]

AbstractFileReference >> / aString
[
	^ self withPath: self path / aString
]

AbstractFileReference >> <= other
[
	^ self path <= self other path
]

AbstractFileReference >> absolutePath
[
	"Returns the absolute path"

	^ self subclassResponsibility
]

AbstractFileReference >> allChildren
[
	"Return all the files and folders recursively nested in the receiver"

	^ CollectVisitor breadthFirst: self resolve collect: [ :entry | entry reference ]
]

AbstractFileReference >> allDirectories
[
	"Return all the directories recursively nested in the receiver."

	^ (SelectVisitor breadthFirst: self resolve select: [ :entry | entry isDirectory ]) collect: [ :each | each reference ]
]

AbstractFileReference >> allEntries
[
	^ CollectVisitor breadthFirst: self resolve
]

AbstractFileReference >> allFiles
[
	"Return all the files (not directories) recursively nested in the receiver."

	^ (SelectVisitor breadthFirst: self resolve select: [ :entry | entry isFile ]) collect: [ :each | each reference ]
]

AbstractFileReference >> asAbsolute
[
	self subclassResponsibility
]

AbstractFileReference >> asFileReference
[
	self subclassResponsibility
]

AbstractFileReference >> asPathWith: anObject
[
	^ self resolve asPathWith: anObject
]

AbstractFileReference >> asResolvedBy: anObject
[
	^ anObject resolveReference: self
]

AbstractFileReference >> base
[
	"Returns the base of the basename, i.e. /foo/gloops.taz base is 'gloops'"

	^ self fullPath base
]

AbstractFileReference >> basename
[
	"Returns the basename, i.e. /foo/gloops.taz basename is 'gloops.taz'"

	^ self fullPath basename
]

AbstractFileReference >> basenameWithIndicator
[
	"Returns the basename with the indicator appended, i.e. /foo/gloops.taz basenameWithIndicator is 'gloops.taz', whereras /foo basenameWithIndicator is 'foo/'"

	^ self basename , self indicator
]

AbstractFileReference >> basenameWithoutExtension
[
	"Returns the basename, i.e. /foo/gloops.taz basenameWithoutExtension is 'gloops'"

	^ self fullPath basenameWithoutExtension
]

AbstractFileReference >> childGeneratorBlock: doBlock matching: patterns
[
	"
	FileDirectory default fileNamesMatching: '*'
	FileDirectory default fileNamesMatching: '*.image;*.changes'
	"

	| files reference |
	files := Set new.
	reference := self resolve.
	(patterns findTokens: ';' , String crlf)
		do: [ :pattern | doBlock value: reference value: [ :basename | (pattern match: basename)
						ifTrue: [ files add: self / basename ] ] ].
	^ files asOrderedCollection
]

AbstractFileReference >> childNames
[
	^ self children collect: #basename
]

AbstractFileReference >> children
[
	"Answer an array containing references to the direct children of this reference."

	| reference |
	reference := self resolve.
	^ (reference fileSystem childNamesAt: reference path) collect: [ :aName | self / aName ]
]

AbstractFileReference >> childrenMatching: patterns
[
	"
	FileSystem disk workingDirectory childrenMatching: '*'
	FileSystem disk workingDirectory childrenMatching: '*.image;*.changes'
	"

	^ self
		childGeneratorBlock: [ :reference :aBlock | reference fileSystem childNamesAt: reference path do: aBlock ]
		matching: patterns
]

AbstractFileReference >> contains: anObject
[
	"Return true if anObject is in a subfolder of me"

	^ anObject isContainedBy: self resolve
]

AbstractFileReference >> containsPath: aPath
[
	^ self fullPath containsPath: aPath
]

AbstractFileReference >> copyAllTo: aResolvable
[
	CopyVisitor copy: self resolve asAbsolute to: aResolvable resolve
]

AbstractFileReference >> copyTo: aReference
[
	^ self resolve copyTo: aReference resolve
]

AbstractFileReference >> copyWithPath: newPath
[
	self subclassResponsibility
]

AbstractFileReference >> createDirectory
[
	self resolve createDirectory
]

AbstractFileReference >> creationTime
[
	^ self resolve creationTime
]

AbstractFileReference >> delete
[
	^ self resolve delete
]

AbstractFileReference >> deleteAll
[
	"delete this directory and all children of it"

	DeleteVisitor delete: self resolve
]

AbstractFileReference >> deleteAllChildren
[
	"delete all children of the receiver"

	self children do: [ :aReference | aReference deleteAll ]
]

AbstractFileReference >> deleteIfAbsent: aBlock
[
	self resolve deleteIfAbsent: aBlock
]

AbstractFileReference >> directories
[
	"Return all the directories (by opposition to files) contained in the receiver"

	| reference |
	reference := self resolve.
	^ (reference fileSystem directoryNamesAt: reference path) collect: [ :aName | self withPath: self path / aName ]
]

AbstractFileReference >> directoriesMatching: patterns
[
	"
	FileSystem disk workingDirectory directoriesMatching: '*'
	FileSystem disk workingDirectory directoriesMatching: 'package-cache'
	"

	^ self
		childGeneratorBlock: [ :reference :aBlock | reference fileSystem directoryNamesAt: reference path do: aBlock ]
		matching: patterns
]

AbstractFileReference >> directoryNames
[
	^ self directories collect: #basename
]

AbstractFileReference >> ensureDeleted
[
	self deleteIfAbsent: [  ]
]

AbstractFileReference >> ensureDirectory
[
	^ self resolve ensureDirectory
]

AbstractFileReference >> ensureFile
[
	"Create if necessary a file for the receiver."

	self writeStream close
]

AbstractFileReference >> entries
[
	^ self resolve entries
]

AbstractFileReference >> entry
[
	^ self resolve entry
]

AbstractFileReference >> exists
[
	^ self resolve exists
]

AbstractFileReference >> extension
[
	^ self fullPath extension
]

AbstractFileReference >> extensions
[
	"#('foo' 'foo.tar' 'foo.tar.gz' 'foo.1.tar' 'foo.1.tar.gz') collect: [:thing| thing extensions] => #(#() #('tar') #('tar' 'gz') #('1' 'tar') #('1' 'tar' 'gz'))"

	^ self fullPath extensions
]

AbstractFileReference >> fileNames
[
	^ self files collect: #basename
]

AbstractFileReference >> fileSystem
[
	^ self resolve fileSystem
]

AbstractFileReference >> files
[
	"Return all the files (as opposed to folders) contained in the receiver"

	| reference |
	reference := self resolve.
	^ (reference fileSystem fileNamesAt: reference path) collect: [ :aName | self withPath: self path / aName ]
]

AbstractFileReference >> filesMatching: patterns
[
	"
	FileSystem disk workingDirectory filesMatching: '*'
	FileSystem disk workingDirectory filesMatching: '*.image;*.changes'
	"

	^ self
		childGeneratorBlock: [ :reference :aBlock | reference fileSystem fileNamesAt: reference path do: aBlock ]
		matching: patterns
]

AbstractFileReference >> filesystem
[
	self deprecated: 'Use fileSystem' on: '3 April 2012' in: 'Pharo 1.4'.
	^ self fileSystem
]

AbstractFileReference >> fullName
[
	^ self resolve fullName
]

AbstractFileReference >> fullNameWithIndicator
[
	"Returns the basename with the indicator appended, i.e. /foo/gloops.taz basenameWithIndicator is '/foo/gloops.taz', whereras /foo basenameWithIndicator is '/foo/'"

	^ self fullName , self indicator
]

AbstractFileReference >> fullPath
[
	"Returns the absolute path, better use absolutePath"

	^ self subclassResponsibility
]

AbstractFileReference >> glob: aBlock
[
	^ SelectVisitor breadthFirst: self resolve select: aBlock
]

AbstractFileReference >> hasChildren
[
	^ self resolve hasChildren
]

AbstractFileReference >> hasDirectories
[
	^ self resolve hasDirectories
]

AbstractFileReference >> hasFiles
[
	^ self resolve hasFiles
]

AbstractFileReference >> hash
[
	"Hash is reimplemented because #= is reimplemented"

	^ self path hash
]

AbstractFileReference >> humanReadableSize
[
	^ self size humanReadableSIByteSize
]

AbstractFileReference >> ifFile: fBlock ifDirectory: dBlock ifAbsent: aBlock
[
	^ self isFile
		ifTrue: fBlock
		ifFalse: [ self isDirectory
				ifTrue: dBlock
				ifFalse: aBlock ]
]

AbstractFileReference >> indicator
[
	"Returns a string indicating the type of reference:
	- '?' for a non existing reference',
	- '/' for a directory,
	- the empty string for a file."

	"When this framework gets more complete, it is possible to extend this behavior with the following indicators (taken from unix ls utility):
	- '*' for a regular file that is executable
	- '@' for a symbolic link
	- '|' for FIFOs
	- '=' for sockets
	- '>' for doors"

	^ self exists
		ifTrue: [ self isDirectory
				ifTrue: [ '/' ]
				ifFalse: [ '' ] ]
		ifFalse: [ '?' ]
]

AbstractFileReference >> isAbsolute
[
	self subclassResponsibility
]

AbstractFileReference >> isChildOf: anObject
[
	^ self parent = anObject
]

AbstractFileReference >> isContainedBy: anObject
[
	"DoubleDispatch helper for #contains:"

	^ anObject containsReference: self resolve
]

AbstractFileReference >> isDirectory
[
	^ self resolve isDirectory
]

AbstractFileReference >> isFile
[
	^ self resolve isFile
]

AbstractFileReference >> isReadable
[
	^ self resolve isReadable
]

AbstractFileReference >> isRelative
[
	self subclassResponsibility
]

AbstractFileReference >> isRoot
[
	^ self resolve isRoot
]

AbstractFileReference >> isWritable
[
	^ self resolve isWritable
]

AbstractFileReference >> macTypeAndCreator
[
	^ self resolve macTypeAndCreator
]

AbstractFileReference >> makeRelative: anObject
[
	^ anObject relativeToReference: self resolve
]

AbstractFileReference >> mimeTypes
[
	^ self resolve mimeTypes
]

AbstractFileReference >> modificationTime
[
	^ self resolve modificationTime
]

AbstractFileReference >> moveTo: aReference
[
	^ self resolve moveTo: aReference
]

AbstractFileReference >> nextVersion
[
	^ self resolve nextVersion
]

AbstractFileReference >> openWritable: aBoolean
[
	^ self resolve openWritable: aBoolean
]

AbstractFileReference >> parent
[
	^ self withPath: self path parent
]

AbstractFileReference >> pathSegments
[
	^ self fullPath segments
]

AbstractFileReference >> pathString
[
	^ self resolve pathString
]

AbstractFileReference >> permissions
[
	"Return the FileSystemPermission for this node"

	^ self resolve permissions
]

AbstractFileReference >> readStream
[
	self subclassResponsibility
]

AbstractFileReference >> readStreamDo: aBlock
[
	| stream |
	stream := self readStream.
	^ [ aBlock value: stream ]
		ensure: [ stream close ]
]

AbstractFileReference >> readStreamDo: doBlock ifAbsent: absentBlock
[
	^ self isFile
		ifTrue: [ self readStreamDo: doBlock ]
		ifFalse: absentBlock
]

AbstractFileReference >> readStreamIfAbsent: absentBlock
[
	^ self isFile
		ifTrue: [ self readStream ]
		ifFalse: absentBlock
]

AbstractFileReference >> relativeTo: landmark
[
	"Answer a new path relative to landmark."

	"parent/child/grandChild relativeTo: parent returns child/grandChild
	(Filesystem disk / 'griffle' / 'plonk' / 'nurp') relativeTo: (Filesystem disk / 'griffle') 
	returns plonk/nurp"

	^ landmark makeRelative: self resolve
]

AbstractFileReference >> relativeToPath: landmarkPath
[
	^ self fullPath relativeTo: landmarkPath
]

AbstractFileReference >> relativeToReference: landmarkReference
[
	"Return the path of the receiver relative to landmarkReference."

	^ self fullPath relativeTo: landmarkReference path
]

AbstractFileReference >> renameTo: newBasename
[
	self subclassResponsibility
]

AbstractFileReference >> resolve
[
	^ self subclassResponsibility
]

AbstractFileReference >> resolve: anObject
[
	^ anObject asResolvedBy: self
]

AbstractFileReference >> resolvePath: aPath
[
	^ self withPath: (self path resolvePath: aPath)
]

AbstractFileReference >> resolveReference: aReference
[
	^ aReference isAbsolute
		ifTrue: [ aReference ]
		ifFalse: [ self withPath: aReference path ]
]

AbstractFileReference >> resolveString: aString
[
	self subclassResponsibility
]

AbstractFileReference >> size
[
	^ self resolve size
]

AbstractFileReference >> streamWritable: writable do: aBlock
[
	^ writable
		ifTrue: [ self writeStreamDo: aBlock ]
		ifFalse: [ self readStreamDo: aBlock ]
]

AbstractFileReference >> uri
[
	"Convert my path into a file:// type url. For odd characters use %20 notation."

	self flag: 'TODO: return a real URI object instead of a string'.
	^ (String
		streamContents: [ :strm | strm nextPutAll: 'file:'.
			self pathSegments do: [ :each | strm
						nextPut: $/;
						nextPutAll: each encodeForHTTP ].
			strm nextPut: $/ ])
		asURI
]

AbstractFileReference >> withExtension: aString
[
	^ self withPath: (self path withExtension: aString)
]

AbstractFileReference >> withPath: newPath
[
	^ self path == newPath
		ifTrue: [ self ]
		ifFalse: [ self copyWithPath: newPath ]
]

AbstractFileReference >> writeStream
[
	self subclassResponsibility
]

AbstractFileReference >> writeStreamDo: aBlock
[
	| stream |
	stream := self writeStream.
	^ [ aBlock value: stream ]
		ensure: [ stream close ]
]

AbstractFileReference >> writeStreamDo: doBlock ifPresent: presentBlock
[
	^ self isFile
		ifTrue: presentBlock
		ifFalse: [ self writeStreamDo: doBlock ]
]

AbstractFileReference >> writeStreamIfPresent: presentBlock
[
	^ self isFile
		ifTrue: presentBlock
		ifFalse: [ self writeStream ]
]

