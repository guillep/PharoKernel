FileLocator
	superclass: #AbstractFileReference;
	instanceVariables: #(#origin #path );
	classVariables: #(#Resolver );
	package: #'FileSystem-Core-Public'.

FileLocator >> = other
[
	^ self species = other species and: [ origin = other origin and: [ path = other path ] ]
]

FileLocator >> absolutePath
[
	"Return the absolute path"

	^ self resolve path
]

FileLocator >> asAbsolute
[
	^ self
]

FileLocator >> asFileReference
[
	^ self resolve
]

FileLocator >> copyWithPath: newPath
[
	^ self class origin: origin path: newPath
]

FileLocator >> doesNotUnderstand: aMessage
[
	"Redirect message to the resolved version of this FileLocator.
	If FileReference won't understand the message send a normal DNU."

	| resolved |
	resolved := self resolve.
	(resolved respondsTo: aMessage selector)
		ifTrue: [ ^ resolved perform: aMessage selector withArguments: aMessage arguments ].
	^ super doesNotUnderstand: aMessage
]

FileLocator >> fullPath
[
	^ self resolve path
]

FileLocator >> hash
[
	^ origin hash bitXor: path hash
]

FileLocator >> initializeWithOrigin: aSymbol path: aPath
[
	self initialize.
	origin := aSymbol.
	path := aPath
]

FileLocator >> isAbsolute
[
	^ true
]

FileLocator >> isRelative
[
	^ false
]

FileLocator >> origin
[
	^ origin
]

FileLocator >> path
[
	^ path
]

FileLocator >> printOn: aStream
[
	| fs |
	aStream
		nextPut: ${;
		nextPutAll: origin;
		nextPut: $}.
	path isWorkingDirectory
		ifTrue: [ ^ self ].
	fs := self fileSystem.
	aStream nextPut: fs delimiter.
	fs printPath: path on: aStream
]

FileLocator >> readStream
[
	^ self resolve readStream
]

FileLocator >> renameTo: newBasename
[
	| result |
	result := self resolve renameTo: newBasename.
	path size > 0
		ifTrue: [ path basename: newBasename ]
		ifFalse: [ path := result path ]
]

FileLocator >> resolve
[
	^ (Resolver resolve: origin) resolve: path
]

FileLocator >> resolveString: aString
[
	| filesystem thePath |
	filesystem := (Resolver resolve: origin) fileSystem.
	thePath := filesystem pathFromString: aString.
	^ self withPath: (path resolvePath: thePath)
]

FileLocator >> writeStream
[
	^ self resolve writeStream
]

FileLocator class >> A
[
	^ self driveNamed: #A
]

FileLocator class >> B
[
	^ self driveNamed: #B
]

FileLocator class >> C
[
	^ self driveNamed: #C
]

FileLocator class >> D
[
	^ self driveNamed: #D
]

FileLocator class >> E
[
	^ self driveNamed: #E
]

FileLocator class >> F
[
	^ self driveNamed: #F
]

FileLocator class >> G
[
	^ self driveNamed: #G
]

FileLocator class >> H
[
	^ self driveNamed: #H
]

FileLocator class >> I
[
	^ self driveNamed: #I
]

FileLocator class >> J
[
	^ self driveNamed: #J
]

FileLocator class >> K
[
	^ self driveNamed: #K
]

FileLocator class >> L
[
	^ self driveNamed: #L
]

FileLocator class >> M
[
	^ self driveNamed: #M
]

FileLocator class >> N
[
	^ self driveNamed: #N
]

FileLocator class >> O
[
	^ self driveNamed: #O
]

FileLocator class >> P
[
	^ self driveNamed: #P
]

FileLocator class >> Q
[
	^ self driveNamed: #Q
]

FileLocator class >> R
[
	^ self driveNamed: #R
]

FileLocator class >> S
[
	^ self driveNamed: #S
]

FileLocator class >> T
[
	^ self driveNamed: #T
]

FileLocator class >> U
[
	^ self driveNamed: #U
]

FileLocator class >> V
[
	^ self driveNamed: #V
]

FileLocator class >> W
[
	^ self driveNamed: #W
]

FileLocator class >> X
[
	^ self driveNamed: #X
]

FileLocator class >> Y
[
	^ self driveNamed: #Y
]

FileLocator class >> Z
[
	^ self driveNamed: #Z
]

FileLocator class >> addResolver: aResolver
[
	Resolver addResolver: aResolver
]

FileLocator class >> changes
[
	^ self origin: #changes
]

FileLocator class >> cwd
[
	^ self workingDirectory
]

FileLocator class >> desktop
[
	^ self origin: #desktop
]

FileLocator class >> documents
[
	^ self origin: #documents
]

FileLocator class >> driveNamed: driveName
[
	^ FileReference fileSystem: FileSystem disk path: Path / (driveName , ':')
]

FileLocator class >> flushCaches
[
	Resolver flushCaches
]

FileLocator class >> home
[
	^ self origin: #home
]

FileLocator class >> image
[
	^ self origin: #image
]

FileLocator class >> imageDirectory
[
	^ self origin: #imageDirectory
]

FileLocator class >> initialize
[
	Smalltalk addToStartUpList: self.
	self startUp: true
]

FileLocator class >> origin: aSymbol
[
	^ self origin: aSymbol path: Path workingDirectory
]

FileLocator class >> origin: aSymbol path: aPath
[
	^ self basicNew initializeWithOrigin: aSymbol path: aPath
]

FileLocator class >> preferences
[
	^ self origin: #preferences
]

FileLocator class >> root
[
	^ FileSystem disk root
]

FileLocator class >> startUp: resuming
[
	resuming
		ifFalse: [ ^ self ].
	Resolver := InteractiveResolver new.
	Resolver addResolver: SystemResolver new.
	Resolver addResolver: PlatformResolver forCurrentPlatform
]

FileLocator class >> supportedOrigins
[
	| origins current |
	origins := IdentitySet new.
	current := Resolver.
	[ current notNil ] whileTrue: [ origins addAll: current supportedOrigins.
			current := current next ].
	^ origins
]

FileLocator class >> vmBinary
[
	^ self origin: #vmBinary
]

FileLocator class >> vmDirectory
[
	^ self origin: #vmDirectory
]

FileLocator class >> workingDirectory
[
	^ FileSystem disk referenceTo: RelativePath new
]

