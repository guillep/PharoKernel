Class
	name: #Semaphore;
	superclass: #ClassLinkedList;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#excessSignals );
	classVariables: #();
	package: #'Kernel-Processes'.

Class Semaphore >> = anObject
[
^ self == anObject
]

Class Semaphore >> critical: mutuallyExcludedBlock
[
	"Evaluate mutuallyExcludedBlock only if the receiver is not currently in	the process of running the critical: message. If the receiver is, evaluate	mutuallyExcludedBlock after the other critical: message is finished."
	"We need to catch eventual interruptions very carefully.	The naive approach of just doing, e.g.,:			self wait.			aBlock ensure: [self signal].	will fail if the active process gets terminated while in the wait.	However, the equally naive:			[self wait.			aBlock value] ensure: [self signal].	will fail too, since the active process may get interrupted while	entering the ensured block and leave the semaphore signaled twice.	To avoid both problems we make use of the fact that interrupts only	occur on sends (or backward jumps) and use an assignment (bytecode)	right before we go into the wait primitive (which is not a real send and	therefore not interruptable either)."
| blockValue caught |caught := false.[ caught := true.self wait.blockValue := mutuallyExcludedBlock value ]	ensure: [ 		caught			ifTrue: [ self signal ] ].^ blockValue
]

Class Semaphore >> critical: mutuallyExcludedBlock ifCurtailed: terminationBlock
[
	"Evaluate mutuallyExcludedBlock only if the receiver is not currently in 	the process of running the critical: message. If the receiver is, evaluate 	mutuallyExcludedBlock after the other critical: message is finished."
^ self	critical: [ 		[ mutuallyExcludedBlock value ]			ifCurtailed: terminationBlock ]
]

Class Semaphore >> critical: mutuallyExcludedBlock ifError: errorBlock
[
	"Evaluate mutuallyExcludedBlock only if the receiver is not currently in 	the process of running the critical: message. If the receiver is, evaluate 	mutuallyExcludedBlock after the other critical: message is finished."
| blockValue hasError errMsg errRcvr |hasError := false.self	critical: [ 		blockValue := [ mutuallyExcludedBlock value ]			ifError: [ :msg :rcvr | 				hasError := true.				errMsg := msg.				errRcvr := rcvr ] ].hasError	ifTrue: [ ^ errorBlock cull: errMsg cull: errRcvr ].^ blockValue
]

Class Semaphore >> critical: mutuallyExcludedBlock ifLocked: alternativeBlock
[
	"Evaluate mutuallyExcludedBlock only if the receiver is not currently in 	the process of running the critical: message. If the receiver is, evaluate 	mutuallyExcludedBlock after the other critical: message is finished."
	"Note: The following is tricky and depends on the fact that the VM will not switch between processes while executing byte codes (process switches happen only in real sends). The following test is written carefully so that it will result in bytecodes only."
excessSignals == 0	ifTrue: [ 		"If we come here, then the semaphore was locked when the test executed. 			Evaluate the alternative block and answer its result."		^ alternativeBlock value ].^ self critical: mutuallyExcludedBlock
]

Class Semaphore >> hash
[
^ self identityHash
]

Class Semaphore >> initSignals
[
	"Consume any excess signals the receiver may have accumulated."
excessSignals := 0
]

Class Semaphore >> isSignaled
[
	"Return true if this semaphore is currently signaled"
^ excessSignals > 0
]

Class Semaphore >> resumeProcess: aProcess
[
	"Remove the given process from the list of waiting processes (if it's there) and resume it.  This is used when a process asked for its wait to be timed out."
| process |process := self remove: aProcess ifAbsent: [ nil ].process ifNotNil: [ process resume ]
]

Class Semaphore >> signal
[
	"Primitive. Send a signal through the receiver. If one or more processes 	have been suspended trying to receive a signal, allow the first one to 	proceed. If no process is waiting, remember the excess signal. Essential. 	See Object documentation whatIsAPrimitive."
	<primitive: 85>
self primitiveFailed	"self isEmpty    		ifTrue: [excessSignals := excessSignals+1]    		ifFalse: [Processor resume: self removeFirstLink]"
]

Class Semaphore >> terminateProcess
[
	"Terminate the process waiting on this semaphore, if any."
self isEmpty	ifFalse: [ self removeFirst terminate ]
]

Class Semaphore >> wait
[
	"Primitive. The active Process must receive a signal through the receiver 	before proceeding. If no signal has been sent, the active Process will be 	suspended until one is sent. Essential. See Object documentation 	whatIsAPrimitive."
	<primitive: 86>
self primitiveFailed	"excessSignals>0  		ifTrue: [excessSignals := excessSignals-1]  		ifFalse: [self addLastLink: Processor activeProcess suspend]"
]

Class Semaphore >> waitTimeoutMSecs: anInteger
[
	"Wait on this semaphore for up to the given number of milliseconds, then timeout. 	Return true if the deadline expired, false otherwise."
| d |d := DelayWaitTimeout new setDelay: (anInteger max: 0) forSemaphore: self.^ d wait
]

Class Semaphore >> waitTimeoutSeconds: anInteger
[
	"Wait on this semaphore for up to the given number of seconds, then timeout.	Return true if the deadline expired, false otherwise."
^ self waitTimeoutMSecs: anInteger * 1000
]

Metaclass
	name: #Semaphore;
	instanceVariables: #().

Metaclass Semaphore >> forMutualExclusion
[
	"Answer an instance of me that contains a single signal. This new 	instance can now be used for mutual exclusion (see the critical: message 	to Semaphore)."
^ self new signal
]

Metaclass Semaphore >> new
[
	"Answer a new instance of Semaphore that contains no signals."
^ self basicNew initSignals
]

