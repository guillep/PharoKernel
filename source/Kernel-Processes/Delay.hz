Delay
	instanceVariables: #(#delayDuration #resumptionTime #delaySemaphore #beingWaitedOn );
	classVariables: #(#SuspendedDelays #TimingSemaphore #DelaySuspended #FinishedDelay #RunTimerEventLoop #ActiveDelay #ActiveDelayStartTime #TimerEventLoop #AccessProtect #ScheduledDelay );
	package: #'Kernel-Processes'.

Delay >> adjustResumptionTimeOldBase: oldBaseTime newBase: newBaseTime
[
	"Private! Adjust the value of the system's millisecond clock at which this Delay will be awoken. Used to adjust resumption times after a snapshot or clock roll-over."

	resumptionTime := newBaseTime + (resumptionTime - oldBaseTime)
]

Delay >> beingWaitedOn
[
	"Answer whether this delay is currently scheduled, e.g., being waited on"

	^ beingWaitedOn
]

Delay >> beingWaitedOn: aBool
[
	"Indicate whether this delay is currently scheduled, e.g., being waited on"

	beingWaitedOn := aBool
]

Delay >> delayDuration
[
	^ delayDuration
]

Delay >> delaySemaphore
[
	^ delaySemaphore
]

Delay >> isExpired
[
	^ delaySemaphore isSignaled
]

Delay >> printOn: aStream
[
	super printOn: aStream.
	aStream
		nextPutAll: '(';
		print: delayDuration;
		nextPutAll: ' msecs'.
	beingWaitedOn
		ifTrue: [ aStream
				nextPutAll: '; ';
				print: resumptionTime - Time millisecondClockValue;
				nextPutAll: ' msecs remaining' ].
	aStream nextPutAll: ')'
]

Delay >> resumptionTime
[
	"Answer the value of the system's millisecondClock at which the receiver's suspended Process will resume."

	^ resumptionTime
]

Delay >> resumptionTime: anInteger
[
	"Private! Set the value of the system's millisecondClock at which the receiver's suspended Process will resumed.
	Must only be called from the class-side #scheduleDelay:."

	resumptionTime := anInteger
]

Delay >> schedule
[
	"Schedule this delay."

	beingWaitedOn
		ifTrue: [ ^ self error: 'This Delay has already been scheduled.' ].
	AccessProtect critical: [ ScheduledDelay := self.
			TimingSemaphore signal ]
]

Delay >> setDelay: milliseconds
[
	"Private! Initialize this delay to signal the given semaphore after the given number of milliseconds."

	delayDuration := milliseconds asInteger
]

Delay >> setDelay: milliseconds forSemaphore: aSemaphore
[
	"Private! Initialize this delay to signal the given semaphore after the given number of milliseconds."

	delayDuration := milliseconds asInteger.
	delayDuration < 0
		ifTrue: [ self error: 'delay times cannot be negative' ].
	delaySemaphore := aSemaphore.
	beingWaitedOn := false
]

Delay >> signalWaitingProcess
[
	"The delay time has elapsed; signal the waiting process."

	beingWaitedOn := false.
	delaySemaphore signal
]

Delay >> unschedule
[
	AccessProtect critical: [ FinishedDelay := self.
			TimingSemaphore signal ]
]

Delay >> wait
[
	"Schedule this Delay, then wait on its semaphore. The current process will be suspended for the amount of time specified when this Delay was created."

	self schedule.
	[ delaySemaphore wait ]
		ifCurtailed: [ self unschedule ]
]

Delay class >> anyActive
[
	"Return true if there is any delay currently active"

	^ ActiveDelay notNil
]

Delay class >> forDuration: aDuration
[
	^ self forMilliseconds: aDuration asMilliSeconds
]

Delay class >> forMilliseconds: aNumber
[
	"Return a new Delay for the given number of milliseconds. Sending 'wait' to this Delay will cause the sender's process to be suspended for approximately that length of time."

	^ self new setDelay: aNumber forSemaphore: Semaphore new
]

Delay class >> forSeconds: aNumber
[
	^ self forMilliseconds: aNumber * 1000
]

Delay class >> handleTimerEvent
[
	"Handle a timer event; which can be either:
		- a schedule request (ScheduledDelay notNil)
		- an unschedule request (FinishedDelay notNil)
		- a timer signal (not explicitly specified)
	We check for timer expiry every time we get a signal."

	| nowTick nextTick |
	"Wait until there is work to do."
	TimingSemaphore wait.	"Process any schedule requests"
	ScheduledDelay ifNotNil: [ "Schedule the given delay"
			self scheduleDelay: ScheduledDelay.
			ScheduledDelay := nil ].	"Process any unschedule requests"
	FinishedDelay ifNotNil: [ self unscheduleDelay: FinishedDelay.
			FinishedDelay := nil ].	"Check for clock wrap-around."
	nowTick := Time millisecondClockValue.
	nowTick < ActiveDelayStartTime
		ifTrue: [ "clock wrapped"
			self saveResumptionTimes.
			self restoreResumptionTimes ].
	ActiveDelayStartTime := nowTick.	"Signal any expired delays"
	[ ActiveDelay notNil and: [ nowTick >= ActiveDelay resumptionTime ] ]
		whileTrue: [ ActiveDelay signalWaitingProcess.
			SuspendedDelays isEmpty
				ifTrue: [ ActiveDelay := nil ]
				ifFalse: [ ActiveDelay := SuspendedDelays removeFirst ] ].	"And signal when the next request is due. We sleep at most 1sec here	as a soft busy-loop so that we don't accidentally miss signals."
	nextTick := nowTick + 1000.
	ActiveDelay ifNotNil: [ nextTick := nextTick min: ActiveDelay resumptionTime ].
	nextTick := nextTick min: SmallInteger maxVal.	"Since we have processed all outstanding requests, reset the timing semaphore so	that only new work will wake us up again. Do this RIGHT BEFORE setting the next	wakeup call from the VM because it is only signaled once so we mustn't miss it."
	TimingSemaphore initSignals.
	Delay primSignal: TimingSemaphore atMilliseconds: nextTick.	"This last test is necessary for the obscure case that the msecs clock rolls over	after nowTick has been computed (unlikely but not impossible). In this case we'd	wait for MillisecondClockMask msecs (roughly six days) or until another delay gets	scheduled (which may not be any time soon). In any case, since handling the	condition is easy, let's just deal with it"
	Time millisecondClockValue < nowTick
		ifTrue: [ TimingSemaphore signal ]	"retry"
]

Delay class >> initialize
[
	"Delay initialize"

	TimingSemaphore := Smalltalk specialObjectsArray at: 30.
	DelaySuspended := true.
	Smalltalk addToStartUpList: self
]

Delay class >> nextWakeUpTime
[
	^ AccessProtect critical: [ ActiveDelay isNil
				ifTrue: [ 0 ]
				ifFalse: [ ActiveDelay resumptionTime ] ]
]

Delay class >> primSignal: aSemaphore atMilliseconds: aSmallInteger
[
	"Signal the semaphore when the millisecond clock reaches the value of the second argument. Fail if the first argument is neither a Semaphore nor nil. Essential. See Object documentation whatIsAPrimitive."

	<primitive: 136>
	^ self primitiveFailed
]

Delay class >> restoreResumptionTimes
[
	"Private! Restore the resumption times of all scheduled Delays after a snapshot or clock roll-over. This method should be called only while the AccessProtect semaphore is held."

	| newBaseTime |
	newBaseTime := Time millisecondClockValue.
	SuspendedDelays do: [ :d | d adjustResumptionTimeOldBase: 0 newBase: newBaseTime ].
	ActiveDelay == nil
		ifFalse: [ ActiveDelay adjustResumptionTimeOldBase: 0 newBase: newBaseTime ]
]

Delay class >> runTimerEventLoop
[
	"Run the timer event loop."

	[ RunTimerEventLoop ] whileTrue: [ self handleTimerEvent ]
]

Delay class >> saveResumptionTimes
[
	"Private! Record the resumption times of all Delays relative to a base time of zero. This is done prior to snapshotting or adjusting the resumption times after a clock roll-over. This method should be called only while the AccessProtect semaphore is held."

	| oldBaseTime |
	oldBaseTime := Time millisecondClockValue.
	ActiveDelay == nil
		ifFalse: [ oldBaseTime < ActiveDelayStartTime
				ifTrue: [ oldBaseTime := ActiveDelayStartTime ].	"clock rolled over"
			ActiveDelay adjustResumptionTimeOldBase: oldBaseTime newBase: 0 ].
	SuspendedDelays do: [ :d | d adjustResumptionTimeOldBase: oldBaseTime newBase: 0 ]
]

Delay class >> scheduleDelay: aDelay
[
	"Private. Schedule this Delay."

	aDelay resumptionTime: Time millisecondClockValue + aDelay delayDuration.	"Gary Chambers:  do the above here, via the high priority timer process to avoid rollover bug due to process pre-emption		since the caller cannot use the AccessProtect semaphore."
	aDelay beingWaitedOn: true.
	ActiveDelay
		ifNil: [ ActiveDelay := aDelay ]
		ifNotNil: [ aDelay resumptionTime < ActiveDelay resumptionTime
				ifTrue: [ SuspendedDelays add: ActiveDelay.
					ActiveDelay := aDelay ]
				ifFalse: [ SuspendedDelays add: aDelay ] ]
]

Delay class >> schedulingProcess
[
	^ TimerEventLoop
]

Delay class >> shutDown
[
	"Suspend the active delay, if any, before snapshotting. It will be reactived when the snapshot is resumed."

	"Details: This prevents a timer interrupt from waking up the active delay in the midst snapshoting, since the active delay will be restarted when resuming the snapshot and we don't want to process the delay twice."

	AccessProtect wait.
	self primSignal: nil atMilliseconds: 0.
	self saveResumptionTimes.
	DelaySuspended := true
]

Delay class >> startTimerEventLoop
[
	"Start the timer event loop"

	"Delay startTimerEventLoop"

	self stopTimerEventLoop.
	AccessProtect := Semaphore forMutualExclusion.
	ActiveDelayStartTime := Time millisecondClockValue.
	SuspendedDelays := Heap
		withAll: (SuspendedDelays ifNil: [ #() ])
		sortBlock: [ :d1 :d2 | d1 resumptionTime <= d2 resumptionTime ].
	TimingSemaphore := Semaphore new.
	RunTimerEventLoop := true.
	TimerEventLoop := [ self runTimerEventLoop ] newProcess.
	TimerEventLoop priority: Processor timingPriority.
	TimerEventLoop resume.
	TimingSemaphore signal	"get going"
]

Delay class >> startUp
[
	"Restart active delay, if any, when resuming a snapshot."

	"Compare to false since it can be nil"

	DelaySuspended = false
		ifTrue: [ ^ self error: 'Trying to activate Delay twice' ].
	self startTimerEventLoop.
	DelaySuspended := false.
	self restoreResumptionTimes.
	AccessProtect signal
]

Delay class >> stopTimerEventLoop
[
	"Stop the timer event loop"

	RunTimerEventLoop := false.
	TimingSemaphore signal.
	TimerEventLoop := nil
]

Delay class >> timeoutSemaphore: aSemaphore afterMSecs: anInteger
[
	"Create and schedule a Delay to signal the given semaphore when the given number of milliseconds has elapsed. Return the scheduled Delay. The timeout can be cancelled by sending 'unschedule' to this Delay."

	"Details: This mechanism is used to provide a timeout when waiting for an external event, such as arrival of data over a network connection, to signal a semaphore. The timeout ensures that the semaphore will be signalled within a reasonable period of time even if the event fails to occur. Typically, the waiting process cancels the timeout request when awoken, then determines if the awaited event has actually occurred."

	^ (self new setDelay: anInteger forSemaphore: aSemaphore) schedule
]

Delay class >> unscheduleDelay: aDelay
[
	"Private. Unschedule this Delay."

	aDelay beingWaitedOn
		ifFalse: [ ^ self ].
	ActiveDelay == aDelay
		ifTrue: [ SuspendedDelays isEmpty
				ifTrue: [ ActiveDelay := nil ]
				ifFalse: [ ActiveDelay := SuspendedDelays removeFirst ] ]
		ifFalse: [ SuspendedDelays remove: aDelay ifAbsent: [  ] ].
	aDelay beingWaitedOn: false
]

