CompiledMethod >> asActiveRingDefinition
[
	"Retrieves an active RGMethodDefinition object based on the data of the receiver.
	Source, protocol and stamp are retrieved from the compiled method"

	| ring |
	ring := (RGFactory current createMethodNamed: self selector)
		parentName: self methodClass name;
		isMetaSide: self methodClass isMeta;
		asActive.
	^ ring
]

CompiledMethod >> asFullRingDefinition
[
	"Retrieves an active RGMethodDefinition which knows its parent <class>.
	Note that the full conversion does not happen at the level of the class. If you need that request asFullRingDefinition to the class"

	| rgClass rgMethod |
	rgClass := self realClass asRingDefinition.
	rgMethod := self asActiveRingDefinition.
	rgClass addMethod: rgMethod.
	rgMethod package: (RGContainer packageOfMethod: rgMethod).
	^ rgMethod
]

CompiledMethod >> asHistoricalRingDefinition
[
	"Retrieves a historical RGMethodDefinition object based on the data of the receiver.
	Source, protocol and stamp are retrieved from the source file method"

	| ring |
	ring := (RGFactory current createMethodNamed: self selector)
		parentName: self methodClass name;
		isMetaSide: self methodClass isMeta.
	self sourcePointer isZero
		ifTrue: [ "this should not happen but sometimes the system looks corrupted"
			ring
				protocol: self category;
				sourceCode: self sourceCode;
				stamp: self timeStamp ]
		ifFalse: [ ring sourcePointer: self sourcePointer ].
	ring asHistorical.
	^ ring
]

CompiledMethod >> asPassiveRingDefinition
[
	"Retrieves a passive RGMethodDefinition object based on the data of the receiver.
	Source, protocol and stamp are retrieved from value assigned in creation"

	| ring |
	ring := (RGFactory current createMethodNamed: self selector)
		parentName: self methodClass name;
		isMetaSide: self methodClass isMeta;
		protocol: self category;
		sourceCode: self sourceCode;
		stamp: self timeStamp;
		asPassive.
	^ ring
]

CompiledMethod >> asRingDefinition
[
	"Retrieves an active RGMethodDefinition object based on the receiver.
	Note that its class is not converted."

	^ self asActiveRingDefinition
]

CompiledMethod >> getSourceFromFile: file
[
	"Read the source code from file, determining source file index and
	file position from the last 3 bytes of this method."

	| position |
	(position := self filePosition) = 0
		ifTrue: [ ^ nil ].	"assime this is a valid file"
	file position: position.
	^ file nextChunk
]

CompiledMethod >> methodReference
[
	| class selector |
	class := self methodClass ifNil: [ ^ nil ].
	selector := self selector ifNil: [ ^ nil ].
	^ RGMethodDefinition realClass: class selector: selector
]

CompiledMethod >> realClass
[
	"answer the class that I am installed in"

	^ self methodClass
]

