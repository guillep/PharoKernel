RGCommentDefinition
	superclass: #RGElementDefinition;
	instanceVariables: #(#content #stamp );
	package: #'Ring-Core-Kernel'.

RGCommentDefinition >> <= aRGCommentDefinition
[
	"Sort comment definition according to: 1) name of the class"

	^ self parentName <= aRGCommentDefinition parentName
]

RGCommentDefinition >> asActive
[
	"Sets the receiver as active object, which will allow itself to retrieve its data from the class organization"

	self annotationNamed: self class statusKey put: #active
]

RGCommentDefinition >> asHistorical
[
	"Sets the receiver as historical object, which will allow itself to retrieve its data using the sourcePointer"

	| realClass |
	self annotationNamed: self class statusKey put: #historical.
	self sourcePointer
		ifNil: [ realClass := self realClass.
			realClass notNil
				ifTrue: [ realClass organization commentRemoteStr ifNotNil: [ :str | self sourcePointer: str sourcePointer ] ] ]
]

RGCommentDefinition >> asPassive
[
	"Sets the receiver as passive object, which will allow itself to retrieve its data that was assigned in its creation"

	self annotationNamed: self class statusKey put: #passive
]

RGCommentDefinition >> asStringOrText
[
	| text |
	self realClass ifNil: [ ^ self fullName ].
	text := self fullName asText.
	text addAttribute: TextEmphasis italic.
	^ text
]

RGCommentDefinition >> author
[
	^ self annotationNamed: self class authorKey ifAbsentPut: [ self class parseAuthorAliasFrom: stamp ]
]

RGCommentDefinition >> author: aString
[
	self annotationNamed: self class authorKey put: aString
]

RGCommentDefinition >> category
[
	^ self realClass category
]

RGCommentDefinition >> commentDataPointers
[
	"Retrieves the combination key to look for information of the receiver in the source file"

	^ 'commentStamp:' -> #commentStamp:
]

RGCommentDefinition >> content
[
	self isActive
		ifTrue: [ ^ self realClass organization classComment ].
	self isHistorical
		ifTrue: [ ^ self contentAtPointer ifNil: [ self realClass ifNil: [ content ] ifNotNil: [ :rc | rc organization classComment ] ] ].
	^ content
]

RGCommentDefinition >> content: anObject
[
	content := anObject
]

RGCommentDefinition >> contentAtPointer
[
	"A RGCommentDefinition may be created to point the sourceFile in which case it retrieves the class comment"

	^ self sourcePointer notNil
		ifTrue: [ SourceFiles sourceCodeAt: self sourcePointer ]
		ifFalse: [ '' ]
]

RGCommentDefinition >> fromActiveToHistorical
[
	"If the receiver was generated as an active comment, it can be converted to a historical one by reading the data of the real class (if exists)"

	self isActive
		ifTrue: [ self asHistorical ]
]

RGCommentDefinition >> fromActiveToPassive
[
	"If the receiver was generated as an active comment, it can be converted to a passive one by reading the data of the real class organization"

	self isActive
		ifTrue: [ | realClass |
			realClass := self realClass.
			realClass notNil
				ifTrue: [ self content: realClass organization classComment.
					self stamp: realClass organization commentStamp ].
			self asPassive ]
]

RGCommentDefinition >> fullName
[
	"Keeps a unique description for the receiver. As annotation to avoid converting each time is invoked"

	^ self annotationNamed: self class fullNameKey ifAbsentPut: [ (self parentName , ' ' , self name) asSymbol ]
]

RGCommentDefinition >> hasAuthor
[
	^ self hasStamp and: [ self author isEmptyOrNil not ]
]

RGCommentDefinition >> hasStamp
[
	^ stamp isEmptyOrNil not
]

RGCommentDefinition >> isActive
[
	"A ring comment isActive when it needs to access the class organization for retrieving its data"

	^ (self annotationNamed: self class statusKey) ifNil: [ false ] ifNotNil: [ :status | status == #active ]
]

RGCommentDefinition >> isComment
[
	^ true
]

RGCommentDefinition >> isCommentReference
[
	^ true
]

RGCommentDefinition >> isEmptyOrNil
[
	^ content isEmptyOrNil
]

RGCommentDefinition >> isFromTrait
[
	^ false
]

RGCommentDefinition >> isHistorical
[
	"A ring comment can be used to point an old version of the receiver, in this case it will use the sourcePointer to retrieve its information"

	^ (self annotationNamed: self class statusKey) ifNil: [ false ] ifNotNil: [ :status | status == #historical ]
]

RGCommentDefinition >> isPassive
[
	"A ring comment isPassive by default.  In this case it will retrieve the data that was assigned in its creation"

	^ (self annotationNamed: self class statusKey) ifNil: [ true ] ifNotNil: [ :status | status == #passive ]
]

RGCommentDefinition >> isSameRevisionAs: aRGCommentDefinition
[
	"This method look for equality of the properties of the receiver"

	"A comment validates only its contents and not its stamp"

	^ (super isSameRevisionAs: aRGCommentDefinition) and: [ self content = aRGCommentDefinition content ]
]

RGCommentDefinition >> isValid
[
	"for compatibility with method definition"

	^ true
]

RGCommentDefinition >> methodClass
[
	self flag: 'if comments are mixed with methods use #realClass instead'.
	^ self realClass
]

RGCommentDefinition >> name
[
	^ name ifNil: [ name := #Comment ]
]

RGCommentDefinition >> printOn: aStream
[
	self parentName ifNotNil: [ aStream
				nextPutAll: self parentName;
				nextPutAll: ' ' ].
	aStream nextPutAll: self name
]

RGCommentDefinition >> selector
[
	self flag: 'if comments are mixed with methods use #name instead'.
	^ self name
]

RGCommentDefinition >> sourceCode
[
	^ self content
]

RGCommentDefinition >> sourcePointer
[
	"Retrieves the sourcePointer for this definition if exists"

	^ self annotationNamed: self class sourcePointerKey
]

RGCommentDefinition >> sourcePointer: aNumber
[
	self annotationNamed: self class sourcePointerKey put: aNumber
]

RGCommentDefinition >> stamp
[
	"Retrieves the user-alias + timestamp associated to the receiver (if exists)"

	self isActive
		ifTrue: [ ^ self realClass organization commentStamp ].
	self isHistorical
		ifTrue: [ ^ self stampAtPointer ifNil: [ self realClass ifNil: [ stamp ] ifNotNil: [ :rc | rc organization commentStamp ] ] ].
	^ stamp
]

RGCommentDefinition >> stamp: anObject
[
	stamp := anObject
]

RGCommentDefinition >> stampAtPointer
[
	"A RGMethodDefinition may be created to point the sourceFile in which case it retrieves the stamp"

	^ self sourcePointer notNil
		ifTrue: [ SourceFiles timeStampAt: self sourcePointer for: self commentDataPointers ]
		ifFalse: [ nil ]
]

RGCommentDefinition >> timeStamp
[
	^ self
		annotationNamed: self class timeStampKey
		ifAbsentPut: [ self class parseTimestampFrom: self stamp default: DateAndTime epoch ]
]

RGCommentDefinition >> timeStamp: aTimestamp
[
	self annotationNamed: self class timeStampKey put: aTimestamp
]

RGCommentDefinition class >> realClass: aClass
[
	"Creates a ring comment definition from a Smalltalk class"

	^ (super realClass: aClass)
		asActive;
		yourself
]

