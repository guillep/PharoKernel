RGFactory
	classVariables: #(#CurrentFactories );
	package: #'Ring-Core-Kernel'.

RGFactory >> classClass
[
	^ RGClassDefinition
]

RGFactory >> classInstanceVariableClass
[
	^ RGClassInstanceVariableDefinition
]

RGFactory >> classVariableClass
[
	^ RGClassVariableDefinition
]

RGFactory >> commentClass
[
	^ RGCommentDefinition
]

RGFactory >> createClassInstanceVariableNamed: aSymbol
[
	^ self createInstanceOfClass: self classInstanceVariableClass named: aSymbol
]

RGFactory >> createClassNamed: aSymbol
[
	^ self createInstanceOfClass: self classClass named: aSymbol
]

RGFactory >> createClassNamed: aSymbol subclassOf: aRGClassDefinition
[
	^ (self createClassNamed: aSymbol) superclass: aRGClassDefinition
]

RGFactory >> createClassVariableNamed: aSymbol
[
	^ self createInstanceOfClass: self classVariableClass named: aSymbol
]

RGFactory >> createClassVariableNamed: aSymbol parent: aRGClassDefinition
[
	^ (self createClassVariableNamed: aSymbol) parent: aRGClassDefinition
]

RGFactory >> createComment
[
	^ self commentClass new
]

RGFactory >> createComment: content parent: aRGObject
[
	"Creates a RGCommentDefinition object if content is not a RGCommentDefinition object already
	and if is not empty"

	content isEmptyOrNil
		ifTrue: [ ^ nil ].
	^ content isRingObject not
		ifTrue: [ self createComment
				parent: aRGObject;
				content: content;
				yourself ]
		ifFalse: [ content ]
]

RGFactory >> createGlobalVariableNamed: aSymbol
[
	^ self createInstanceOfClass: self globalVariableClass named: aSymbol
]

RGFactory >> createInstanceOfClass: aClass named: aSymbol
[
	^ aClass named: aSymbol asSymbol
]

RGFactory >> createInstanceVariableNamed: aSymbol
[
	^ self createInstanceOfClass: self instanceVariableClass named: aSymbol
]

RGFactory >> createInstanceVariableNamed: aSymbol parent: aRGClassDescriptionDefinition
[
	^ (self
		createInstanceOfClass:
			(aRGClassDescriptionDefinition isMeta
				ifTrue: [ self classInstanceVariableClass ]
				ifFalse: [ self instanceVariableClass ])
		named: aSymbol) parent: aRGClassDescriptionDefinition
]

RGFactory >> createMetaclassOf: aRGClassDefinition
[
	^ self metaclassClass class: aRGClassDefinition
]

RGFactory >> createMetatraitNamed: aSymbol
[
	^ self createInstanceOfClass: self metatraitClass named: aSymbol
]

RGFactory >> createMetatraitOf: aRGClassDefinition
[
	^ self metatraitClass class: aRGClassDefinition
]

RGFactory >> createMethodNamed: aSymbol
[
	^ self createInstanceOfClass: self methodClass named: aSymbol
]

RGFactory >> createMethodNamed: aSymbol parent: aRGBehaviorDefinition
[
	"Create a method whose selector is aSymbol whose class is a ClassDefinition. 
	Other creation methods may use instead a Smalltalk class."

	^ (self createMethodNamed: aSymbol) parent: aRGBehaviorDefinition
]

RGFactory >> createMethodNamed: aSymbol realParent: aClass
[
	"Create a method whose selector is aSymbol whose class is the Smalltalk class aClass. Other creation methods may use ClassDefinition instead of Smalltalk class."

	^ (aClass >> aSymbol asSymbol) asActiveRingDefinition
]

RGFactory >> createPoolVariableNamed: aSymbol
[
	^ self createInstanceOfClass: self poolVariableClass named: aSymbol
]

RGFactory >> createPoolVariableNamed: aSymbol parent: aRGClassDefinition
[
	^ (self createPoolVariableNamed: aSymbol) parent: aRGClassDefinition
]

RGFactory >> createSharedPoolNamed: aSymbol
[
	"A shared pool is a class inheriting from #SharedPool"

	^ (self createInstanceOfClass: self classClass named: aSymbol)
		superclassName: #SharedPool;
		isPool: true;
		yourself
]

RGFactory >> createTraitNamed: aSymbol
[
	^ self createInstanceOfClass: self traitClass named: aSymbol
]

RGFactory >> globalVariableClass
[
	^ RGGlobalVariableDefinition
]

RGFactory >> instanceVariableClass
[
	^ RGInstanceVariableDefinition
]

RGFactory >> metaclassClass
[
	^ RGMetaclassDefinition
]

RGFactory >> metatraitClass
[
	^ RGMetatraitDefinition
]

RGFactory >> methodClass
[
	^ RGMethodDefinition
]

RGFactory >> poolVariableClass
[
	^ RGPoolVariableDefinition
]

RGFactory >> traitClass
[
	^ RGTraitDefinition
]

RGFactory class >> current
[
	^ CurrentFactories at: self species ifAbsentPut: [ self new ]
]

RGFactory class >> initialize
[
	"RGFactory initialize"

	CurrentFactories := IdentityDictionary new
]

