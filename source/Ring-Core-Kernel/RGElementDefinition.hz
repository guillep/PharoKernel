RGElementDefinition
	superclass: #RGNamedDefinition;
	instanceVariables: #(#parent );
	package: #'Ring-Core-Kernel'.

RGElementDefinition >> = aRGElementDefinition
[
	"This method look for equality of the properties of the receiver"

	"Verifies the class and the parentName of the receiver"

	^ self class = aRGElementDefinition class
		and: [ self parentName == aRGElementDefinition parentName and: [ self isMetaSide = aRGElementDefinition isMetaSide ] ]
]

RGElementDefinition >> actualClass
[
	"returns the Smalltalk class of the receiver"

	^ self realClass
]

RGElementDefinition >> browse
[
	^ self systemNavigation browseClass: self realClass
]

RGElementDefinition >> className
[
	^ self parentName
]

RGElementDefinition >> className: aName
[
	^ self parentName: aName
]

RGElementDefinition >> fullName: aString
[
	^ self annotationNamed: self class fullNameKey put: aString asSymbol
]

RGElementDefinition >> hash
[
	"Hash is re-implemented because #= is re-implemented"

	^ self class hash bitXor: (self parentName hash bitXor: self isMetaSide hash)
]

RGElementDefinition >> isDefined
[
	"isDefined when the receiver has its realClass defined in the system"

	^ self realClass notNil
]

RGElementDefinition >> isMetaSide
[
	"Even thought several class elements do not define this property (ie. class variables, pool variables) they understand it"

	"This is a derived property from the class definining the receiver and thus its value is kept as an annotation"

	"Default value is false"

	^ self annotationNamed: self class isMetaSideKey ifAbsentPut: [ false ]
]

RGElementDefinition >> isMetaSide: aBoolean
[
	self annotationNamed: self class isMetaSideKey put: aBoolean
]

RGElementDefinition >> isSameRevisionAs: aRGElementDefinition
[
	"This method look for equality of the properties of the receiver"

	"Verifies the class and the parentName of the receiver"

	^ self class = aRGElementDefinition class and: [ self parentName == aRGElementDefinition parentName ]
]

RGElementDefinition >> package
[
	^ self parent package
]

RGElementDefinition >> parent
[
	"The parent of a class definition element: method, comment and variable is the class definition. This method retrieves the class that defines such element"

	^ parent
]

RGElementDefinition >> parent: aRGBehaviorDefinition
[
	"Set the class associated to the receiver"

	parent := aRGBehaviorDefinition.
	self setParentInfo: aRGBehaviorDefinition
]

RGElementDefinition >> parentName
[
	"Retrieves the name of the class defining the receiver. Its value is kept as an annotation"

	^ self annotationNamed: self class classNameKey
]

RGElementDefinition >> parentName: aString
[
	self annotationNamed: self class classNameKey put: aString asSymbol
]

RGElementDefinition >> realClass
[
	"Retrieves the Class/Trait/.. object in the System corresponding to the class of the this element."

	^ self realParent
]

RGElementDefinition >> realParent
[
	"Retrieves the Class/Trait/.. object in the System corresponding to the class of the this element."

	^ self parent notNil
		ifTrue: [ self parent realClass ]
		ifFalse: [ self rootEnvironment classNamed: self parentName ]
]

RGElementDefinition >> ringClass
[
	"Return the ring definition of the class containing the receiver."

	^ self parent
]

RGElementDefinition >> setParentInfo: anObject
[
	"anObject is aRGBehaviorDefinition or aClass/aTrait"

	self parentName: anObject name.
	self isMetaSide: anObject isMeta
]

RGElementDefinition >> theNonMetaClassName
[
	^ self theNonMetaParentName
]

RGElementDefinition >> theNonMetaParentName
[
	"Rejects the prefix ' class' or ' classTrait' of the parentName"

	| index |
	index := self parentName indexOfSubCollection: ' class' startingAt: 1 ifAbsent: [ ^ self parentName ].
	^ (self parentName copyFrom: 1 to: index - 1) asSymbol
]

RGElementDefinition class >> basicParseAuthorAliasFrom: aString
[
	"Parse an alias/name of the author from a string that is extracted from a source file. If there is no alias/name we return emtpy string."

	| tokens dateStartIndex unknown |
	"The following timestamp strings are supported (source: squeak sources archeological survey):		<authorname><date><time>. 		<authorname><date>		<date><time>		<date><time><authorname>		<date><authorname>		<historical>	All fields can be separated by spaces or line ends but a separator between author alias/name and date can be missing as well"
	"unknown:= 'unknown'."
	unknown := nil.
	aString isEmptyOrNil
		ifTrue: [ ^ unknown ].
	dateStartIndex := (aString indexOf: $/) - 1.	"If there is no / character in the timestamp, no author alias/name exists"
	dateStartIndex = -1
		ifTrue: [ ^ unknown ].
	^ [ "Go the start of the date string (there can be 1 or 2 digits and a space separator can be missing at the front!!)"
	((dateStartIndex < 2) not and: [ (aString at: dateStartIndex - 1) isDigit ])
		ifTrue: [ dateStartIndex := dateStartIndex - 1 ].	"Extract only those tokens that do not possible represent date or time - meaning that authorname may be at the end"
	tokens := (aString copyFrom: dateStartIndex to: aString size) substrings
		reject: [ :token | (token occurrencesOf: $/) = 2 or: [ (token occurrencesOf: $:) = 1 ] ].	"only one token should be left if author name/alias exists"
	^ tokens isEmpty
		ifTrue: [ "if dateStartIndex is not 1 then the authorname may be at the beginning"
			dateStartIndex > 1
				ifTrue: [ (aString copyFrom: 1 to: dateStartIndex - 1) trimBoth ]
				ifFalse: [ unknown ] ]
		ifFalse: [ tokens first ] ]
		on: Exception
		do: [ :e | unknown ]
]

RGElementDefinition class >> class: aRGBehaviorDefinition
[
	"The argument is a ring object and serves as the parent of a method, variable or class comment"

	^ self new
		parent: aRGBehaviorDefinition;
		yourself
]

RGElementDefinition class >> classNameKey
[
	^ #className
]

RGElementDefinition class >> isMetaSideKey
[
	^ #isMetaSide
]

RGElementDefinition class >> parseAuthorAliasFrom: aString
[
	"Allows other applications  to treat a different empty alias by overriding this method"

	^ self basicParseAuthorAliasFrom: aString
]

RGElementDefinition class >> parseTimestampFrom: aString
[
	^ self parseTimestampFrom: aString default: nil
]

RGElementDefinition class >> parseTimestampFrom: aString default: anObject
[
	"Parse a date-time from a timestamp-string that is extracted from a source file. If there is no timestamp, or we cannot make sense of it, we return the default value."

	| tokens dateStartIndex unknown |
	"The following timestamp strings are supported (source: squeak sources archeological survey):		<authorname><date><time>. 		<authorname><date>		<date><time>		<date><time><authorname>		<date><authorname>		<historical>	All fields can be separated by spaces or line ends but a separator between authorname and date can be missing as well"
	unknown := anObject.
	aString isEmptyOrNil
		ifTrue: [ ^ unknown ].
	dateStartIndex := (aString indexOf: $/) - 1.	"If there is no / character in the timestamp, we cannot parse a date and return the epoch"
	dateStartIndex = -1
		ifTrue: [ ^ unknown ].
	^ [ "Go the start of the date string (there can be 1 or 2 digits and a space separator can be missing at the front!!)"
	((dateStartIndex < 2) not and: [ (aString at: dateStartIndex - 1) isDigit ])
		ifTrue: [ dateStartIndex := dateStartIndex - 1 ].	"Extract only those tokens that possibly represent date or time"
	tokens := (aString copyFrom: dateStartIndex to: aString size) substrings
		select: [ :token | (token occurrencesOf: $/) = 2 or: [ (token occurrencesOf: $:) = 1 ] ].	"2 tokens is a datetime"
	tokens size = 2
		ifTrue: [ (tokens joinUsing: Character space) asDateAndTime ]
		ifFalse: [ tokens first asDate asDateAndTime ] ]
		on: Exception
		do: [ :e | unknown ]
]

RGElementDefinition class >> realClass: aClass
[
	"The argument is a Smalltalk class and the parent of a method, variable, class comment.
	However it is not set as parent but only its name and scope (instance/class)"

	^ self new
		parent: aClass asRingDefinition;
		yourself
]

RGElementDefinition class >> sourcePointerKey
[
	^ #sourcePointer
]

RGElementDefinition class >> statusKey
[
	^ #statusKey
]

