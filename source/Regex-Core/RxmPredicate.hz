RxmPredicate
	superclass: #RxmLink;
	instanceVariables: #(#predicate );
	package: #'Regex-Core'.

RxmPredicate >> bePerform: aSelector
[
	"Match any single character that answers true  to this message."

	self predicate: [ :char | RxParser doHandlingMessageNotUnderstood: [ char perform: aSelector ] ]
]

RxmPredicate >> bePerformNot: aSelector
[
	"Match any single character that answers false to this message."

	self predicate: [ :char | RxParser doHandlingMessageNotUnderstood: [ (char perform: aSelector) not ] ]
]

RxmPredicate >> matchAgainst: aMatcher
[
	"Match if the predicate block evaluates to true when given the
	current stream character as the argument."

	| original |
	original := aMatcher currentState.
	(aMatcher atEnd not and: [ (predicate value: aMatcher next) and: [ next matchAgainst: aMatcher ] ])
		ifTrue: [ ^ true ]
		ifFalse: [ aMatcher restoreState: original.
			^ false ]
]

RxmPredicate >> predicate: aBlock
[
	"This link will match any single character for which <aBlock>
	evaluates to true."

	aBlock numArgs ~= 1
		ifTrue: [ self error: 'bad predicate block' ].
	predicate := aBlock.
	^ self
]

RxmPredicate class >> with: unaryBlock
[
	^ self new predicate: unaryBlock
]

