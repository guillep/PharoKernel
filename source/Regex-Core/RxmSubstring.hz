RxmSubstring
	superclass: #RxmLink;
	instanceVariables: #(#sample #compare );
	package: #'Regex-Core'.

RxmSubstring >> beCaseInsensitive
[
	compare := [ :char1 :char2 | char1 sameAs: char2 ]
]

RxmSubstring >> beCaseSensitive
[
	compare := [ :char1 :char2 | char1 = char2 ]
]

RxmSubstring >> character: aCharacter ignoreCase: aBoolean
[
	"Match exactly this character."

	sample := String with: aCharacter.
	aBoolean
		ifTrue: [ self beCaseInsensitive ]
]

RxmSubstring >> initialize
[
	super initialize.
	self beCaseSensitive
]

RxmSubstring >> matchAgainst: aMatcher
[
	"Match if my sample stream is exactly the current prefix
	of the matcher stream's contents."

	| originalState sampleStream mismatch |
	originalState := aMatcher currentState.
	sampleStream := self sampleStream.
	mismatch := false.
	[ sampleStream atEnd
		or: [ aMatcher atEnd or: [ mismatch := (compare value: sampleStream next value: aMatcher next) not ] ] ]
		whileFalse.
	(mismatch not and: [ sampleStream atEnd and: [ next matchAgainst: aMatcher ] ])
		ifTrue: [ ^ true ]
		ifFalse: [ aMatcher restoreState: originalState.
			^ false ]
]

RxmSubstring >> sampleStream
[
	^ sample readStream
]

RxmSubstring >> substring: aString ignoreCase: aBoolean
[
	"Match exactly this string."

	sample := aString.
	aBoolean
		ifTrue: [ self beCaseInsensitive ]
]

Case: aBoolean
[substring: aString ignoreCase: aBoolean
	"Match exactly this string."

	sample := aString.
	aBoolean
		ifTrue: [ self beCaseInsensitive ]
]

