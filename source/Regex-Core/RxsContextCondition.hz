RxsContextCondition
	superclass: #RxsNode;
	instanceVariables: #(#kind );
	package: #'Regex-Core'.

RxsContextCondition >> beAny
[
	"Matches anything but a newline."

	kind := #syntaxAny
]

RxsContextCondition >> beBeginningOfLine
[
	"Matches empty string at the beginning of a line."

	kind := #syntaxBeginningOfLine
]

RxsContextCondition >> beBeginningOfWord
[
	"Matches empty string at the beginning of a word."

	kind := #syntaxBeginningOfWord
]

RxsContextCondition >> beEndOfLine
[
	"Matches empty string at the end of a line."

	kind := #syntaxEndOfLine
]

RxsContextCondition >> beEndOfWord
[
	"Matches empty string at the end of a word."

	kind := #syntaxEndOfWord
]

RxsContextCondition >> beNonWordBoundary
[
	"Analog of \B."

	kind := #syntaxNonWordBoundary
]

RxsContextCondition >> beWordBoundary
[
	"Analog of \w (alphanumeric plus _)."

	kind := #syntaxWordBoundary
]

RxsContextCondition >> dispatchTo: aBuilder
[
	^ aBuilder perform: kind
]

RxsContextCondition >> isNullable
[
	^ #syntaxAny ~~ kind
]

[dispatchTo: aBuilder
	^ aBuilder perform: kind
]

RxsContextCondition >> isNullable
[isNullable
	^ #syntaxAny ~~ kind
]

