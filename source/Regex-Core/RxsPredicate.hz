Class
	name: #RxsPredicate;
	superclass: #ClassRxsNode;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#predicate #negation );
	classVariables: #(#EscapedLetterSelectors #NamedClassSelectors );
	package: #'Regex-Core'.

Class RxsPredicate >> beAlphaNumeric
[
predicate := [ :char | char isAlphaNumeric ].negation := [ :char | char isAlphaNumeric not ]
]

Class RxsPredicate >> beAlphabetic
[
predicate := [ :char | char isLetter ].negation := [ :char | char isLetter not ]
]

Class RxsPredicate >> beBackslash
[
predicate := [ :char | char == $\ ].negation := [ :char | char ~~ $\ ]
]

Class RxsPredicate >> beControl
[
predicate := [ :char | char asInteger < 32 ].negation := [ :char | char asInteger >= 32 ]
]

Class RxsPredicate >> beDigit
[
predicate := [ :char | char isDigit ].negation := [ :char | char isDigit not ]
]

Class RxsPredicate >> beGraphics
[
self	beControl;	negate
]

Class RxsPredicate >> beHexDigit
[
| hexLetters |hexLetters := 'abcdefABCDEF'.predicate := [ :char | char isDigit or: [ hexLetters includes: char ] ].negation := [ :char | char isDigit not and: [ (hexLetters includes: char) not ] ]
]

Class RxsPredicate >> beLowercase
[
predicate := [ :char | char isLowercase ].negation := [ :char | char isLowercase not ]
]

Class RxsPredicate >> beNotDigit
[
self	beDigit;	negate
]

Class RxsPredicate >> beNotSpace
[
self	beSpace;	negate
]

Class RxsPredicate >> beNotWordConstituent
[
self	beWordConstituent;	negate
]

Class RxsPredicate >> bePrintable
[
self	beControl;	negate
]

Class RxsPredicate >> bePunctuation
[
| punctuationChars |punctuationChars := #($. $, $! $? $; $: $" $' $- $( $) $`).predicate := [ :char | punctuationChars includes: char ].negation := [ :char | (punctuationChars includes: char) not ]
]

Class RxsPredicate >> beSpace
[
predicate := [ :char | char isSeparator ].negation := [ :char | char isSeparator not ]
]

Class RxsPredicate >> beUppercase
[
predicate := [ :char | char isUppercase ].negation := [ :char | char isUppercase not ]
]

Class RxsPredicate >> beWordConstituent
[
predicate := [ :char | char isAlphaNumeric or: [ char == $_ ] ].negation := [ :char | char isAlphaNumeric not and: [ char ~~ $_ ] ]
]

Class RxsPredicate >> dispatchTo: anObject
[
^ anObject syntaxPredicate: self
]

Class RxsPredicate >> isAtomic
[
	"A predicate is a single character but the character is not known in advance."
^ false
]

Class RxsPredicate >> isEnumerable
[
^ false
]

Class RxsPredicate >> negate
[
| tmp |tmp := predicate.predicate := negation.negation := tmp
]

Class RxsPredicate >> negated
[
^ self copy negate
]

Class RxsPredicate >> predicate
[
^ predicate
]

Class RxsPredicate >> predicateNegation
[
^ negation
]

Class RxsPredicate >> value: aCharacter
[
^ predicate value: aCharacter
]

Metaclass
	name: #RxsPredicate;
	instanceVariables: #().

Metaclass RxsPredicate >> forEscapedLetter: aCharacter
[
^ self new	perform: (EscapedLetterSelectors at: aCharacter ifAbsent: [ RxParser signalSyntaxException: 'bad backslash escape' ])
]

Metaclass RxsPredicate >> forNamedClass: aString
[
^ self new	perform: (NamedClassSelectors at: aString ifAbsent: [ RxParser signalSyntaxException: 'bad character class name' ])
]

Metaclass RxsPredicate >> initialize
[
	"self initialize"
self	initializeNamedClassSelectors;	initializeEscapedLetterSelectors
]

Metaclass RxsPredicate >> initializeEscapedLetterSelectors
[
	"self initializeEscapedLetterSelectors"
(EscapedLetterSelectors := Dictionary new)	at: $w put: #beWordConstituent;	at: $W put: #beNotWordConstituent;	at: $d put: #beDigit;	at: $D put: #beNotDigit;	at: $s put: #beSpace;	at: $S put: #beNotSpace;	at: $\ put: #beBackslash
]

Metaclass RxsPredicate >> initializeNamedClassSelectors
[
	"self initializeNamedClassSelectors"
(NamedClassSelectors := Dictionary new)	at: 'alnum' put: #beAlphaNumeric;	at: 'alpha' put: #beAlphabetic;	at: 'cntrl' put: #beControl;	at: 'digit' put: #beDigit;	at: 'graph' put: #beGraphics;	at: 'lower' put: #beLowercase;	at: 'print' put: #bePrintable;	at: 'punct' put: #bePunctuation;	at: 'space' put: #beSpace;	at: 'upper' put: #beUppercase;	at: 'xdigit' put: #beHexDigit
]

