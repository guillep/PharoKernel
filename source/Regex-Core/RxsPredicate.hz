RxsPredicate
	superclass: #RxsNode;
	instanceVariables: #(#predicate #negation );
	classVariables: #(#EscapedLetterSelectors #NamedClassSelectors );
	package: #'Regex-Core'.

RxsPredicate >> beAlphaNumeric
[
	predicate := [ :char | char isAlphaNumeric ].
	negation := [ :char | char isAlphaNumeric not ]
]

RxsPredicate >> beAlphabetic
[
	predicate := [ :char | char isLetter ].
	negation := [ :char | char isLetter not ]
]

RxsPredicate >> beBackslash
[
	predicate := [ :char | char == $\ ].
	negation := [ :char | char ~~ $\ ]
]

RxsPredicate >> beControl
[
	predicate := [ :char | char asInteger < 32 ].
	negation := [ :char | char asInteger >= 32 ]
]

RxsPredicate >> beDigit
[
	predicate := [ :char | char isDigit ].
	negation := [ :char | char isDigit not ]
]

RxsPredicate >> beGraphics
[
	self
		beControl;
		negate
]

RxsPredicate >> beHexDigit
[
	| hexLetters |
	hexLetters := 'abcdefABCDEF'.
	predicate := [ :char | char isDigit or: [ hexLetters includes: char ] ].
	negation := [ :char | char isDigit not and: [ (hexLetters includes: char) not ] ]
]

RxsPredicate >> beLowercase
[
	predicate := [ :char | char isLowercase ].
	negation := [ :char | char isLowercase not ]
]

RxsPredicate >> beNotDigit
[
	self
		beDigit;
		negate
]

RxsPredicate >> beNotSpace
[
	self
		beSpace;
		negate
]

RxsPredicate >> beNotWordConstituent
[
	self
		beWordConstituent;
		negate
]

RxsPredicate >> bePrintable
[
	self
		beControl;
		negate
]

RxsPredicate >> bePunctuation
[
	| punctuationChars |
	punctuationChars := #($. $, $! $? $; $: $" $' $- $( $) $`).
	predicate := [ :char | punctuationChars includes: char ].
	negation := [ :char | (punctuationChars includes: char) not ]
]

RxsPredicate >> beSpace
[
	predicate := [ :char | char isSeparator ].
	negation := [ :char | char isSeparator not ]
]

RxsPredicate >> beUppercase
[
	predicate := [ :char | char isUppercase ].
	negation := [ :char | char isUppercase not ]
]

RxsPredicate >> beWordConstituent
[
	predicate := [ :char | char isAlphaNumeric or: [ char == $_ ] ].
	negation := [ :char | char isAlphaNumeric not and: [ char ~~ $_ ] ]
]

RxsPredicate >> dispatchTo: anObject
[
	^ anObject syntaxPredicate: self
]

RxsPredicate >> isEnumerable
[
	^ false
]

RxsPredicate >> negate
[
	| tmp |
	tmp := predicate.
	predicate := negation.
	negation := tmp
]

RxsPredicate >> negated
[
	^ self copy negate
]

RxsPredicate >> predicate
[
	^ predicate
]

RxsPredicate >> predicateNegation
[
	^ negation
]

RxsPredicate >> value: aCharacter
[
	^ predicate value: aCharacter
]

RxsPredicate class >> forEscapedLetter: aCharacter
[
	^ self new
		perform: (EscapedLetterSelectors at: aCharacter ifAbsent: [ RxParser signalSyntaxException: 'bad backslash escape' ])
]

RxsPredicate class >> forNamedClass: aString
[
	^ self new
		perform: (NamedClassSelectors at: aString ifAbsent: [ RxParser signalSyntaxException: 'bad character class name' ])
]

RxsPredicate class >> initialize
[
	"self initialize"

	self
		initializeNamedClassSelectors;
		initializeEscapedLetterSelectors
]

RxsPredicate class >> initializeEscapedLetterSelectors
[
	"self initializeEscapedLetterSelectors"

	(EscapedLetterSelectors := Dictionary new)
		at: $w put: #beWordConstituent;
		at: $W put: #beNotWordConstituent;
		at: $d put: #beDigit;
		at: $D put: #beNotDigit;
		at: $s put: #beSpace;
		at: $S put: #beNotSpace;
		at: $\ put: #beBackslash
]

RxsPredicate class >> initializeNamedClassSelectors
[
	"self initializeNamedClassSelectors"

	(NamedClassSelectors := Dictionary new)
		at: 'alnum' put: #beAlphaNumeric;
		at: 'alpha' put: #beAlphabetic;
		at: 'cntrl' put: #beControl;
		at: 'digit' put: #beDigit;
		at: 'graph' put: #beGraphics;
		at: 'lower' put: #beLowercase;
		at: 'print' put: #bePrintable;
		at: 'punct' put: #bePunctuation;
		at: 'space' put: #beSpace;
		at: 'upper' put: #beUppercase;
		at: 'xdigit' put: #beHexDigit
]

