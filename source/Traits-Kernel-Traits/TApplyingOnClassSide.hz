Trait named: #TApplyingOnClassSide
	package: #'Traits-Kernel-Traits'.TApplyingOnClassSide >> assertConsistantCompositionsForNew: aTraitComposition
[
	"Applying or modifying a trait composition on the class side
	of a behavior has some restrictions."

	| baseTraits notAddable message |
	baseTraits := aTraitComposition traits select: [ :each | each isBaseTrait ].
	baseTraits isEmpty
		ifFalse: [ notAddable := baseTraits reject: [ :each | each classSide methodDict isEmpty ].
			notAddable isEmpty
				ifFalse: [ message := String
						streamContents: [ :stream | stream
								nextPutAll: 'You can not add the base trait(s)';
								cr.
							notAddable do: [ :each | stream nextPutAll: each name ] separatedBy: [ stream nextPutAll: ', ' ].
							stream
								cr;
								nextPutAll: 'to this composition because it/they define(s) methods on the class side.' ].
					^ TraitCompositionException signal: message ] ].
	self instanceSide traitComposition traits asSet
		= (aTraitComposition traits select: [ :each | each isClassTrait ] thenCollect: [ :each | each baseTrait ]) asSet
		ifFalse: [ 
			^ TraitCompositionException
				signal:
					'You can not add or remove class side traits on				the class side of a composition. (But you can specify aliases or exclusions				for existing traits or add a trait which does not have any methods on the class side.)' ]
]

TApplyingOnClassSide >> noteNewBaseTraitCompositionApplied: aTraitComposition
[
	"The argument is the new trait composition of my base trait - add
	the new traits or remove non existing traits on my class side composition.
	(Each class trait in my composition has its base trait on the instance side
	of the composition - manually added traits to the class side are always 
	base traits.)"

	| newComposition traitsFromInstanceSide |
	traitsFromInstanceSide := self traitComposition traits
		select: [ :each | each isClassTrait ]
		thenCollect: [ :each | each baseTrait ].
	newComposition := self traitComposition copyTraitExpression.
	(traitsFromInstanceSide copyWithoutAll: aTraitComposition traits)
		do: [ :each | newComposition removeFromComposition: each classTrait ].
	(aTraitComposition traits copyWithoutAll: traitsFromInstanceSide) do: [ :each | newComposition add: each classTrait ].
	self setTraitComposition: newComposition
]

