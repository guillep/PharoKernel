CompositeTransform
	superclass: #DisplayTransform;
	instanceVariables: #(#globalTransform #localTransform );
	package: #'Graphics-Transformations'.

CompositeTransform >> angle
[
	^ localTransform angle + globalTransform angle
]

CompositeTransform >> asCompositeTransform
[
	^ self
]

CompositeTransform >> asMatrixTransform2x3
[
	^ globalTransform asMatrixTransform2x3 composedWithLocal: localTransform asMatrixTransform2x3
]

CompositeTransform >> asMorphicTransform
[
	"Squash a composite transform down to a simple one"

	^ MorphicTransform offset: self offset angle: self angle scale: self scale
]

CompositeTransform >> composedWith: aTransform
[
	"Return a new transform that has the effect of transforming points first by the receiver and then by the argument."

	self isIdentity
		ifTrue: [ ^ aTransform ].
	aTransform isIdentity
		ifTrue: [ ^ self ].
	^ CompositeTransform new globalTransform: self localTransform: aTransform
]

CompositeTransform >> globalPointToLocal: aPoint
[
	"Transform aPoint from global coordinates into local coordinates"

	^ localTransform globalPointToLocal: (globalTransform globalPointToLocal: aPoint)
]

CompositeTransform >> globalTransform: gt localTransform: lt
[
	globalTransform := gt.
	localTransform := lt
]

CompositeTransform >> inverseTransformation
[
	"Return the inverse transformation of the receiver"

	^ self species new
		globalTransform: localTransform inverseTransformation
		localTransform: globalTransform inverseTransformation
]

CompositeTransform >> invert: aPoint
[
	^ globalTransform invert: (localTransform invert: aPoint)
]

CompositeTransform >> isCompositeTransform
[
	^ true
]

CompositeTransform >> isIdentity
[
	^ globalTransform isIdentity and: [ localTransform isIdentity ]
]

CompositeTransform >> isPureTranslation
[
	^ globalTransform isPureTranslation and: [ localTransform isPureTranslation ]
]

CompositeTransform >> localPointToGlobal: aPoint
[
	"Transform aPoint from global coordinates into local coordinates"

	^ globalTransform localPointToGlobal: (localTransform localPointToGlobal: aPoint)
]

CompositeTransform >> offset
[
	^ (self localPointToGlobal: 0 @ 0) negated
]

CompositeTransform >> scale
[
	^ localTransform scale * globalTransform scale
]

CompositeTransform >> transform: aPoint
[
	^ localTransform transform: (globalTransform transform: aPoint)
]

CompositeTransform class >> globalTransform: gt localTransform: lt
[
	^ self new globalTransform: gt localTransform: lt
]

