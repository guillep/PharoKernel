DisplayTransform
	package: #'Graphics-Transformations'.

DisplayTransform >> asCompositeTransform
[
	"Represent the receiver as a composite transformation"

	^ CompositeTransform new globalTransform: self localTransform: self species identity
]

DisplayTransform >> asMatrixTransform2x3
[
	"Represent the receiver as a 2x3 matrix transformation"

	^ self subclassResponsibility
]

DisplayTransform >> composedWithGlobal: aTransformation
[
	"Return the composition of the receiver and the global transformation passed in.
	A 'global' transformation is defined as a transformation that takes place
	between the receiver (the 'local') transformation and any 'global' point
	computations, e.g., for the methods

		globalPointToLocal: globalPoint
			globalPoint -> globalTransform -> localTransform -> locaPoint

		localPointToGlobal: localPoint
			localPoint -> localTransform -> globalTransform -> globalPoint

		"

	^ aTransformation composedWithLocal: self
]

DisplayTransform >> composedWithLocal: aTransformation
[
	"Return the composition of the receiver and the local transformation passed in.
	A 'local' transformation is defined as a transformation that takes place
	between the receiver (the 'global') transformation and any 'local' point
	computations, e.g., for the methods

		globalPointToLocal: globalPoint
			globalPoint -> globalTransform -> localTransform -> locaPoint

		localPointToGlobal: localPoint
			localPoint -> localTransform -> globalTransform -> globalPoint

		"

	self isIdentity
		ifTrue: [ ^ aTransformation ].
	aTransformation isIdentity
		ifTrue: [ ^ self ].
	^ CompositeTransform new globalTransform: self localTransform: aTransformation
]

DisplayTransform >> globalBoundsToLocal: aRectangle
[
	"Transform aRectangle from global coordinates into local coordinates"

	^ Rectangle encompassing: (self globalPointsToLocal: aRectangle corners)
]

DisplayTransform >> globalPointToLocal: aPoint
[
	"Transform aPoint from global coordinates into local coordinates"

	^ self subclassResponsibility
]

DisplayTransform >> globalPointsToLocal: inArray
[
	"Transform all the points of inArray from global into local coordinates"

	^ inArray collect: [ :pt | self globalPointToLocal: pt ]
]

DisplayTransform >> inverseTransformation
[
	"Return the inverse transformation of the receiver"

	^ self subclassResponsibility
]

DisplayTransform >> invertBoundsRect: aRectangle
[
	"Return a rectangle whose coordinates have been transformed
	from local back to global coordinates."

	^ self subclassResponsibility
]

DisplayTransform >> isCompositeTransform
[
	"Return true if the receiver is a composite transformation.
	Composite transformations may have impact on the accuracy."

	^ false
]

DisplayTransform >> isIdentity
[
	"Return true if the receiver is the identity transform; that is, if applying to a point returns the point itself."

	^ self subclassResponsibility
]

DisplayTransform >> isMatrixTransform2x3
[
	"Return true if the receiver is 2x3 matrix transformation"

	^ false
]

DisplayTransform >> isMorphicTransform
[
	"Return true if the receiver is a MorphicTransform, that is specifies the transformation values explicitly."

	^ false
]

DisplayTransform >> isPureTranslation
[
	"Return true if the receiver specifies no rotation or scaling."

	^ self subclassResponsibility
]

DisplayTransform >> localBoundsToGlobal: aRectangle
[
	"Transform aRectangle from local coordinates into global coordinates"

	^ Rectangle encompassing: (self localPointsToGlobal: aRectangle corners)
]

DisplayTransform >> localPointToGlobal: aPoint
[
	"Transform aPoint from local coordinates into global coordinates"

	^ self subclassResponsibility
]

DisplayTransform >> localPointsToGlobal: inArray
[
	"Transform all the points of inArray from local into global coordinates"

	^ inArray collect: [ :pt | self localPointToGlobal: pt ]
]

DisplayTransform >> setIdentity
[
	"Initialize the receiver to the identity transformation (e.g., not affecting points)"

	^ self subclassResponsibility
]

DisplayTransform >> sourceQuadFor: aRectangle
[
	^ aRectangle innerCorners collect: [ :p | self globalPointToLocal: p ]
]

DisplayTransform class >> identity
[
	^ self new setIdentity
]

