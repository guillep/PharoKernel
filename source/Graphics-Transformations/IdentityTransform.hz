IdentityTransform
	superclass: #DisplayTransform;
	classVariables: #(#Default );
	package: #'Graphics-Transformations'.

IdentityTransform >> angle
[
	^ 0.0
]

IdentityTransform >> asMatrixTransform2x3
[
	"Represent the receiver as a 2x3 matrix transformation"

	^ MatrixTransform2x3 identity
]

IdentityTransform >> composedWith: aTransform
[
	^ aTransform
]

IdentityTransform >> composedWithGlobal: aTransformation
[
	^ aTransformation
]

IdentityTransform >> composedWithLocal: aTransformation
[
	^ aTransformation
]

IdentityTransform >> globalBoundsToLocal: aRectangle
[
	"Transform aRectangle from global coordinates into local coordinates"

	^ aRectangle
]

IdentityTransform >> globalPointToLocal: aPoint
[
	"Transform aPoint from global coordinates into local coordinates"

	^ aPoint
]

IdentityTransform >> globalPointsToLocal: inArray
[
	"Transform all the points of inArray from global into local coordinates"

	^ inArray
]

IdentityTransform >> inverseTransformation
[
	"Return the inverse transformation of the receiver"

	^ self
]

IdentityTransform >> invertBoundsRect: aRectangle
[
	"Return a rectangle whose coordinates have been transformed
	from local back to global coordinates. Since I am the identity matrix
	no transformation is made."

	^ aRectangle
]

IdentityTransform >> isIdentity
[
	"Return true if the receiver is the identity transform; that is, if applying to a point returns the point itself."

	^ true
]

IdentityTransform >> isPureTranslation
[
	"Return true if the receiver specifies no rotation or scaling."

	^ true
]

IdentityTransform >> localBoundsToGlobal: aRectangle
[
	"Transform aRectangle from local coordinates into global coordinates"

	^ aRectangle
]

IdentityTransform >> localPointToGlobal: aPoint
[
	"Transform aPoint from local coordinates into global coordinates"

	^ aPoint
]

IdentityTransform >> localPointsToGlobal: inArray
[
	"Transform all the points of inArray from local into global coordinates"

	^ inArray
]

IdentityTransform >> offset
[
	^ 0 @ 0
]

IdentityTransform >> setIdentity
[
	"I *am* the identity transform"

	^ self
]

IdentityTransform >> sourceQuadFor: aRectangle
[
	^ aRectangle innerCorners
]

IdentityTransform class >> initialize
[
	"IdentityTransform initialize"

	Default := self basicNew
]

IdentityTransform class >> new
[
	"There can be only one"

	^ Default
]

