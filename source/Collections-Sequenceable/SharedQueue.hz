SharedQueue
	superclass: #Stream;
	instanceVariables: #(#monitor #items );
	package: #'Collections-Sequenceable'.

SharedQueue >> findFirst: aBlock
findFirst: aBlock
	"Answer the next object that satisfies aBlock, skipping any intermediate objects.
	If no such object has been queued, answer <nil> and leave me intact."

	^ monitor
		critical: [ | index |
			index := items findFirst: aBlock.
			index = 0
				ifTrue: [ nil ]
				ifFalse: [ items removeAt: index ] ]

SharedQueue >> flush
flush
	"Remove from the queue all objects"

	monitor critical: [ items := items removeAll ]

SharedQueue >> flushAllSuchThat: aBlock
flushAllSuchThat: aBlock
	"Remove from the queue all objects that satisfy aBlock."

	monitor critical: [ items := items reject: aBlock ]

SharedQueue >> initialize
initialize
	super initialize.
	monitor := Monitor new.
	items := OrderedCollection new

SharedQueue >> isEmpty
isEmpty
	^ monitor critical: [ items isEmpty ]

SharedQueue >> next
next
	^ monitor critical: [ monitor waitWhile: [ items isEmpty ].
			items removeFirst ]

SharedQueue >> nextOrNil
nextOrNil
	^ monitor critical: [ items isEmpty
				ifTrue: [ nil ]
				ifFalse: [ items removeFirst ] ]

SharedQueue >> nextOrNilSuchThat: aBlock
nextOrNilSuchThat: aBlock
	"Answer the next object that satisfies aBlock, skipping any intermediate objects.
	If no object has been sent, answer <nil> and leave me intact.
	NOTA BENE:  aBlock MUST NOT contain a non-local return (^)."

	^ monitor
		critical: [ | index |
			index := items findFirst: aBlock.
			index = 0
				ifTrue: [ nil ]
				ifFalse: [ items removeAt: index ] ]

SharedQueue >> nextPut: anObject
nextPut: anObject
	monitor critical: [ items addLast: anObject.
			monitor signal ].
	^ anObject

SharedQueue >> peek
peek
	"Answer the object that was sent through the receiver first and has not 
	yet been received by anyone but do not remove it from the receiver. If 
	no object has been sent, return nil"

	^ monitor critical: [ items isEmpty
				ifTrue: [ nil ]
				ifFalse: [ items first ] ]

SharedQueue >> postCopy
postCopy
	super postCopy.
	monitor critical: [ items := items copy.
			monitor := Monitor new ]

SharedQueue >> printOn: aStream
printOn: aStream
	monitor
		critical: [ aStream
				nextPutAll: self class name;
				nextPutAll: ' with ';
				print: items size;
				nextPutAll: ' items' ]

SharedQueue >> removeAll
removeAll
	monitor critical: [ items removeAll ]

SharedQueue >> size
size
	^ monitor critical: [ items size ]

SharedQueue class >> new
new
	^ self basicNew initialize

