RPackageTag
	instanceVariables: #(#package #name #classNames );
	package: #'RPackage-Core'.

RPackageTag >> addClass: aClass
[
	aClass category: self categoryName
]

RPackageTag >> addClassNamed: aSymbol
[
	(classNames includes: aSymbol)
		ifTrue: [ ^ self ].
	^ classNames add: aSymbol
]

RPackageTag >> asRPackage
[
	"Create a new RPackage with the same contents as this rpackage tag"

	| newRPackage |
	newRPackage := RPackage named: self categoryName.
	self classes do: [ :className | newRPackage importClass: className ].
	(self package extensionsForTag: self) do: [ :extensionMethod | newRPackage addMethod: extensionMethod ].
	^ newRPackage
]

RPackageTag >> basicRenameTo: aString
[
	name := aString
]

RPackageTag >> categoryName
[
	"Answer this tag as a SystemCategory. 
    That would be RPackage, '-', RPackageTag, unless tag is root (same name as RPackage)"

	^ self toCategoryName: self name
]

RPackageTag >> classNames
[
	^ classNames
]

RPackageTag >> classes
[
	^ self classNames collect: [ :each | self class environment at: each ]
]

RPackageTag >> ensureSystemCategory
[
	SystemOrganization addCategory: self categoryName
]

RPackageTag >> extensionCategoriesForClass: aClass
[
	^ self package extensionCategoriesForClass: aClass
]

RPackageTag >> extensionClasses
[
	^ #()
]

RPackageTag >> fileOut
[
	| internalStream |
	internalStream := (String new: 1000) writeStream.
	SystemOrganization fileOutCategory: self categoryName on: internalStream.
	^ FileStream writeSourceCodeFrom: internalStream baseName: self name isSt: true
]

RPackageTag >> hasClass: aClass
[
	^ self hasClassNamed: aClass name
]

RPackageTag >> hasClassNamed: aSymbol
[
	^ self classNames includes: aSymbol
]

RPackageTag >> includesClass: aClass
[
	^ self hasClassNamed: aClass name
]

RPackageTag >> includesMethodCategory: aProtocol ofClass: aClass
[
	^ self package includesMethodCategory: aProtocol ofClass: aClass
]

RPackageTag >> includesSelector: aSelector ofClass: aClass
[
	^ self package includesSelector: aSelector ofClass: aClass
]

RPackageTag >> initialize
[
	super initialize.
	classNames := Set new
]

RPackageTag >> initializePackage: aPackage name: aString
[
	package := aPackage.
	name := aString.
	self initialize
]

RPackageTag >> isEmpty
[
	^ self classNames isEmpty
]

RPackageTag >> isRoot
[
	^ self name = self packageName
]

RPackageTag >> name
[
	^ name
]

RPackageTag >> orderedClasses
[
	^ self package orderedClasses select: [ :c | c category = self categoryName ]
]

RPackageTag >> package
[
	^ package
]

RPackageTag >> packageName
[
	^ self package name
]

RPackageTag >> printOn: aStream
[
	aStream nextPutAll: self name
]

RPackageTag >> promoteAsRPackage
[
	"This method converts this rpackage tag into an rpackage, removes the tag from the parent package with all classes included and registers the new package in the system.
	The tag has to be removed before registering to avoid conflicts.
	Smells like we could have an error and lose package tags! registerPackage should not fail because names Package-Tag are unique in the system."

	| newRPackage |
	newRPackage := self asRPackage.
	self classes do: [ :each | self package removeClass: each ].
	self package removeClassTag: self name.
	self package removeMethods: newRPackage extensionMethods.
	RPackage organizer registerPackage: newRPackage.
	newRPackage classes
		do: [ :each | SystemAnnouncer uniqueInstance classRepackaged: each from: self package to: newRPackage ]
]

RPackageTag >> removeClass: aClass
[
	^ self removeClassNamed: aClass name
]

RPackageTag >> removeClassNamed: aSymbol
[
	^ classNames remove: aSymbol ifAbsent: [  ]
]

RPackageTag >> removeFromPackage
[
	self assert: self isEmpty description: 'Package tag is not empty'.
	self package basicRemoveTag: self
]

RPackageTag >> renameTo: aString
[
	| oldName categoryName |
	oldName := self toCategoryName: self name.
	categoryName := self toCategoryName: aString.
	oldName = categoryName
		ifTrue: [ ^ self ].
	self basicRenameTo: aString.
	SystemAnnouncer uniqueInstance
		suspendAllWhile: [ self classes do: [ :each | each category: categoryName ].
			self class environment organization renameCategory: oldName toBe: categoryName ]
]

RPackageTag >> renameTo: aString category: categoryName
[
	| oldName |
	oldName := self toCategoryName: self name.
	oldName = categoryName
		ifTrue: [ ^ self ].
	self basicRenameTo: aString.
	SystemAnnouncer uniqueInstance
		suspendAllWhile: [ self classes do: [ :each | each category: categoryName ].
			self class environment organization renameCategory: oldName toBe: categoryName ]
]

RPackageTag >> toCategoryName: aString
[
	^ aString = self packageName
		ifTrue: [ aString ]
		ifFalse: [ self packageName , '-' , aString ]
]

RPackageTag >> updateDefinedClassNamed: oldString withNewName: newString
[
	(self hasClassNamed: oldString)
		ifTrue: [ self removeClassNamed: oldString.
			self addClassNamed: newString ]
]

RPackageTag class >> new
[
	self error: 'Use #package:name:'
]

RPackageTag class >> package: aPackage name: aString
[
	^ self basicNew
		initializePackage: aPackage name: aString;
		yourself
]

