WindowsStore
	superclass: #DiskStore;
	instanceVariables: #(#disk );
	classVariables: #(#Disks );
	package: #'FileSystem-Disk'.

WindowsStore >> checkName: aFileName fixErrors: fixing
[checkName: aFileName fixErrors: fixing
	"Check if the file name contains any invalid characters"

	| fName badChars hasBadChars |
	fName := super checkName: aFileName fixErrors: fixing.
	badChars := (#($: $< $> $| $/ $\ $? $* $") , ((0 to: 31) collect: [ :n | n asCharacter ])) asSet.
	(fName includesAnyOf: badChars)
		ifFalse: [ ^ fName ].
	fixing
		ifFalse: [ ^ self error: 'filename contains invalid characters' ].
	^ fName collect: [ :char | (badChars includes: char)
				ifTrue: [ $# ]
				ifFalse: [ char ] ]
]

WindowsStore >> pathFromString: aString
[pathFromString: aString
	| normalized pathClass |
	normalized := aString copy replaceAll: UnixStore delimiter with: self delimiter.
	pathClass := (Path isAbsoluteWindowsPath: normalized)
		ifTrue: [ AbsolutePath ]
		ifFalse: [ RelativePath ].
	^ pathClass withAll: (pathClass canonicalizeElements: (self delimiter split: normalized))
]

WindowsStore >> printPath: aPath on: aStream
[printPath: aPath on: aStream
	aPath printOn: aStream delimiter: self delimiter
]

WindowsStore class >> delimiter
[delimiter
	^ $\
]

WindowsStore class >> isCaseSensitive
[isCaseSensitive
	^ false
]

WindowsStore class >> maxFileNameLength
[maxFileNameLength
	self flag: 'TODO: more tests needed here!'.
	^ 255
]

WindowsStore class >> separator
[separator
	^ $\
]

