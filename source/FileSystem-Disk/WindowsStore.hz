WindowsStore
	superclass: #DiskStore;
	instanceVariables: #(#disk );
	classVariables: #(#Disks );
	package: #'FileSystem-Disk'.

WindowsStore >> checkName: aFileName fixErrors: fixing
[
	"Check if the file name contains any invalid characters"

	| fName badChars hasBadChars |
	fName := super checkName: aFileName fixErrors: fixing.
	badChars := (#($: $< $> $| $/ $\ $? $* $") , ((0 to: 31) collect: [ :n | n asCharacter ])) asSet.
	(fName includesAnyOf: badChars)
		ifFalse: [ ^ fName ].
	fixing
		ifFalse: [ ^ self error: 'filename contains invalid characters' ].
	^ fName collect: [ :char | (badChars includes: char)
				ifTrue: [ $# ]
				ifFalse: [ char ] ]
]

WindowsStore >> currentDisk
[
	^ disk ifNil: [ disk := FileSystem workingDirectory path segments first ]
]

WindowsStore >> pathFromString: aString
[
	"Need to distinguish '' and '/' , so tag latter with invalid character ':'  "

	| normalized pathClass pathElements |
	normalized := aString copy replaceAll: UnixStore delimiter with: self delimiter.
	pathElements := self delimiter split: normalized.
	pathClass := (Path isAbsoluteWindowsPath: normalized)
		ifTrue: [ normalized = self delimiter asString
				ifTrue: [ pathElements := {':'} ].
			AbsolutePath ]
		ifFalse: [ self stripDrive: pathElements.
			RelativePath ].
	^ pathClass withAll: (pathClass canonicalizeElements: pathElements)
]

WindowsStore >> printPath: aPath on: aStream
[
	| hasDrive |
	aPath isRoot
		ifTrue: [ ^ self ].	"effectively Windows root is empty string"
	aPath segments first first = $:
		ifTrue: [ ^ aStream nextPut: self delimiter ].	"as tagged in #pathFromString:  "
	hasDrive := aPath segments first second = $:.
	(aPath isAbsolute and: hasDrive not)
		ifTrue: [ aStream nextPut: self delimiter ].
	aPath printOn: aStream delimiter: self delimiter.
	((aPath isAbsolute and: hasDrive) and: aPath segments size = 1)
		ifTrue: [ aStream nextPut: self delimiter ]
]

WindowsStore >> stripDrive: pathElements
[
	pathElements ifNotEmpty: [ pathElements at: 1 put: ($: split: pathElements first) last ]
]

WindowsStore class >> delimiter
[
	^ $\
]

WindowsStore class >> isCaseSensitive
[
	^ false
]

WindowsStore class >> maxFileNameLength
[
	self flag: 'TODO: more tests needed here!'.
	^ 255
]

WindowsStore class >> separator
[
	^ $\
]

