EventManager
	instanceVariables: #(#actionMap );
	classVariables: #(#ActionMaps );
	package: #'System-Object Events'.

EventManager >> actionMap
[
	^ actionMap == nil
		ifTrue: [ self createActionMap ]
		ifFalse: [ actionMap ]
]

EventManager >> addDependent: anObject
[
	"Make the given object one of the receiver's dependents."

	self when: self changedEventSelector send: self updateEventSelector to: anObject.
	^ anObject
]

EventManager >> breakDependents
[
	"Remove all of the receiver's dependents."

	self removeActionsForEvent: self changedEventSelector
]

EventManager >> changed: aParameter
[
	"Receiver changed. The change is denoted by the argument aParameter. 
	Usually the argument is a Symbol that is part of the dependent's change 
	protocol. Inform all of the dependents."

	self triggerEvent: self changedEventSelector with: aParameter
]

EventManager >> changedEventSelector
[
	^ #changed:
]

EventManager >> dependents
[
	^ (self actionSequenceForEvent: self changedEventSelector) asSet collect: [ :each | each receiver ]
]

EventManager >> postCopy
[
	super postCopy.
	self release
]

EventManager >> releaseActionMap
[
	actionMap := nil
]

EventManager >> removeDependent: anObject
[
	"Remove the given object as one of the receiver's dependents."

	self removeActionsWithReceiver: anObject forEvent: self changedEventSelector.
	^ anObject
]

EventManager >> updateEventSelector
[
	^ #update:
]

EventManager >> updateableActionMap
[
	actionMap == nil
		ifTrue: [ actionMap := self createActionMap ].
	^ actionMap
]

EventManager class >> actionMapFor: anObject
[
	^ self actionMaps at: anObject ifAbsent: [ self createActionMap ]
]

EventManager class >> actionMaps
[
	^ ActionMaps ifNil: [ ActionMaps := WeakIdentityKeyDictionary new ]
]

EventManager class >> cleanUp: aggressive
[
	"Dump all ActionMaps but only when we're aggressively cleaning"

	aggressive
		ifTrue: [ ActionMaps := nil ]
]

EventManager class >> flushEvents
[
	"Object flushEvents"

	self actionMaps
		keysAndValuesDo: [ :rcvr :evtDict | rcvr
				ifNotNil: [ "make sure we don't modify evtDict while enumerating"
					evtDict
						keysDo: [ :evtName | | msgSet |
							msgSet := evtDict at: evtName ifAbsent: [ nil ].
							msgSet == nil
								ifTrue: [ rcvr removeActionsForEvent: evtName ] ] ] ].
	EventManager actionMaps finalizeValues
]

EventManager class >> releaseActionMapFor: anObject
[
	self actionMaps removeKey: anObject ifAbsent: [  ]
]

EventManager class >> updateableActionMapFor: anObject
[
	^ self actionMaps at: anObject ifAbsentPut: [ self createActionMap ]
]

