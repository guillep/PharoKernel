WideString
	superclass: #String;
	instanceSpecification: #(#variable #words );
	package: #'Collections-Strings'.

WideString >> asFourCode
[
	| result |
	self size = 1
		ifFalse: [ ^ Error signal: 'must be exactly four octets' ].
	result := self basicAt: 1.
	(result bitAnd: 16r80000000) = 0
		ifFalse: [ Error signal: 'cannot resolve fourcode' ].
	(result bitAnd: 16r40000000) = 0
		ifFalse: [ ^ result - 16r80000000 ].
	^ result
]

WideString >> asLowercase
[
	"Answer a copy of self with all characters in a lower case.
	This might be a difficult task, ask Unicode."

	^ Unicode toLowercaseString: self
]

WideString >> asUppercase
[
	"Answer a copy of self with all characters in an upper case.
	This might be a difficult task, ask Unicode."

	^ Unicode toUppercaseString: self
]

WideString >> asWideString
[
	^ self
]

WideString >> at: index
[
	"Answer the Character stored in the field of the receiver indexed by the argument."

	^ Character value: (self wordAt: index)
]

WideString >> at: index put: aCharacter
[
	"Store the Character in the field of the receiver indicated by the index."

	aCharacter isCharacter
		ifFalse: [ self errorImproperStore ].
	self wordAt: index put: aCharacter asInteger.
	^ aCharacter
]

WideString >> byteAt: index
[
	| d r |
	d := (index + 3) // 4.
	r := (index - 1) \\ 4 + 1.
	^ (self wordAt: d) digitAt: 4 - r + 1
]

WideString >> byteAt: index put: aByte
[
	| d r w |
	d := (index + 3) // 4.
	r := (index - 1) \\ 4 + 1.
	w := (self wordAt: d) bitAnd: (16rFF << ((4 - r) * 8)) bitInvert32.
	w := w + (aByte << ((4 - r) * 8)).
	self basicAt: d put: w.
	^ aByte
]

WideString >> byteSize
[
	^ self size * 4
]

WideString >> copyFrom: start to: stop
[
	| n |
	n := super copyFrom: start to: stop.
	n isOctetString
		ifTrue: [ ^ n asOctetString ].
	^ n
]

WideString >> findIn: body startingAt: start matchTable: matchTable
[
	^ self
		findSubstring: self
		in: body
		startingAt: start
		matchTable: matchTable
]

WideString >> includesUnifiedCharacter
[
	^ self isUnicodeStringWithCJK
]

WideString >> isUnicodeStringWithCJK
[
	^ self anySatisfy: [ :char | Unicode isUnifiedKanji: char charCode ]
]

WideString >> isWideString
[
	"Answer whether the receiver is a WideString"

	^ true
]

WideString >> replaceFrom: start to: stop with: replacement startingAt: repStart
[
	<primitive: 105>
	replacement class == String
		ifTrue: [ ^ self
				replaceFrom: start
				to: stop
				with: replacement asWideString
				startingAt: repStart ].
	^ super
		replaceFrom: start
		to: stop
		with: replacement
		startingAt: repStart
]

WideString >> wordAt: index
[
	<primitive: 60>
	^ self basicAt: index
]

WideString >> wordAt: index put: anInteger
[
	<primitive: 61>
	self basicAt: index put: anInteger
]

WideString class >> from: aString
[
	| newString |
	(aString isMemberOf: self)
		ifTrue: [ ^ aString copy ].
	newString := self new: aString size.
	1 to: aString size do: [ :index | newString basicAt: index put: (aString basicAt: index) ].
	^ newString
]

WideString class >> fromByteArray: aByteArray
[
	| inst |
	aByteArray size \\ 4 = 0
		ifFalse: [ ^ ByteString fromByteArray: aByteArray ].
	inst := self new: aByteArray size // 4.
	4 to: aByteArray size by: 4 do: [ :i | inst
			basicAt: i // 4
			put:
				((aByteArray at: i - 3) << 24) + ((aByteArray at: i - 2) << 16) + ((aByteArray at: i - 1) << 8) + (aByteArray at: i) ].
	^ inst
]

WideString class >> fromString: aString
[
	"Answer an instance of me that is a copy of the argument, aString."

	| inst |
	(aString isMemberOf: self)
		ifTrue: [ ^ aString copy ].
	inst := self new: aString size.
	1 to: aString size do: [ :pos | inst basicAt: pos put: (aString basicAt: pos) ].
	^ inst
]

(aByteArray at: i - 2) << 16) + ((aByteArray at: i - 1) << 8) + (aByteArray at: i) ].
	^ inst
]

WideString class >> fromString: aString
[fromString: aString
	"Answer an instance of me that is a copy of the argument, aString."

	| inst |
	(aString isMemberOf: self)
		ifTrue: [ ^ aString copy ].
	inst := self new: aString size.
	1 to: aString size do: [ :pos | inst basicAt: pos put: (aString basicAt: pos) ].
	^ inst
]

