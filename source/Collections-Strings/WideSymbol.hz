WideSymbol
	superclass: #Symbol;
	instanceSpecification: #(#variable #words );
	package: #'Collections-Strings'.

WideSymbol >> asWideString
[
	^ self
]

WideSymbol >> at: index
[
	"Answer the Character stored in the field of the receiver indexed by the argument."

	^ Character value: (self wordAt: index)
]

WideSymbol >> byteAt: index
[
	| d r |
	d := (index + 3) // 4.
	r := (index - 1) \\ 4 + 1.
	^ (self wordAt: d) digitAt: 4 - r + 1
]

WideSymbol >> byteAt: index put: aByte
[
	self errorNoModification
]

WideSymbol >> byteSize
[
	^ self size * 4
]

WideSymbol >> findIn: body startingAt: start matchTable: matchTable
[
	^ self
		findSubstring: self
		in: body
		startingAt: start
		matchTable: matchTable
]

WideSymbol >> isWideString
[
	"Answer whether the receiver is a WideString"

	^ true
]

WideSymbol >> privateAt: index put: aCharacter
[
	"Primitive. Store the Character in the field of the receiver indicated by
	the index. Fail if the index is not an Integer or is out of bounds, or if
	the argument is not a Character. Essential. See Object documentation
	whatIsAPrimitive."

	<primitive: 61>
	index isInteger
		ifTrue: [ self errorSubscriptBounds: index ]
		ifFalse: [ self errorNonIntegerIndex ]
]

WideSymbol >> species
[
	"Answer the preferred class for reconstructing the receiver."

	^ WideString
]

WideSymbol >> string: aString
[
	1 to: aString size do: [ :j | self privateAt: j put: (aString at: j) asInteger ].
	^ self
]

WideSymbol >> wordAt: index
[
	<primitive: 60>
	^ self basicAt: index
]

WideSymbol >> wordAt: index put: anInteger
[
	self errorNoModification
]

WideSymbol class >> initialize
[
	Smalltalk removeFromShutDownList: self	"@@@ Remove this later @@@"
]

f basicAt: index
]

WideSymbol >> wordAt: index put: anInteger
[wordAt: index put: anInteger
	self errorNoModification
]

WideSymbol class >> initialize
[initialize
	Smalltalk removeFromShutDownList: self	"@@@ Remove this later @@@"
]

