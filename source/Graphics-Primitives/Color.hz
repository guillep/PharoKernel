Color
	instanceVariables: #(#rgb #cachedDepth #cachedBitPattern #alpha );
	classVariables: #(#RandomStream #ComponentMax #GreenShift #GrayToIndexMap #MaskingMap #HalfComponentMask #RedShift #BlueShift #ColorRegistry #CachedColormaps #IndexedColors #ComponentMask );
	package: #'Graphics-Primitives'.

Color >> * aNumberOrArray
[
	"Answer this color with its RGB multiplied by the given number, or
	 multiply this color's RGB values by the corresponding entries in the
	given array."

	"(self brown * 2) display"

	"(self brown * #(1 0 1)) display"

	| multipliers |
	multipliers := aNumberOrArray isCollection
		ifTrue: [ aNumberOrArray ]
		ifFalse: [ Array with: aNumberOrArray with: aNumberOrArray with: aNumberOrArray ].
	^ self class basicNew
		setPrivateRed: (self privateRed * multipliers first) asInteger
		green: (self privateGreen * multipliers second) asInteger
		blue: (self privateBlue * multipliers third) asInteger
]

Color >> + aColor
[
	"Answer this color mixed with the given color in an additive color space.  "

	^ self class basicNew
		setPrivateRed: self privateRed + aColor privateRed
		green: self privateGreen + aColor privateGreen
		blue: self privateBlue + aColor privateBlue
]

Color >> - aColor
[
	"Answer aColor is subtracted from the given color in an additive color space.  "

	"(Color white - Color red) display"

	^ self class basicNew
		setPrivateRed: self privateRed - aColor privateRed
		green: self privateGreen - aColor privateGreen
		blue: self privateBlue - aColor privateBlue
]

Color >> / aNumber
[
	"Answer this color with its RGB divided by the given number. "

	"(Color red / 2) display"

	^ self class basicNew
		setPrivateRed: (self privateRed / aNumber) asInteger
		green: (self privateGreen / aNumber) asInteger
		blue: (self privateBlue / aNumber) asInteger
]

Color >> = aColor
[
	"Return true if the receiver equals the given color. This method handles translucent colors, too."

	aColor isColor
		ifFalse: [ ^ false ].
	^ aColor privateRGB = rgb and: [ aColor privateAlpha = self privateAlpha ]
]

Color >> adjustBrightness: brightness
[
	"Adjust the relative brightness of this color. (lowest value is 0.005 so that hue information is not lost)"

	^ self class
		h: self hue
		s: self saturation
		v: (self brightness + brightness min: 1.0 max: 0.005)
		alpha: self alpha
]

Color >> adjustSaturation: saturation brightness: brightness
[
	"Adjust the relative saturation and brightness of this color. (lowest value is 0.005 so that hue information is not lost)"

	^ self class
		h: self hue
		s: (self saturation + saturation min: 1.0 max: 0.005)
		v: (self brightness + brightness min: 1.0 max: 0.005)
		alpha: self alpha
]

Color >> alpha
[
	"Return my alpha value, a number between 0.0 and 1.0 where 0.0 is completely transparent and 1.0 is completely opaque."

	^ alpha asFloat / 255.0
]

Color >> alpha: aFloat
[
	"Answer a new Color with the given amount of opacity ('alpha')."

	^ self class
		r: self red
		g: self green
		b: self blue
		alpha: aFloat
]

Color >> alphaMixed: proportion with: aColor
[
	"Answer this color mixed with the given color. The proportion, a number 
	between 0.0 and 1.0, determines what what fraction of the receiver to  
	use in the mix. For example, 0.9 would yield a color close to the  
	receiver. This method uses RGB interpolation; HSV interpolation can lead 
	to surprises.  Mixes the alphas (for transparency) also."

	| frac1 frac2 |
	frac1 := proportion asFloat min: 1.0 max: 0.0.
	frac2 := 1.0 - frac1.
	^ self class
		r: self red * frac1 + (aColor red * frac2)
		g: self green * frac1 + (aColor green * frac2)
		b: self blue * frac1 + (aColor blue * frac2)
		alpha: self alpha * frac1 + (aColor alpha * frac2)
]

Color >> asColor
[
	"Convert the receiver into a color"

	^ self
]

Color >> asColorref
[
	"Convert the receiver into a colorref"

	^ (self red * 255) asInteger + ((self green * 255) asInteger << 8) + ((self green * 255) asInteger << 16)
]

Color >> asHTMLColor
[
	| s |
	s := '#000000' copy.
	s at: 2 put: (Character digitValue: ((rgb bitShift: -6 - RedShift) bitAnd: 15)).
	s at: 3 put: (Character digitValue: ((rgb bitShift: -2 - RedShift) bitAnd: 15)).
	s at: 4 put: (Character digitValue: ((rgb bitShift: -6 - GreenShift) bitAnd: 15)).
	s at: 5 put: (Character digitValue: ((rgb bitShift: -2 - GreenShift) bitAnd: 15)).
	s at: 6 put: (Character digitValue: ((rgb bitShift: -6 - BlueShift) bitAnd: 15)).
	s at: 7 put: (Character digitValue: ((rgb bitShift: -2 - BlueShift) bitAnd: 15)).
	^ s
]

Color >> asNontranslucentColor
[
	^ self alpha: 1.0
]

Color >> atLeastAsLuminentAs: aFloat
[
	| revisedColor |
	revisedColor := self.
	[ revisedColor luminance < aFloat ] whileTrue: [ revisedColor := revisedColor slightlyLighter ].
	^ revisedColor
]

Color >> atMostAsLuminentAs: aFloat
[
	| revisedColor |
	revisedColor := self.
	[ revisedColor luminance > aFloat ] whileTrue: [ revisedColor := revisedColor slightlyDarker ].
	^ revisedColor
]

Color >> attemptToMutateError
[
	"A color is immutable. Once a color's red, green, and blue have been initialized, you cannot change them. Instead, create a new Color and use it."

	self error: 'Color objects are immutable once created'
]

Color >> basicPixelValueForDepth: d
[
	"Returns an integer representing the bits that appear in a single pixel of this color in a Form of the given depth. The depth must be one of 1, 2, 4, 8, 16, or 32. Contrast with pixelWordForDepth: and bitPatternForDepth:, which return either a 32-bit word packed with the given pixel value or a multiple-word Bitmap containing a pattern. The inverse is the class message colorFromPixelValue:depth:"

	"Details: For depths of 8 or less, the result is a colorMap index. For depths of 16 and 32, it is a direct color value with 5 or 8 bits per color component."

	"Transparency: The pixel value zero is reserved for transparent. For depths greater than 8, black maps to the darkest possible blue."

	| rgbBlack val |
	d = 8
		ifTrue: [ ^ self closestPixelValue8 ].	"common case"
	d < 8
		ifTrue: [ d = 4
				ifTrue: [ ^ self closestPixelValue4 ].
			d = 2
				ifTrue: [ ^ self closestPixelValue2 ].
			d = 1
				ifTrue: [ ^ self closestPixelValue1 ] ].
	rgbBlack := 1.	"closest black that is not transparent in RGB"
	d = 16
		ifTrue: [ "five bits per component; top bits ignored"
			val := (((rgb bitShift: -15) bitAnd: 31744) bitOr: ((rgb bitShift: -10) bitAnd: 992))
				bitOr: ((rgb bitShift: -5) bitAnd: 31).
			^ val = 0
				ifTrue: [ rgbBlack ]
				ifFalse: [ val ] ].
	d = 32
		ifTrue: [ "eight bits per component; top 8 bits set to all ones (opaque alpha)"
			val := LargePositiveInteger new: 4.
			val at: 3 put: ((rgb bitShift: -22) bitAnd: 255).
			val at: 2 put: ((rgb bitShift: -12) bitAnd: 255).
			val at: 1 put: ((rgb bitShift: -2) bitAnd: 255).
			val at: 4 put: 255.	"opaque alpha"
			^ val ].
	d = 12
		ifTrue: [ "for indexing a color map with 4 bits per color component"
			val := (((rgb bitShift: -18) bitAnd: 3840) bitOr: ((rgb bitShift: -12) bitAnd: 240))
				bitOr: ((rgb bitShift: -6) bitAnd: 15).
			^ val = 0
				ifTrue: [ rgbBlack ]
				ifFalse: [ val ] ].
	d = 9
		ifTrue: [ "for indexing a color map with 3 bits per color component"
			val := (((rgb bitShift: -21) bitAnd: 448) bitOr: ((rgb bitShift: -14) bitAnd: 56))
				bitOr: ((rgb bitShift: -7) bitAnd: 7).
			^ val = 0
				ifTrue: [ rgbBlack ]
				ifFalse: [ val ] ].
	self error: 'unknown pixel depth: ' , d printString
]

Color >> bitPatternForDepth: depth
[
	"Return a Bitmap, possibly containing a stipple pattern, that best represents this color at the given depth. BitBlt calls this method to convert colors into Bitmaps. The resulting Bitmap may be multiple words to represent a stipple pattern of several lines.  "

	"See also:	pixelValueAtDepth:	-- value for single pixel
				pixelWordAtDepth:	-- a 32-bit word filled with the pixel value"

	"Details: The pattern for the most recently requested depth is cached."

	"Note for depths > 2, there are stippled and non-stippled versions (generated with #balancedPatternForDepth: and #bitPatternForDepth:, respectively). The stippled versions don't work with the window bit caching of StandardSystemView, so we make sure that for these depths, only unstippled patterns are returned"

	(depth = cachedDepth and: [ depth <= 2 or: [ cachedBitPattern size = 1 ] ])
		ifTrue: [ ^ cachedBitPattern ].
	(self isTransparent and: [ cachedBitPattern isNil ])
		ifTrue: [ cachedBitPattern := Bitmap with: 0.
			^ cachedBitPattern ].
	cachedDepth := depth.
	depth > 2
		ifTrue: [ ^ cachedBitPattern := Bitmap with: (self pixelWordForDepth: depth) ].
	depth = 1
		ifTrue: [ ^ cachedBitPattern := self halfTonePattern1 ].
	depth = 2
		ifTrue: [ ^ cachedBitPattern := self halfTonePattern2 ]
]

Color >> blacker
[
	^ self alphaMixed: 0.8333 with: self class black
]

Color >> blue
[
	"Return the blue component of this color, a float in the range [0.0..1.0]."

	^ self privateBlue asFloat / ComponentMax
]

Color >> brightness
[
	"Return the brightness of this color, a float in the range [0.0..1.0]."

	^ ((self privateRed max: self privateGreen) max: self privateBlue) asFloat / ComponentMax
]

Color >> closestPixelValue1
[
	"Return the nearest approximation to this color for a monochrome Form."

	"fast special cases"

	rgb = 0
		ifTrue: [ ^ 1 ].	"black"
	rgb = 16r3FFFFFFF
		ifTrue: [ ^ 0 ].	"white"
	self luminance > 0.5
		ifTrue: [ ^ 0 ]
		ifFalse: [ ^ 1 ]	"white"	"black"
]

Color >> closestPixelValue2
[
	"Return the nearest approximation to this color for a 2-bit deep Form."

	"fast special cases"

	| lum |
	rgb = 0
		ifTrue: [ ^ 1 ].	"black"
	rgb = 1073741823
		ifTrue: [ ^ 2 ].	"opaque white"
	lum := self luminance.
	lum < 0.2
		ifTrue: [ ^ 1 ].	"black"
	lum > 0.6
		ifTrue: [ ^ 2 ].	"opaque white"
	^ 3	"50% gray"
]

Color >> closestPixelValue4
[
	"Return the nearest approximation to this color for a 4-bit deep Form."

	"fast special cases"

	| bIndex |
	rgb = 0
		ifTrue: [ ^ 1 ].	"black"
	rgb = 1073741823
		ifTrue: [ ^ 2 ].	"opaque white"
	rgb = self class red privateRGB
		ifTrue: [ ^ 4 ].
	rgb = self class green privateRGB
		ifTrue: [ ^ 5 ].
	rgb = self class blue privateRGB
		ifTrue: [ ^ 6 ].
	rgb = self class cyan privateRGB
		ifTrue: [ ^ 7 ].
	rgb = self class yellow privateRGB
		ifTrue: [ ^ 8 ].
	rgb = self class magenta privateRGB
		ifTrue: [ ^ 9 ].
	bIndex := (self luminance * 8.0) rounded.	"bIndex in [0..8]"
	^ #(1 10 11 12 3 13 14 15 2) at: bIndex + 1	"black"	"1/8 gray"	"2/8 gray"	"3/8 gray"	"4/8 gray"	"5/8 gray"	"6/8 gray"	"7/8 gray"	"opaque white"
]

Color >> closestPixelValue8
[
	"Return the nearest approximation to this color for an 8-bit deep Form."

	"fast special cases"

	rgb = 0
		ifTrue: [ ^ 1 ].	"black"
	rgb = 16r3FFFFFFF
		ifTrue: [ ^ 255 ].	"white"
	self saturation < 0.2
		ifTrue: [ ^ GrayToIndexMap at: (self privateGreen >> 2) + 1	"nearest gray" ]
		ifFalse: [ "compute nearest entry in the color cube"
			^ 40 + ((self privateRed * 5 + HalfComponentMask) // ComponentMask * 36)
				+ ((self privateBlue * 5 + HalfComponentMask) // ComponentMask * 6)
				+ ((self privateGreen * 5 + HalfComponentMask) // ComponentMask) ]
]

Color >> colorForInsets
[
	^ self
]

Color >> contrastingColor
[
	"Answer black or white depending on the luminance."

	self isTransparent
		ifTrue: [ ^ self class black ].
	^ self luminance > 0.5
		ifTrue: [ self class black ]
		ifFalse: [ self class white ]
]

Color >> contrastingForegroundColor
[
	"Make a foreground color contrasting with me"

	^ self luminance >= 0.5
		ifTrue: [ self class black ]
		ifFalse: [ self class white ]
]

Color >> dansDarker
[
	"Return a darker shade of the same color.
	An attempt to do better than the current darker method.
	(now obsolete, since darker has been changed to do this. -dew)"

	^ self class h: self hue s: self saturation v: (self brightness - 0.16 max: 0.0)
]

Color >> darkShades: thisMany
[
	"An array of thisMany colors from black to the receiver.  Array is of length num. Very useful for displaying color based on a variable in your program.  "

	"Color showColors: (Color red darkShades: 12)"

	^ self class black mix: self shades: thisMany
]

Color >> darker
[
	"Answer a darker shade of this color."

	^ self adjustBrightness: -0.08
]

Color >> diff: theOther
[
	"Returns a number between 0.0 and 1.0"

	^ ((self privateRed - theOther privateRed) abs + (self privateGreen - theOther privateGreen) abs
		+ (self privateBlue - theOther privateBlue) abs) / 3.0 / ComponentMax
]

Color >> dominantColor
[
	^ self
]

Color >> duller
[
	"Answer a darker, desaturated color.  If the original color isn't very saturated, desaturate it by less (otherwise will just end up with grey)."

	| sat adjust |
	(sat := self saturation) > 0.3
		ifTrue: [ adjust := -0.1 ]
		ifFalse: [ adjust := 0.1 - sat max: 0.0 ].
	^ self adjustSaturation: adjust brightness: -0.1	"^ self adjustSaturation: -0.03 brightness: -0.2"
]

Color >> flushCache
[
	"Flush my cached bit pattern."

	cachedDepth := nil.
	cachedBitPattern := nil
]

Color >> green
[
	"Return the green component of this color, a float in the range [0.0..1.0]."

	^ self privateGreen asFloat / ComponentMax
]

Color >> halfTonePattern1
[
	"Return a halftone-pattern to approximate luminance levels on 1-bit deep Forms."

	| lum |
	lum := self luminance.
	lum < 0.1
		ifTrue: [ ^ Bitmap with: 4294967295 ].	"black"
	lum < 0.4
		ifTrue: [ ^ Bitmap with: 3149642683 with: 4008636142 ].	"dark gray"
	lum < 0.6
		ifTrue: [ ^ Bitmap with: 1431655765 with: 2863311530 ].	"medium gray"
	lum < 0.9
		ifTrue: [ ^ Bitmap with: 1145324612 with: 286331153 ].	"light gray"
	^ Bitmap with: 0	"1-bit white"
]

Color >> halfTonePattern2
[
	"Return a halftone-pattern to approximate luminance levels on 2-bit deep Forms."

	| lum |
	lum := self luminance.
	lum < 0.125
		ifTrue: [ ^ Bitmap with: 1431655765 ].	"black"
	lum < 0.25
		ifTrue: [ ^ Bitmap with: 1431655765 with: 3722304989 ].	"1/8 gray"
	lum < 0.375
		ifTrue: [ ^ Bitmap with: 3722304989 with: 2004318071 ].	"2/8 gray"
	lum < 0.5
		ifTrue: [ ^ Bitmap with: 4294967295 with: 2004318071 ].	"3/8 gray"
	lum < 0.625
		ifTrue: [ ^ Bitmap with: 4294967295 ].	"4/8 gray"
	lum < 0.75
		ifTrue: [ ^ Bitmap with: 4294967295 with: 3149642683 ].	"5/8 gray"
	lum < 0.875
		ifTrue: [ ^ Bitmap with: 4008636142 with: 3149642683 ].	"6/8 gray"
	lum < 1.0
		ifTrue: [ ^ Bitmap with: 2863311530 with: 3149642683 ].	"7/8 gray"
	^ Bitmap with: 2863311530	"opaque white"	"handy expression for computing patterns for 2x2 tiles; set p to a string of 4 letters (e.g., 'wggw' for a gray-and- white checkerboard) and print the result of evaluating:| p d w1 w2 |p := 'wggw'.d := Dictionary new.d at: $b put: '01'.d at: $w put: '10'.d at: $g put: '11'.w1 := (d at: (p at: 1)), (d at: (p at: 2)).w1 := '2r', w1, w1, w1, w1, w1, w1, w1, w1, ' hex'.w2 := (d at: (p at: 3)), (d at: (p at: 4)).w2 := '2r', w2, w2, w2, w2, w2, w2, w2, w2, ' hex'.Array with: (Compiler evaluate: w1) with: (Compiler evaluate: w2) "
]

Color >> hash
[
	^ rgb bitXor: alpha
]

Color >> hue
[
	"Return the hue of this color, an angle in the range [0.0..360.0]."

	| r g b max min span h |
	r := self privateRed.
	g := self privateGreen.
	b := self privateBlue.
	max := (r max: g) max: b.
	min := (r min: g) min: b.
	span := (max - min) asFloat.
	span = 0.0
		ifTrue: [ ^ 0.0 ].
	r = max
		ifTrue: [ h := (g - b) asFloat / span * 60.0 ]
		ifFalse: [ g = max
				ifTrue: [ h := 120.0 + ((b - r) asFloat / span * 60.0) ]
				ifFalse: [ h := 240.0 + ((r - g) asFloat / span * 60.0) ] ].
	h < 0.0
		ifTrue: [ h := 360.0 + h ].
	^ h
]

Color >> indexInMap: aColorMap
[
	"Return the index corresponding to this color in the given color map. RGB colors are truncated to 3-, 4-, or 5-bits per color component when indexing into such a colorMap.  "

	aColorMap size = 2
		ifTrue: [ ^ (self pixelValueForDepth: 1) + 1 ].
	aColorMap size = 4
		ifTrue: [ ^ (self pixelValueForDepth: 2) + 1 ].
	aColorMap size = 16
		ifTrue: [ ^ (self pixelValueForDepth: 4) + 1 ].
	aColorMap size = 256
		ifTrue: [ ^ (self pixelValueForDepth: 8) + 1 ].
	aColorMap size = 512
		ifTrue: [ ^ (self pixelValueForDepth: 9) + 1 ].
	aColorMap size = 4096
		ifTrue: [ ^ (self pixelValueForDepth: 12) + 1 ].
	aColorMap size = 32768
		ifTrue: [ ^ (self pixelValueForDepth: 16) + 1 ].
	self error: 'unknown pixel depth'
]

Color >> initializePrivateRed: r green: g blue: b
[
	"Initialize this color's r, g, and b components to the given values in the range [0..ComponentMax].  Encoded in a single variable as 3 integers in [0..1023]."

	rgb == nil
		ifFalse: [ self attemptToMutateError ].
	rgb := ((r min: ComponentMask max: 0) bitShift: RedShift) + ((g min: ComponentMask max: 0) bitShift: GreenShift)
		+ (b min: ComponentMask max: 0).
	cachedDepth := nil.
	cachedBitPattern := nil
]

Color >> initializeRed: r green: g blue: b alpha: anAlpha
[
	"Initialize this color's r, g, and b components to the given values in the range [0.0..1.0].  Encoded in a single variable as 3 integers in [0..1023]."

	rgb == nil
		ifFalse: [ self attemptToMutateError ].
	rgb := (((r * ComponentMax) rounded bitAnd: ComponentMask) bitShift: RedShift)
		+ (((g * ComponentMax) rounded bitAnd: ComponentMask) bitShift: GreenShift)
		+ ((b * ComponentMax) rounded bitAnd: ComponentMask).
	cachedDepth := nil.
	cachedBitPattern := nil.
	self setAlpha: anAlpha
]

Color >> initializeRed: r green: g blue: b range: range
[
	"Initialize this color's r, g, and b components to the given values in the range [0..r]."

	rgb == nil
		ifFalse: [ self attemptToMutateError ].
	rgb := ((r * ComponentMask // range bitAnd: ComponentMask) bitShift: RedShift)
		+ ((g * ComponentMask // range bitAnd: ComponentMask) bitShift: GreenShift)
		+ (b * ComponentMask // range bitAnd: ComponentMask).
	cachedDepth := nil.
	cachedBitPattern := nil.
	self setAlpha: 1.0
]

Color >> intializeHue: hue saturation: saturation brightness: brightness alpha: anAlpha
[
	"Initialize this color to the given hue, saturation, and brightness. See the comment in the instance creation method for details."

	| s v hf i f p q t |
	rgb == nil
		ifFalse: [ self attemptToMutateError ].
	s := (saturation asFloat max: 0.0) min: 1.0.
	v := (brightness asFloat max: 0.0) min: 1.0.	"zero saturation yields gray with the given brightness"
	s = 0.0
		ifTrue: [ ^ self
				initializeRed: v
				green: v
				blue: v
				alpha: anAlpha ].
	hf := hue asFloat.
	(hf < 0.0 or: [ hf >= 360.0 ])
		ifTrue: [ hf := hf - ((hf quo: 360.0) asFloat * 360.0) ].
	hf := hf / 60.0.
	i := hf asInteger.	"integer part of hue"
	f := hf fractionPart.	"fractional part of hue"
	p := (1.0 - s) * v.
	q := (1.0 - (s * f)) * v.
	t := (1.0 - (s * (1.0 - f))) * v.
	0 = i
		ifTrue: [ ^ self
				initializeRed: v
				green: t
				blue: p
				alpha: anAlpha ].
	1 = i
		ifTrue: [ ^ self
				initializeRed: q
				green: v
				blue: p
				alpha: anAlpha ].
	2 = i
		ifTrue: [ ^ self
				initializeRed: p
				green: v
				blue: t
				alpha: anAlpha ].
	3 = i
		ifTrue: [ ^ self
				initializeRed: p
				green: q
				blue: v
				alpha: anAlpha ].
	4 = i
		ifTrue: [ ^ self
				initializeRed: t
				green: p
				blue: v
				alpha: anAlpha ].
	5 = i
		ifTrue: [ ^ self
				initializeRed: v
				green: p
				blue: q
				alpha: anAlpha ].
	self error: 'implementation error'
]

Color >> isBitmapFill
[
	^ false
]

Color >> isBlack
[
	"Return true if the receiver represents black"

	^ rgb = 0
]

Color >> isColor
[
	^ true
]

Color >> isGradientFill
[
	^ false
]

Color >> isGray
[
	"Return true if the receiver represents a shade of gray"

	^ self privateRed = self privateGreen and: [ self privateRed = self privateBlue ]
]

Color >> isOpaque
[
	^ alpha = 255
]

Color >> isOrientedFill
[
	"Return true if the receiver keeps an orientation (e.g., origin, direction, and normal)"

	^ false
]

Color >> isSelfEvaluating
[
	^ true
]

Color >> isSolidFill
[
	^ true
]

Color >> isTranslucent
[
	^ alpha < 255
]

Color >> isTranslucentButNotTransparent
[
	"Answer true if this any of this morph is translucent but not transparent."

	^ self isTranslucent and: [ self isTransparent not ]
]

Color >> isTranslucentColor
[
	"This means: self isTranslucent, but isTransparent not"

	self flag: #toremove.
	^ false
]

Color >> isTransparent
[
	^ alpha = 0
]

Color >> lightShades: thisMany
[
	"An array of thisMany colors from white to self. Very useful for displaying color based on a variable in your program.  "

	"Color showColors: (Color red lightShades: 12)"

	^ self class white mix: self shades: thisMany
]

Color >> lighter
[
	"Answer a lighter shade of this color."

	^ self adjustSaturation: -0.03 brightness: 0.08
]

Color >> luminance
[
	"Return the luminance of this color, a brightness value weighted by the human eye's color sensitivity."

	^ (299 * self privateRed + (587 * self privateGreen) + (114 * self privateBlue)) / (1000 * ComponentMax)
]

Color >> mix: color2 shades: thisMany
[
	"Return an array of thisMany colors from self to color2. Very useful for displaying color based on a variable in your program.  "

	"Color showColors: (Color red mix: Color green shades: 12)"

	| redInc greenInc blueInc out rr gg bb |
	thisMany = 1
		ifTrue: [ ^ Array with: color2 ].
	redInc := (color2 red - self red) / (thisMany - 1).
	greenInc := (color2 green - self green) / (thisMany - 1).
	blueInc := (color2 blue - self blue) / (thisMany - 1).
	rr := self red.
	gg := self green.
	bb := self blue.
	out := (1 to: thisMany)
		collect: [ :num | | c |
			c := self class r: rr g: gg b: bb.
			rr := rr + redInc.
			gg := gg + greenInc.
			bb := bb + blueInc.
			c ].
	out at: out size put: color2.	"hide roundoff errors"
	^ out
]

Color >> mixed: proportion with: aColor
[
	"Mix with another color and do not preserve transpareny.  Only use this for extracting the RGB value and mixing it.  All other callers should use instead: 
	aColor alphaMixed: proportion with: anotherColor
	"

	| frac1 frac2 |
	frac1 := proportion asFloat min: 1.0 max: 0.0.
	frac2 := 1.0 - frac1.
	^ self class
		r: self red * frac1 + (aColor red * frac2)
		g: self green * frac1 + (aColor green * frac2)
		b: self blue * frac1 + (aColor blue * frac2)
]

Color >> muchDarker
[
	^ self alphaMixed: 0.5 with: (ColorRegistry at: #black)
]

Color >> muchLighter
[
	^ self alphaMixed: 0.233 with: Color white
]

Color >> name
[
	^ self class registeredNameOf: self
]

Color >> negated
[
	"Return an RGB inverted color"

	^ Color r: 1.0 - self red g: 1.0 - self green b: 1.0 - self blue
]

Color >> orColorUnlike: theOther
[
	"If this color is a lot like theOther, then return its complement, otherwide, return self"

	^ (self diff: theOther) < 0.3
		ifTrue: [ theOther negated ]
		ifFalse: [ self ]
]

Color >> paler
[
	"Answer a paler shade of this color."

	^ self adjustSaturation: -0.09 brightness: 0.09
]

Color >> pixelValueForDepth: d
[
	"Return the pixel value for this color at the given depth. Translucency only works in RGB; this color will appear either opaque or transparent at all other depths."

	| basicPixelWord |
	(d < 32 and: [ self isTransparent ])
		ifTrue: [ ^ 0 ].
	basicPixelWord := self basicPixelValueForDepth: d.
	^ d < 32
		ifTrue: [ basicPixelWord ]
		ifFalse: [ (basicPixelWord bitAnd: 16777215) bitOr: (alpha bitShift: 24) ]
]

Color >> pixelWordFor: depth filledWith: pixelValue
[
	"Return to a 32-bit word that concatenates enough copies of the given pixel value to fill the word (i.e., 32/depth copies). Depth should be one of 1, 2, 4, 8, 16, or 32. The pixel value should be an integer in 0..2^depth-1."

	| halfword |
	depth = 32
		ifTrue: [ ^ pixelValue ].
	depth = 16
		ifTrue: [ halfword := pixelValue ]
		ifFalse: [ halfword := pixelValue * (#(65535 21845 #- 4369 #- #- #- 257) at: depth)	"replicates at every bit"	"replicates every 2 bits"	"replicates every 4 bits"	"replicates every 8 bits" ].
	^ halfword bitOr: (halfword bitShift: 16)
]

Color >> pixelWordForDepth: depth
[
	"Return to a 32-bit word that concatenates enough copies of the receiver's pixel value to fill the word (i.e., 32/depth copies). Depth should be one of 1, 2, 4, 8, 16, or 32. The pixel value should be an integer in 0..2^depth-1."

	| pixelValue basicPixelWord |
	self isTransparent
		ifTrue: [ ^ 0 ].
	pixelValue := self pixelValueForDepth: depth.
	basicPixelWord := self pixelWordFor: depth filledWith: pixelValue.
	^ depth < 32
		ifTrue: [ basicPixelWord ]
		ifFalse: [ (basicPixelWord bitAnd: 16777215) bitOr: (alpha bitShift: 24) ]
]

Color >> printHtmlString
[
	"answer a string whose characters are the html representation  
	of the receiver"

	^ ((self red * 255) asInteger printStringBase: 16 length: 2 padded: true)
		, ((self green * 255) asInteger printStringBase: 16 length: 2 padded: true)
		, ((self blue * 255) asInteger printStringBase: 16 length: 2 padded: true)
]

Color >> printOn: aStream
[
	| name |
	name := self name.
	name = #unnamed
		ifFalse: [ ^ aStream
				nextPutAll: 'Color ';
				nextPutAll: name ].
	self storeOn: aStream
]

Color >> privateAlpha
[
	"Private! Return the raw alpha value for opaque. Used only for equality testing."

	^ alpha
]

Color >> privateBlue
[
	"Private! Return the internal representation of my blue component."

	^ rgb bitAnd: ComponentMask
]

Color >> privateGreen
[
	"Private! Return the internal representation of my green component."

	^ (rgb bitShift: 0 - GreenShift) bitAnd: ComponentMask
]

Color >> privateRGB
[
	"Private! Return the internal representation of my RGB components."

	^ rgb
]

Color >> privateRed
[
	"Private! Return the internal representation of my red component."

	^ (rgb bitShift: 0 - RedShift) bitAnd: ComponentMask
]

Color >> quiteBlacker
[
	^ self alphaMixed: 0.8 with: (ColorRegistry at: #black)
]

Color >> quiteWhiter
[
	^ self alphaMixed: 0.6 with: (ColorRegistry at: #white)
]

Color >> raisedColor
[
	^ self
]

Color >> red
[
	"Return the red component of this color, a float in the range [0.0..1.0]."

	^ self privateRed asFloat / ComponentMax
]

Color >> rgbTriplet
[
	"Color fromUser rgbTriplet"

	^ Array with: (self red roundTo: 0.01) with: (self green roundTo: 0.01) with: (self blue roundTo: 0.01)
]

Color >> saturation
[
	"Return the saturation of this color, a value between 0.0 and 1.0."

	| r g b max min |
	r := self privateRed.
	g := self privateGreen.
	b := self privateBlue.
	max := min := r.
	g > max
		ifTrue: [ max := g ].
	b > max
		ifTrue: [ max := b ].
	g < min
		ifTrue: [ min := g ].
	b < min
		ifTrue: [ min := b ].
	max = 0
		ifTrue: [ ^ 0.0 ]
		ifFalse: [ ^ (max - min) asFloat / max asFloat ]
]

Color >> scaledPixelValue32
[
	"Return the alpha scaled pixel value for depth 32"

	| pv32 a b g r |
	pv32 := self pixelWordForDepth: 32.
	a := (self alpha * 255.0) rounded.
	b := (pv32 bitAnd: 255) * a // 256.
	g := ((pv32 bitShift: -8) bitAnd: 255) * a // 256.
	r := ((pv32 bitShift: -16) bitAnd: 255) * a // 256.
	^ b + (g bitShift: 8) + (r bitShift: 16) + (a bitShift: 24)
]

Color >> setAlpha: aFloat
[
	alpha := ((255.0 * aFloat) asInteger min: 255) max: 0
]

Color >> setHue: hue saturation: saturation brightness: brightness
[
	"Initialize this color to the given hue, saturation, and brightness. See the comment in the instance creation method for details."

	| s v hf i f p q t |
	s := (saturation asFloat max: 0.0) min: 1.0.
	v := (brightness asFloat max: 0.0) min: 1.0.	"zero saturation yields gray with the given brightness"
	s = 0.0
		ifTrue: [ ^ self setRed: v green: v blue: v ].
	hf := hue asFloat.
	(hf < 0.0 or: [ hf >= 360.0 ])
		ifTrue: [ hf := hf - ((hf quo: 360.0) asFloat * 360.0) ].
	hf := hf / 60.0.
	i := hf asInteger.	"integer part of hue"
	f := hf fractionPart.	"fractional part of hue"
	p := (1.0 - s) * v.
	q := (1.0 - (s * f)) * v.
	t := (1.0 - (s * (1.0 - f))) * v.
	0 = i
		ifTrue: [ ^ self setRed: v green: t blue: p ].
	1 = i
		ifTrue: [ ^ self setRed: q green: v blue: p ].
	2 = i
		ifTrue: [ ^ self setRed: p green: v blue: t ].
	3 = i
		ifTrue: [ ^ self setRed: p green: q blue: v ].
	4 = i
		ifTrue: [ ^ self setRed: t green: p blue: v ].
	5 = i
		ifTrue: [ ^ self setRed: v green: p blue: q ].
	self error: 'implementation error'
]

Color >> setPrivateRed: r green: g blue: b
[
	"Initialize this color's r, g, and b components to the given values in the range [0..ComponentMax].  Encoded in a single variable as 3 integers in [0..1023]."

	rgb == nil
		ifFalse: [ self attemptToMutateError ].
	rgb := ((r min: ComponentMask max: 0) bitShift: RedShift) + ((g min: ComponentMask max: 0) bitShift: GreenShift)
		+ (b min: ComponentMask max: 0).
	cachedDepth := nil.
	cachedBitPattern := nil
]

Color >> setRGB: rgb0
[
	rgb == nil
		ifFalse: [ self attemptToMutateError ].
	rgb := rgb0
]

Color >> setRed: r green: g blue: b
[
	"Initialize this color's r, g, and b components to the given values in the range [0.0..1.0].  Encoded in a single variable as 3 integers in [0..1023]."

	rgb == nil
		ifFalse: [ self attemptToMutateError ].
	rgb := (((r * ComponentMax) rounded bitAnd: ComponentMask) bitShift: RedShift)
		+ (((g * ComponentMax) rounded bitAnd: ComponentMask) bitShift: GreenShift)
		+ ((b * ComponentMax) rounded bitAnd: ComponentMask).
	cachedDepth := nil.
	cachedBitPattern := nil
]

Color >> setRed: r green: g blue: b range: range
[
	"Initialize this color's r, g, and b components to the given values in the range [0..r]."

	rgb == nil
		ifFalse: [ self attemptToMutateError ].
	rgb := ((r * ComponentMask // range bitAnd: ComponentMask) bitShift: RedShift)
		+ ((g * ComponentMask // range bitAnd: ComponentMask) bitShift: GreenShift)
		+ (b * ComponentMask // range bitAnd: ComponentMask).
	cachedDepth := nil.
	cachedBitPattern := nil
]

Color >> shortPrintString
[
	"Return a short (but less precise) print string for use where space is tight."

	| s |
	s := String new writeStream.
	s
		nextPutAll: '(' , self class name;
		nextPutAll: ' r: ';
		nextPutAll: (self red roundTo: 0.01) printString;
		nextPutAll: ' g: ';
		nextPutAll: (self green roundTo: 0.01) printString;
		nextPutAll: ' b: ';
		nextPutAll: (self blue roundTo: 0.01) printString;
		nextPutAll: ')'.
	^ s contents
]

Color >> slightlyDarker
[
	^ self adjustBrightness: -0.03
]

Color >> slightlyLighter
[
	^ self adjustSaturation: -0.01 brightness: 0.03
]

Color >> slightlyWhiter
[
	^ self alphaMixed: 0.85 with: (ColorRegistry at: #white)
]

Color >> storeArrayOn: aStream
[
	aStream nextPutAll: '#('.
	self storeArrayValuesOn: aStream.
	aStream nextPutAll: ') '
]

Color >> storeArrayValuesOn: aStream
[
	self isTransparent
		ifTrue: [ ^ aStream space ].
	(self red roundTo: 0.001) storeOn: aStream.
	aStream space.
	(self green roundTo: 0.001) storeOn: aStream.
	aStream space.
	(self blue roundTo: 0.001) storeOn: aStream.
	aStream space.
	(self alpha roundTo: 0.001) storeOn: aStream
]

Color >> storeOn: aStream
[
	self isTransparent
		ifTrue: [ ^ aStream nextPutAll: '(Color transparent)' ].
	aStream
		nextPutAll: '(' , self class name;
		nextPutAll: ' r: ';
		print: (self red roundTo: 0.001);
		nextPutAll: ' g: ';
		print: (self green roundTo: 0.001);
		nextPutAll: ' b: ';
		print: (self blue roundTo: 0.001);
		nextPutAll: ' alpha: ';
		print: (self alpha roundTo: 0.001);
		nextPutAll: ')'
]

Color >> twiceDarker
[
	"Answer a significantly darker shade of this color."

	^ self adjustBrightness: -0.15
]

Color >> twiceLighter
[
	"Answer a significantly lighter shade of this color."

	^ self adjustSaturation: -0.06 brightness: 0.15
]

Color >> veryDeepCopyWith: deepCopier
[
	"Return self.  I am immutable in the Morphic world.  Do not record me."

	
]

Color >> veryMuchLighter
[
	^ self alphaMixed: 0.1165 with: (ColorRegistry at: #white)
]

Color >> wheel: thisMany
[
	"An array of thisMany colors around the color wheel starting at self and ending all the way around the hue space just before self.  Array is of length thisMany.  Very useful for displaying color based on a variable in your program.  "

	| sat bri step hue |
	sat := self saturation.
	bri := self brightness.
	hue := self hue.
	step := 360.0 / (thisMany max: 1).
	^ (1 to: thisMany)
		collect: [ :num | | c |
			c := self class h: hue s: sat v: bri.	"hue is taken mod 360"
			hue := hue + step.
			c ]	"(Color wheel: 8) withIndexDo: [:c :i | Display fill: (i*10@20 extent: 10@20) fillColor: c]"
]

Color >> whiter
[
	^ self alphaMixed: 0.8333 with: (ColorRegistry at: #white)
]

Color class >> aaFontsColormapDepth
[
	"Adjust balance between colored AA text quality (especially if subpixel AA is used) and space / performance.
	5 is optimal quality. Each colorMap takes 128kB of RAM, and takes several seconds to build.
	4 is a reasonable balance. Each colorMap takes 16kB of RAM and builds fast on a fast machine.
	3 is good for slow hardware or memory restrictions. Each colorMap takes 2 kb of RAM."

	^ 4
]

Color class >> black
[
	^ ColorRegistry at: #black
]

Color class >> blue
[
	^ ColorRegistry at: #blue
]

Color class >> brown
[
	^ ColorRegistry at: #brown
]

Color class >> cachedColormapFrom: sourceDepth to: destDepth
[
	"Return a cached colormap for mapping between the given depths. Always return a real colormap, not nil; this allows the client to get an identity colormap that can then be copied and modified to do color transformations."

	"Note: This method returns a shared, cached colormap to save time and space. Clients that need to modify a colormap returned by this method should make a copy and modify that!"

	"Note: The colormap cache may be cleared by evaluating 'Color shutDown'."

	| srcIndex map |
	CachedColormaps class == Array
		ifFalse: [ CachedColormaps := (1 to: 9) collect: [ :i | Array new: 32 ] ].
	srcIndex := sourceDepth.
	sourceDepth > 8
		ifTrue: [ srcIndex := 9 ].
	(map := (CachedColormaps at: srcIndex) at: destDepth) ~~ nil
		ifTrue: [ ^ map ].
	map := self computeColormapFrom: sourceDepth to: destDepth.
	(CachedColormaps at: srcIndex) at: destDepth put: map.
	^ map
]

Color class >> colorFrom: parm
[
	"Return an instantiated color from parm.  If parm is already a color, return it, else return the result of my performing it if it's a symbol or, if it is a list, it can either be an array of three numbers, which will be interpreted as RGB values, or a list of symbols, the first of which is sent to me and then the others of which are in turn sent to the prior result, thus allowing entries of the form #(blue darker).  Else just return the thing"

	| aColor firstParm |
	(parm isKindOf: Color)
		ifTrue: [ ^ parm ].
	parm isSymbol
		ifTrue: [ ^ self perform: parm ].
	parm isString
		ifTrue: [ ^ self fromString: parm ].
	((parm isKindOf: SequenceableCollection) and: [ parm size > 0 ])
		ifTrue: [ firstParm := parm first.
			(firstParm isKindOf: Number)
				ifTrue: [ ^ self fromRgbTriplet: parm ].
			aColor := self colorFrom: firstParm.
			parm doWithIndex: [ :sym :ind | ind > 1
						ifTrue: [ aColor := aColor perform: sym ] ].
			^ aColor ].
	^ parm	"Color colorFrom: #(blue darker)Color colorFrom: Color blue darkerColor colorFrom: #blueColor colorFrom: #(0.0 0.0 1.0)"
]

Color class >> colorFromPixelValue: p depth: d
[
	"Convert a pixel value for the given display depth into a color."

	"Details: For depths of 8 or less, the pixel value is simply looked up in a table. For greater depths, the color components are extracted and converted into a color."

	| r g b alpha |
	d = 8
		ifTrue: [ ^ IndexedColors at: (p bitAnd: 255) + 1 ].
	d = 4
		ifTrue: [ ^ IndexedColors at: (p bitAnd: 15) + 1 ].
	d = 2
		ifTrue: [ ^ IndexedColors at: (p bitAnd: 3) + 1 ].
	d = 1
		ifTrue: [ ^ IndexedColors at: (p bitAnd: 1) + 1 ].
	d = 16 | (d = 15)
		ifTrue: [ "five bits per component"
			r := (p bitShift: -10) bitAnd: 31.
			g := (p bitShift: -5) bitAnd: 31.
			b := p bitAnd: 31.
			(r = 0 and: [ g = 0 ])
				ifTrue: [ b = 0
						ifTrue: [ ^ self transparent ].
					b = 1
						ifTrue: [ ^ self black ] ].
			^ self
				r: r
				g: g
				b: b
				range: 31 ].
	d = 32
		ifTrue: [ "eight bits per component; 8 bits of alpha"
			r := (p bitShift: -16) bitAnd: 255.
			g := (p bitShift: -8) bitAnd: 255.
			b := p bitAnd: 255.
			alpha := p bitShift: -24.
			alpha = 0
				ifTrue: [ ^ self transparent ].
			(r = 0 and: [ g = 0 and: [ b = 0 ] ])
				ifTrue: [ ^ self transparent ].
			alpha < 255
				ifTrue: [ ^ (self
						r: r
						g: g
						b: b
						range: 255) alpha: alpha asFloat / 255.0 ]
				ifFalse: [ ^ self
						r: r
						g: g
						b: b
						range: 255 ] ].
	d = 12
		ifTrue: [ "four bits per component"
			r := (p bitShift: -8) bitAnd: 15.
			g := (p bitShift: -4) bitAnd: 15.
			b := p bitAnd: 15.
			^ self
				r: r
				g: g
				b: b
				range: 15 ].
	d = 9
		ifTrue: [ "three bits per component"
			r := (p bitShift: -6) bitAnd: 7.
			g := (p bitShift: -3) bitAnd: 7.
			b := p bitAnd: 7.
			^ self
				r: r
				g: g
				b: b
				range: 7 ].
	self error: 'unknown pixel depth: ' , d printString
]

Color class >> colorMapIfNeededFrom: sourceDepth to: destDepth
[
	"Return a colormap for mapping between the given depths, or nil if no colormap is needed."

	"Note: This method returns a shared, cached colormap to save time and space. Clients that need to modify a colormap returned by this method should make a copy and modify that!"

	sourceDepth = destDepth
		ifTrue: [ ^ nil ].	"not needed if depths are the same"
	sourceDepth >= 16 & (destDepth >= 16)
		ifTrue: [ "mapping is done in BitBlt by zero-filling or truncating each color component"
			^ nil ].
	^ self cachedColormapFrom: sourceDepth to: destDepth
]

Color class >> colorPaletteForDepth: depth extent: chartExtent
[
	"Display a palette of colors sorted horizontally by hue and vertically by lightness. Useful for eyeballing the color gamut of the display, or for choosing a color interactively."

	"Note: It is slow to build this palette, so it should be cached for quick access."

	"(Color colorPaletteForDepth: 16 extent: 190@60) display"

	| basicHue x y startHue palette transHt vSteps transCaption grayWidth hSteps |
	palette := Form extent: chartExtent depth: depth.
	transCaption := Form
		extent: 34 @ 9
		depth: 1
		fromArray: #(0 0 256 0 256 0 3808663859 2147483648 2491688266 2147483648 2491688266 0 2491688266 0 2466486578 0 0 0)
		offset: 0 @ 0.
	transHt := transCaption height.
	palette fillWhite: (0 @ 0 extent: palette width @ transHt).
	palette fillBlack: (0 @ transHt extent: palette width @ 1).
	transCaption displayOn: palette at: palette boundingBox topCenter - ((transCaption width // 2) @ 0).
	grayWidth := 10.
	startHue := 338.0.
	vSteps := (palette height - transHt) // 2.
	hSteps := palette width - grayWidth.
	x := 0.
	startHue to: startHue + 360.0 by: 360.0 / hSteps do: [ :h | basicHue := Color h: h asFloat s: 1.0 v: 1.0.
		y := transHt + 1.
		0 to: vSteps do: [ :n | | c |
			c := basicHue mixed: n asFloat / vSteps asFloat with: self white.
			palette fill: (x @ y extent: 1 @ 1) fillColor: c.
			y := y + 1 ].
		1 to: vSteps do: [ :n | | c |
			c := self black mixed: n asFloat / vSteps asFloat with: basicHue.
			palette fill: (x @ y extent: 1 @ 1) fillColor: c.
			y := y + 1 ].
		x := x + 1 ].
	y := transHt + 1.
	1 to: vSteps * 2 do: [ :n | | c |
		c := self black mixed: n asFloat / (vSteps * 2) asFloat with: self white.
		palette fill: (x @ y extent: 10 @ 1) fillColor: c.
		y := y + 1 ].
	^ palette
]

Color class >> computeColorConvertingMap: targetColor from: sourceDepth to: destDepth keepSubPixelAA: keepSubPix
[
	sourceDepth < 16
		ifTrue: [ 
			"source is 1-, 2-, 4-, or 8-bit indexed color.		Assumed not to include subpixelAA"
			^ self computeIndexedColorConvertingMap: targetColor from: sourceDepth to: destDepth ]
		ifFalse: [ 
			"source is 16-bit or 32-bit RGB.		Might include subpixelAA"
			^ self computeRGBColorConvertingMap: targetColor to: destDepth keepSubPixelAA: keepSubPix ]
]

Color class >> computeColormapFrom: sourceDepth to: destDepth
[
	"Compute a colorMap for translating between the given depths. A colormap is a Bitmap whose entries contain the pixel values for the destination depth. Typical clients use cachedColormapFrom:to: instead."

	| map bitsPerColor |
	sourceDepth < 16
		ifTrue: [ "source is 1-, 2-, 4-, or 8-bit indexed color"
			map := (IndexedColors copyFrom: 1 to: (1 bitShift: sourceDepth)) collect: [ :c | c pixelValueForDepth: destDepth ].
			map := map as: Bitmap ]
		ifFalse: [ "source is 16-bit or 32-bit RGB"
			destDepth > 8
				ifTrue: [ bitsPerColor := 5	"retain maximum color resolution" ]
				ifFalse: [ bitsPerColor := 4 ].
			map := self computeRGBColormapFor: destDepth bitsPerColor: bitsPerColor ].	"Note: zero is transparent except when source depth is one-bit deep"
	sourceDepth > 1
		ifTrue: [ map at: 1 put: 0 ].
	^ map
]

Color class >> computeIndexedColorConvertingMap: targetColor from: sourceDepth to: destDepth
[
	| map |
	map := (IndexedColors copyFrom: 1 to: (1 bitShift: sourceDepth))
		collect: [ :cc | | f c |
			f := 1.0 - ((cc red + cc green + cc blue) / 3.0).
			c := targetColor notNil
				ifTrue: [ destDepth = 32
						ifTrue: [ targetColor * f alpha: f ]
						ifFalse: [ targetColor alphaMixed: f * 1.5 with: self white ] ]
				ifFalse: [ cc ].
			destDepth = 32
				ifTrue: [ c pixelValueForDepth: destDepth ]
				ifFalse: [ f = 0.0
						ifTrue: [ 0 ]
						ifFalse: [ c pixelValueForDepth: destDepth ] ] ].
	map := map as: Bitmap.
	^ map
]

Color class >> computeRGBColorConvertingMap: targetColor to: destDepth keepSubPixelAA: keepSubPix
[
	"Builds a colormap intended to convert from subpixelAA black values to targetColor values.
	keepSubPix
		ifTrue: [ Answer colors that also include subpixelAA ]
		ifFalse: [ 
			Take fullpixel luminance level. Apply it to targetColor.
			I.e. answer colors with NO subpixelAA ]"

	| mask map c bitsPerColor r g b f v |
	destDepth > 8
		ifTrue: [ bitsPerColor := 5	"retain maximum color resolution" ]
		ifFalse: [ bitsPerColor := 4 ].	"Usually a bit less is enough, but make it configurable"
	bitsPerColor := bitsPerColor min: self aaFontsColormapDepth.
	mask := (1 bitShift: bitsPerColor) - 1.
	map := Bitmap new: (1 bitShift: 3 * bitsPerColor).
	0 to: map size - 1 do: [ :i | r := (i bitShift: 0 - (2 * bitsPerColor)) bitAnd: mask.
		g := (i bitShift: 0 - bitsPerColor) bitAnd: mask.
		b := (i bitShift: 0) bitAnd: mask.
		f := 1.0 - ((r + g + b) / 3.0 / mask).
		c := targetColor notNil
			ifTrue: [ (keepSubPix and: [ destDepth > 8 ])
					ifTrue: [ self
							r: (1.0 - (r / mask)) * targetColor red
							g: (1.0 - (g / mask)) * targetColor green
							b: (1.0 - (b / mask)) * targetColor blue
							alpha: f * targetColor alpha	"alpha will be ignored below, in #pixelValueForDepth: if destDepth ~= 32" ]
					ifFalse: [ destDepth = 32
							ifTrue: [ targetColor * f alpha: f * targetColor alpha ]
							ifFalse: [ targetColor alphaMixed: f * 1.5 with: self white ] ] ]
			ifFalse: [ self
					r: r
					g: g
					b: b
					range: mask ].	"This is currently used only to keep some SubPixelAA on destDepth = 8, using a single pass of rule 25"
		v := destDepth = 32
			ifTrue: [ c pixelValueForDepth: destDepth ]
			ifFalse: [ f < 0.1
					ifTrue: [ 0 ]
					ifFalse: [ c pixelValueForDepth: destDepth ] ].
		map at: i + 1 put: v ].
	^ map
]

Color class >> computeRGBColormapFor: destDepth bitsPerColor: bitsPerColor
[
	"Compute a colorMap for translating from 16-bit or 32-bit RGB color to the given depth, using the given number of of bits per color component."

	| mask map c |
	(#(3 4 5) includes: bitsPerColor)
		ifFalse: [ self error: 'BitBlt only supports 3, 4, or 5 bits per color component' ].
	mask := (1 bitShift: bitsPerColor) - 1.
	map := Bitmap new: (1 bitShift: 3 * bitsPerColor).
	0 to: map size - 1 do: [ :i | c := self
			r: ((i bitShift: 0 - (2 * bitsPerColor)) bitAnd: mask)
			g: ((i bitShift: 0 - bitsPerColor) bitAnd: mask)
			b: ((i bitShift: 0) bitAnd: mask)
			range: mask.
		map at: i + 1 put: (c pixelValueForDepth: destDepth) ].
	map at: 1 put: (self transparent pixelWordForDepth: destDepth).	"zero always transparent"
	^ map
]

Color class >> cyan
[
	^ ColorRegistry at: #cyan
]

Color class >> darkGray
[
	^ ColorRegistry at: #darkGray
]

Color class >> defaultColors
[
	^ {#black.
	0.
	0.
	0.
	#veryVeryDarkGray.
	0.125.
	0.125.
	0.125.
	#veryDarkGray.
	0.25.
	0.25.
	0.25.
	#darkGray.
	0.375.
	0.375.
	0.375.
	#gray.
	0.5.
	0.5.
	0.5.
	#lightGray.
	0.625.
	0.625.
	0.625.
	#veryLightGray.
	0.75.
	0.75.
	0.75.
	#veryVeryLightGray.
	0.875.
	0.875.
	0.875.
	#white.
	1.0.
	1.0.
	1.0}
]

Color class >> defaultColors2
[
	^ {#red.
	1.0.
	0.
	0.
	#yellow.
	1.0.
	1.0.
	0.
	#green.
	0.
	1.0.
	0.
	#cyan.
	0.
	1.0.
	1.0.
	#blue.
	0.
	0.
	1.0.
	#magenta.
	1.0.
	0.
	1.0.
	#brown.
	0.6.
	0.2.
	0.
	#orange.
	1.0.
	0.6.
	0.
	#lightRed.
	1.0.
	0.8.
	0.8}
]

Color class >> defaultColors3
[
	^ {#lightYellow.
	1.0.
	1.0.
	0.8.
	#lightGreen.
	0.8.
	1.0.
	0.6.
	#lightCyan.
	0.4.
	1.0.
	1.0.
	#lightBlue.
	0.8.
	1.0.
	1.0.
	#lightMagenta.
	1.0.
	0.8.
	1.0.
	#lightBrown.
	1.0.
	0.6.
	0.2.
	#lightOrange.
	1.0.
	0.8.
	0.4.
	#pink.
	1.0.
	0.752899.
	0.796118.
	#purple.
	0.4.
	0.0.
	0.6.
	#tan.
	0.8.
	0.8.
	0.5.
	#veryPaleRed.
	1.0.
	0.948.
	0.948.
	#paleYellow.
	1.0.
	1.0.
	0.85.
	#paleTan.
	0.921.
	0.878.
	0.78}
]

Color class >> defaultColors4
[
	^ {#paleRed.
	1.0.
	0.901.
	0.901.
	#palePeach.
	1.0.
	0.929.
	0.835.
	#paleOrange.
	0.991.
	0.929.
	0.843.
	#paleMagenta.
	1.0.
	0.901.
	1.0.
	#paleGreen.
	0.874.
	1.0.
	0.835.
	#paleBuff.
	0.995.
	0.979.
	0.921.
	#paleBlue.
	0.87.
	0.976.
	0.995}
]

Color class >> fromArray: colorDef
[
	colorDef size = 3
		ifTrue: [ ^ self r: (colorDef at: 1) g: (colorDef at: 2) b: (colorDef at: 3) ].
	colorDef size = 0
		ifTrue: [ ^ self transparent ].
	colorDef size = 4
		ifTrue: [ ^ (self r: (colorDef at: 1) g: (colorDef at: 2) b: (colorDef at: 3)) alpha: (colorDef at: 4) ].
	self error: 'Undefined color definition'
]

Color class >> fromHexString: aColorHex
[
	| green red blue |
	red := (Integer readFrom: (aColorHex first: 2) base: 16) / 255.
	green := (Integer readFrom: (aColorHex copyFrom: 3 to: 4) base: 16) / 255.
	blue := (Integer readFrom: (aColorHex last: 2) base: 16) / 255.
	^ self r: red g: green b: blue
]

Color class >> fromRgbTriplet: list
[
	^ self r: list first g: list second b: list last
]

Color class >> fromString: aString
[
	"for HTML color spec: #FFCCAA or white/black"

	"Color fromString: '#FFCCAA'.
	 Color fromString: 'orange'"

	| aColorHex |
	aString isEmptyOrNil
		ifTrue: [ ^ self white ].
	aColorHex := aString first = $#
		ifTrue: [ aString allButFirst ]
		ifFalse: [ aString ].	"Try to match aColorHex with known named colors, case insensitive."
	^ self registeredColorNames
		detect: [ :each | each sameAs: aColorHex ]
		ifFound: [ :namedColor | self named: namedColor ]
		ifNone: [ (aColorHex size = 6 and: [ aColorHex allSatisfy: [ :character | '0123456789ABCDEFabcdef' includes: character ] ])
				ifTrue: [ self fromHexString: aColorHex ]
				ifFalse: [ self white ] ]
]

Color class >> gray
[
	^ ColorRegistry at: #gray
]

Color class >> gray: brightness
[
	"Return a gray shade with the given brightness in the range [0.0..1.0]."

	^ self r: brightness g: brightness b: brightness
]

Color class >> green
[
	^ ColorRegistry at: #green
]

Color class >> h: hue s: saturation v: brightness
[
	"Create a color with the given hue, saturation, and brightness. Hue is given as the angle in degrees of the color on the color circle where red is zero degrees. Saturation and brightness are numbers in [0.0..1.0] where larger values are more saturated or brighter colors. For example, (Color h: 0 s: 1 v: 1) is pure red."

	"Note: By convention, brightness is abbreviated 'v' to to avoid confusion with blue."

	^ self
		h: hue
		s: saturation
		v: brightness
		alpha: 1.0
]

Color class >> h: hue s: saturation v: brightness alpha: alpha
[
	^ self basicNew
		intializeHue: hue
			saturation: saturation
			brightness: brightness
			alpha: alpha;
		yourself
]

Color class >> hex: aFloat
[
	"Return an hexadecimal two-digits string between 00 and FF
	for a float between 0.0 and 1.0"

	| str |
	str := (aFloat * 255) asInteger printStringHex asLowercase.
	str size = 1
		ifTrue: [ ^ '0' , str ]
		ifFalse: [ ^ str ]
]

Color class >> indexedColors
[
	^ IndexedColors
]

Color class >> initialize
[
	"self initialize
	
	Details: Externally, the red, green, and blue components of color
	are floats in the range [0.0..1.0]. Internally, they are represented
	as integers in the range [0..ComponentMask] packing into a
	small integer to save space and to allow fast hashing and
	equality testing.

	For a general description of color representations for computer
	graphics, including the relationship between the RGB and HSV
	color models used here, see Chapter 17 of Foley and van Dam,
	Fundamentals of Interactive Computer Graphics, Addison-Wesley,
	1982."

	ComponentMask := 1023.
	HalfComponentMask := 512.	"used to round up in integer calculations"
	ComponentMax := 1023.0.	"a Float used to normalize components"
	RedShift := 20.
	GreenShift := 10.
	BlueShift := 0.
	RandomStream := Random new.
	self initializeIndexedColors.
	self initializeColorRegistry.
	self initializeGrayToIndexMap
]

Color class >> initializeColorRegistry
[
	| values |
	ColorRegistry := IdentityDictionary new.
	values := self defaultColors , self defaultColors2 , self defaultColors3 , self defaultColors4.
	1 to: values size by: #(#name #r #g #b) size do: [ :index | | colorName red green blue color |
		colorName := values at: index.
		red := values at: index + 1.
		green := values at: index + 2.
		blue := values at: index + 3.
		color := self r: red g: green b: blue.
		self registerColor: color named: colorName ].
	self registerColor: (self
				r: 0
				g: 0
				b: 0
				alpha: 0.0) named: #transparent
]

Color class >> initializeGrayToIndexMap
[
	"Build an array of gray values available in the 8-bit colormap. This array is indexed by a gray level between black (1) and white (256) and returns the pixel value for the corresponding gray level."

	"Note: This method must be called after initializeIndexedColors, since it uses IndexedColors."

	"Color initializeGrayToIndexMap"

	"record the level and index of each gray in the 8-bit color table"

	| grayLevels grayIndices c distToClosest dist indexOfClosest |
	grayLevels := OrderedCollection new.
	grayIndices := OrderedCollection new.	"Note: skip the first entry, which is reserved for transparent"
	2 to: IndexedColors size do: [ :i | c := IndexedColors at: i.
		c saturation = 0.0
			ifTrue: [ "c is a gray"
				grayLevels add: c privateBlue >> 2.	"top 8 bits; R, G, and B are the same"
				grayIndices add: i - 1 ] ].	"pixel values are zero-based"
	grayLevels := grayLevels asArray.
	grayIndices := grayIndices asArray.	"for each gray level in [0..255], select the closest match"
	GrayToIndexMap := ByteArray new: 256.
	0 to: 255 do: [ :level | distToClosest := 10000.	"greater than distance to any real gray"
		1 to: grayLevels size do: [ :i | dist := (level - (grayLevels at: i)) abs.
			dist < distToClosest
				ifTrue: [ distToClosest := dist.
					indexOfClosest := grayIndices at: i ] ].
		GrayToIndexMap at: level + 1 put: indexOfClosest ]
]

Color class >> initializeIndexedColors
[
	"Build an array of colors corresponding to the fixed colormap used
	 for display depths of 1, 2, 4, or 8 bits."

	"Color initializeIndexedColors"

	| a index grayVal |
	a := Array new: 256.	"1-bit colors (monochrome)"
	a at: 1 put: (self r: 1.0 g: 1.0 b: 1.0).	"white or transparent"
	a at: 2 put: (self r: 0.0 g: 0.0 b: 0.0).	"black"	"additional colors for 2-bit color"
	a at: 3 put: (self r: 1.0 g: 1.0 b: 1.0).	"opaque white"
	a at: 4 put: (self r: 0.5 g: 0.5 b: 0.5).	"1/2 gray"	"additional colors for 4-bit color"
	a at: 5 put: (self r: 1.0 g: 0.0 b: 0.0).	"red"
	a at: 6 put: (self r: 0.0 g: 1.0 b: 0.0).	"green"
	a at: 7 put: (self r: 0.0 g: 0.0 b: 1.0).	"blue"
	a at: 8 put: (self r: 0.0 g: 1.0 b: 1.0).	"cyan"
	a at: 9 put: (self r: 1.0 g: 1.0 b: 0.0).	"yellow"
	a at: 10 put: (self r: 1.0 g: 0.0 b: 1.0).	"magenta"
	a at: 11 put: (self r: 0.125 g: 0.125 b: 0.125).	"1/8 gray"
	a at: 12 put: (self r: 0.25 g: 0.25 b: 0.25).	"2/8 gray"
	a at: 13 put: (self r: 0.375 g: 0.375 b: 0.375).	"3/8 gray"
	a at: 14 put: (self r: 0.625 g: 0.625 b: 0.625).	"5/8 gray"
	a at: 15 put: (self r: 0.75 g: 0.75 b: 0.75).	"6/8 gray"
	a at: 16 put: (self r: 0.875 g: 0.875 b: 0.875).	"7/8 gray"	"additional colors for 8-bit color"	"24 more shades of gray (1/32 increments but not repeating 1/8 increments)"
	index := 17.
	1 to: 31 do: [ :v | v \\ 4 = 0
			ifFalse: [ grayVal := v / 32.0.
				a at: index put: (Color r: grayVal g: grayVal b: grayVal).
				index := index + 1 ] ].	"The remainder of color table defines a color cube with six steps	 for each primary color. Note that the corners of this cube repeat	 previous colors, but this simplifies the mapping between RGB colors	 and color map indices. This color cube spans indices 40 through 255	 (indices 41-256 in this 1-based array)."
	0 to: 5 do: [ :r | 0 to: 5 do: [ :g | 0 to: 5 do: [ :b | index := 41 + (36 * r + (6 * b) + g).
				index > 256
					ifTrue: [ self error: 'index out of range in color table compuation' ].
				a at: index put: (self
							r: r
							g: g
							b: b
							range: 5) ] ] ].
	IndexedColors := a
]

Color class >> lightBlue
[
	^ ColorRegistry at: #lightBlue
]

Color class >> lightBrown
[
	^ ColorRegistry at: #lightBrown
]

Color class >> lightCyan
[
	^ ColorRegistry at: #lightCyan
]

Color class >> lightGray
[
	^ ColorRegistry at: #lightGray
]

Color class >> lightGreen
[
	^ ColorRegistry at: #lightGreen
]

Color class >> lightMagenta
[
	^ ColorRegistry at: #lightMagenta
]

Color class >> lightOrange
[
	^ ColorRegistry at: #lightOrange
]

Color class >> lightRed
[
	^ ColorRegistry at: #lightRed
]

Color class >> lightYellow
[
	^ ColorRegistry at: #lightYellow
]

Color class >> magenta
[
	^ ColorRegistry at: #magenta
]

Color class >> maskingMap: depth
[
	"Return a color map that maps all colors except transparent to words of all ones. Used to create a mask for a Form whose transparent pixel value is zero. Cache the most recently used map."

	| sizeNeeded |
	depth <= 8
		ifTrue: [ sizeNeeded := 1 bitShift: depth ]
		ifFalse: [ sizeNeeded := 4096 ].
	(MaskingMap == nil or: [ MaskingMap size ~= sizeNeeded ])
		ifTrue: [ MaskingMap := Bitmap new: sizeNeeded withAll: 4294967295.
			MaskingMap at: 1 put: 0	"transparent" ].
	^ MaskingMap
]

Color class >> named: aColorName
[
	^ ColorRegistry at: aColorName asSymbol ifAbsent: nil
]

Color class >> new
[
	^ self r: 0.0 g: 0.0 b: 0.0
]

Color class >> orange
[
	^ ColorRegistry at: #orange
]

Color class >> paleBlue
[
	^ ColorRegistry at: #paleBlue
]

Color class >> paleBuff
[
	^ ColorRegistry at: #paleBuff
]

Color class >> paleGreen
[
	^ ColorRegistry at: #paleGreen
]

Color class >> paleMagenta
[
	^ ColorRegistry at: #paleMagenta
]

Color class >> paleOrange
[
	^ ColorRegistry at: #paleOrange
]

Color class >> palePeach
[
	^ ColorRegistry at: #palePeach
]

Color class >> paleRed
[
	^ ColorRegistry at: #paleRed
]

Color class >> paleTan
[
	^ ColorRegistry at: #paleTan
]

Color class >> paleYellow
[
	^ ColorRegistry at: #paleYellow
]

Color class >> pink
[
	^ ColorRegistry at: #pink
]

Color class >> pixelScreenForDepth: depth
[
	"Return a 50% stipple containing alternating pixels of all-zeros and all-ones to be used as a mask at the given depth."

	| mask bits |
	mask := (1 bitShift: depth) - 1.
	bits := 2 * depth.
	[ bits >= 32 ]
		whileFalse: [ mask := mask bitOr: (mask bitShift: bits).	"double the length of mask"
			bits := bits + bits ].
	^ Bitmap with: mask with: mask bitInvert32
]

Color class >> purple
[
	^ ColorRegistry at: #purple
]

Color class >> r: r g: g b: b
[
	"Return a color with the given r, g, and b components in the range [0.0..1.0]."

	^ self
		r: r
		g: g
		b: b
		alpha: 1.0
]

Color class >> r: r g: g b: b alpha: alpha
[
	"Return a color with the given r, g, and b components in the range [0.0..1.0]."

	^ self basicNew
		initializeRed: r
			green: g
			blue: b
			alpha: alpha;
		yourself
]

Color class >> r: r g: g b: b range: range
[
	"Return a color with the given r, g, and b components specified as integers in the range [0..r]. This avoids the floating point arithmetic in the red:green:blue: message and is thus a bit faster for certain applications (such as computing a sequence of colors for a palette)."

	^ self basicNew
		initializeRed: r
			green: g
			blue: b
			range: range;
		yourself
]

Color class >> random
[
	"Return a random color that isn't too dark or under-saturated."

	^ self
		h: 360.0 * RandomStream next
		s: 0.3 + (RandomStream next * 0.7)
		v: 0.4 + (RandomStream next * 0.6)
		alpha: 1.0
]

Color class >> red
[
	^ ColorRegistry at: #red
]

Color class >> registerColor: aColor named: aName
[
	ColorRegistry at: aName put: aColor
]

Color class >> registeredColorNames
[
	^ ColorRegistry keys collect: #asString
]

Color class >> registeredNameOf: aColor
[
	| colorName |
	colorName := #unnamed.
	ColorRegistry keysAndValuesDo: [ :key :value | value = aColor
				ifTrue: [ colorName := key ] ].
	^ colorName
]

Color class >> shutDown
[
	"Color shutDown"

	CachedColormaps := nil.	"Maps to translate between color depths"
	MaskingMap := nil	"Maps all colors except transparent to black for creating a mask"
]

Color class >> tan
[
	^ ColorRegistry at: #tan
]

Color class >> transparent
[
	^ ColorRegistry at: #transparent
]

Color class >> unregisterColorNamed: aName
[
	ColorRegistry removeKey: aName ifAbsent: nil
]

Color class >> veryDarkGray
[
	^ ColorRegistry at: #veryDarkGray
]

Color class >> veryLightGray
[
	^ ColorRegistry at: #veryLightGray
]

Color class >> veryPaleRed
[
	^ ColorRegistry at: #veryPaleRed
]

Color class >> veryVeryDarkGray
[
	^ ColorRegistry at: #veryVeryDarkGray
]

Color class >> veryVeryLightGray
[
	^ ColorRegistry at: #veryVeryLightGray
]

Color class >> wheel: thisMany
[
	"Return a collection of thisMany colors evenly spaced around the color wheel."

	"Color showColors: (Color wheel: 12)"

	^ self wheel: thisMany saturation: 0.9 brightness: 0.7
]

Color class >> wheel: thisMany saturation: s brightness: v
[
	"Return a collection of thisMany colors evenly spaced around the color wheel, all of the given saturation and brightness."

	"Color showColors: (Color wheel: 12 saturation: 0.4 brightness: 1.0)"

	"Color showColors: (Color wheel: 12 saturation: 0.8 brightness: 0.5)"

	^ (self h: 0.0 s: s v: v) wheel: thisMany
]

Color class >> white
[
	^ ColorRegistry at: #white
]

Color class >> yellow
[
	^ ColorRegistry at: #yellow
]

