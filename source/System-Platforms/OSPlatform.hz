OSPlatform
	classVariables: #(#Current );
	package: #'System-Platforms'.

OSPlatform >> platformFamily
[
	"Returns a symbol specific to the platform family (MacOSX, Windows, Unix, RiscOS).
	This may need to be extended if there are new platforms added or significant differences within a platform family arise (as was the case between MacOS 9 and X)."

	self subclassResponsibility
]

OSPlatform >> shutDown: quitting
[
	"Pharo is shutting down. If this platform requires specific shutdown code, this is a great place to put it."

	
]

OSPlatform >> startUp: resuming
[
	"Pharo is starting up. If this platform requires specific intialization, this is a great place to put it."

	
]

OSPlatform >> virtualKey: virtualKeyCode
[
	^ self class virtualKey: virtualKeyCode
]

OSPlatform class >> current
[
	"Answer the current platform"

	^ Current
]

OSPlatform class >> determineActivePlatformStartingAt: parentClass
[
	"Determine the current platform starting at parentClass.
	This is a potentially recursive process as we want to determine the most specific (in terms of subclasses) platform available."

	"OSPlatform determineActivePlatformStartingAt: OSPlatform"

	| platformClass |
	parentClass subclasses isEmpty
		ifTrue: [ ^ parentClass ].	"Look for the matching platform class"
	platformClass := parentClass allSubclasses detect: [ :any | any isActivePlatform ] ifNone: [ nil ].	"Check if there is a more specific subclass"
	^ self determineActivePlatformStartingAt: platformClass
]

OSPlatform class >> initialize
[
	"Initialize the receiver"

	"OSPlatform initialize"

	Smalltalk removeFromStartUpList: self.
	Smalltalk addToStartUpList: self after: Delay.
	Smalltalk removeFromShutDownList: self.
	Smalltalk addToShutDownList: self after: DisplayScreen.
	self startUp: true
]

OSPlatform class >> isActivePlatform
[
	"Answer whether the receiver is the active platform"

	^ false
]

OSPlatform class >> isMacOS
[
	^ self platformName = 'Mac OS'
]

OSPlatform class >> isMacOSX
[
	^ self isMacOS and: [ '10*' match: self version ]
]

OSPlatform class >> isUnix
[
	^ self platformName = 'unix'
]

OSPlatform class >> isWin32
[
	^ self platformName = 'Win32'
]

OSPlatform class >> isX11
[
	^ self isUnix and: [ self windowSystemName = 'X11' ]
]

OSPlatform class >> platformName
[
	"Return the name of the platform we're running on"

	^ Smalltalk vm getSystemAttribute: 1001
]

OSPlatform class >> platformSubtype
[
	"Return the subType of the platform we're running on"

	^ self subtype
]

OSPlatform class >> shutDown: quitting
[
	"The system is going down"

	Current ifNotNil: [ Current shutDown: quitting ]
]

OSPlatform class >> startUp: resuming
[
	"Determine the current platform.
	Use the most specific (in terms of subclasses) platform available."

	| platformClass |
	"Look for the matching platform class"
	platformClass := self determineActivePlatformStartingAt: self.
	platformClass ifNil: [ ^ self ].
	Current := platformClass new.
	Current startUp: resuming
]

OSPlatform class >> subtype
[
	"Return the subType of the platform we're running on"

	"Smalltalk platformSubtype"

	^ Smalltalk vm getSystemAttribute: 1003
]

OSPlatform class >> version
[
	"Return the version number string of the platform we're running on"

	"OSPlatform osVersion"

	^ (Smalltalk vm getSystemAttribute: 1002) asString
]

OSPlatform class >> virtualKey: virtualKeyCode
[
	"Subclass responsibility to override if necessary"

	^ nil
]

OSPlatform class >> windowSystemName
[
	"Return the name of the window system currently being used for display."

	"OSPlatform windowSystemName"

	^ Smalltalk vm getSystemAttribute: 1005
]

