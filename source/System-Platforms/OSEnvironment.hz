OSEnvironment
	instanceVariables: #(#platform );
	package: #'System-Platforms'.

OSEnvironment >> asDictionary
[
	| dictionary |
	dictionary := Dictionary new.
	self keysAndValuesDo: [ :key :value | dictionary at: key put: value ].
	^ dictionary
]

OSEnvironment >> associations
[
	"Answer a Collection containing the receiver's associations."

	^ Array streamContents: [ :stream | self associationsDo: [ :each | stream nextPut: each ] ]
]

OSEnvironment >> associationsDo: aBlock
[
	^ self keysAndValuesDo: [ :key :value | aBlock value: key -> value ]
]

OSEnvironment >> at: aKey
[
	^ self at: aKey ifAbsent: [ KeyNotFound signalFor: aKey ]
]

OSEnvironment >> at: aKey ifAbsent: aBlock
[
	^ (self getEnv: aKey) ifNil: aBlock
]

OSEnvironment >> at: key ifAbsentPut: aBlock
[
	"Return the value at the given key. 
	If key is not included in the receiver store the result 
	of evaluating aBlock as new value."

	^ self at: key ifAbsent: [ self at: key put: aBlock value ]
]

OSEnvironment >> at: aKey ifPresent: aBlock
[
	^ aBlock value: (self at: aKey ifAbsent: [ ^ nil ])
]

OSEnvironment >> at: key ifPresent: oneArgBlock ifAbsent: absentBlock
[
	"Lookup the given key in the receiver. If it is present, answer the value of evaluating the oneArgBlock with the value associated with the key, otherwise answer the value of absentBlock."

	self at: key ifPresent: [ :v | ^ oneArgBlock value: v ].
	^ absentBlock value
]

OSEnvironment >> at: aKey put: aValue
[
	^ self setEnv: aKey value: aValue
]

OSEnvironment >> do: aBlock
[
	^ self valuesDo: aBlock
]

OSEnvironment >> getEnv: string
[
	"This method calls the Standard C Library getenv() function"

	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: #errorCode>
	^ self nbCall: #(#String #getenv #(#String #string)) module: NativeBoost CLibrary
]

OSEnvironment >> includes: anObject
[
	self do: [ :each | anObject = each
				ifTrue: [ ^ true ] ].
	^ false
]

OSEnvironment >> includesKey: aKey
[
	^ self at: aKey ifPresent: [ :value | true ] ifAbsent: [ false ]
]

OSEnvironment >> initializeWith: anOSPlatform
[
	super initialize.
	platform := anOSPlatform
]

OSEnvironment >> keys
[
	"Answer an Array containing the receiver's keys."

	^ Array streamContents: [ :s | self keysDo: [ :key | s nextPut: key ] ]
]

OSEnvironment >> keysAndValuesDo: aBlock
[
	self subclassResponsibility
]

OSEnvironment >> keysAndValuesDo: aBlock withAssociationString: associationString
[
	| equalsIndex |
	equalsIndex := associationString indexOf: $=.
	aBlock value: (associationString first: equalsIndex - 1) value: (associationString allButFirst: equalsIndex)
]

OSEnvironment >> keysDo: aBlock
[
	^ self keysAndValuesDo: [ :key :value | aBlock value: key ]
]

OSEnvironment >> platform
[
	^ platform
]

OSEnvironment >> removeKey: key
[
	^ self unsetEnv: key
]

OSEnvironment >> unsetEnv: string
[
	"This method calls the Standard C Library getenv() function"

	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: #errorCode>
	^ self nbCall: #(#int #unsetenv #(#String #string)) module: NativeBoost CLibrary
]

OSEnvironment >> values
[
	"Answer a Collection containing the receiver's values."

	^ Array streamContents: [ :stream | self valuesDo: [ :value | stream nextPut: value ] ]
]

OSEnvironment >> valuesDo: aBlock
[
	^ self keysAndValuesDo: [ :key :value | aBlock value: value ]
]

OSEnvironment class >> default
[
	^ self new
]

OSEnvironment class >> environmentFor: aPlatform
[
	| environmentClass |
	environmentClass := self allSubclasses detect: [ :each | each isDefaultFor: aPlatform ] ifNone: [ nil ].
	^ (environmentClass notNil and: [ environmentClass isAvailable ])
		ifTrue: [ environmentClass platform: aPlatform ]
		ifFalse: [ PlatformIndependentEnvironment platform: aPlatform ]
]

OSEnvironment class >> isAvailable
[
	^ NativeBoost isAvailable
]

OSEnvironment class >> isDefaultFor: aPlatform
[
	^ false
]

OSEnvironment class >> platform: anOSPlatform
[
	^ self basicNew initializeWith: anOSPlatform
]

