Matrix
	superclass: #Collection;
	instanceVariables: #(#nrows #ncols #contents );
	package: #'Collections-Unordered'.

Matrix >> , aMatrix
[
	"Answer a new matrix having the same number of rows as the receiver and aMatrix,
	 its columns being the columns of the receiver followed by the columns of aMatrix."

	| newCont newCols anArray oldCols a b c |
	[ nrows = aMatrix rowCount ] assert.
	newCont := Array new: self size + aMatrix size.
	anArray := aMatrix privateContents.
	oldCols := aMatrix columnCount.
	newCols := ncols + oldCols.
	a := b := c := 1.
	1 to: nrows do: [ :r | newCont
			replaceFrom: a
			to: a + ncols - 1
			with: contents
			startingAt: b.
		newCont
			replaceFrom: a + ncols
			to: a + newCols - 1
			with: anArray
			startingAt: c.
		a := a + newCols.
		b := b + ncols.
		c := c + oldCols ].
	^ self class rows: nrows columns: newCols contents: newCont
]

Matrix >> ,, aMatrix
[
	"Answer a new matrix having the same number of columns as the receiver and aMatrix,
	 its rows being the rows of the receiver followed by the rows of aMatrix."

	[ ncols = aMatrix columnCount ] assert.
	^ self class rows: nrows + aMatrix rowCount columns: ncols contents: contents , aMatrix privateContents
]

Matrix >> = aMatrix
[
	^ aMatrix class == self class
		and: [ aMatrix rowCount = nrows and: [ aMatrix columnCount = ncols and: [ aMatrix privateContents = contents ] ] ]
]

Matrix >> add: newObject
[
	self shouldNotImplement
]

Matrix >> anyOne
[
	^ contents anyOne
]

Matrix >> asArray
[
	^ contents shallowCopy
]

Matrix >> asBag
[
	^ contents asBag
]

Matrix >> asByteArray
[
	^ contents asByteArray
]

Matrix >> asCharacterSet
[
	^ contents asCharacterSet
]

Matrix >> asFloatArray
[
	^ contents asFloatArray
]

Matrix >> asIdentitySet
[
	^ contents asIdentitySet
]

Matrix >> asIntegerArray
[
	^ contents asIntegerArray
]

Matrix >> asOrderedCollection
[
	^ contents asOrderedCollection
]

Matrix >> asSet
[
	^ contents asSet
]

Matrix >> asSortedCollection
[
	^ contents asSortedCollection
]

Matrix >> asSortedCollection: aBlock
[
	^ contents asSortedCollection: aBlock
]

Matrix >> asWordArray
[
	^ contents asWordArray
]

Matrix >> at: row at: column
[
	^ contents at: (self indexForRow: row andColumn: column)
]

Matrix >> at: r at: c ifInvalid: v
[
	"If r,c is a valid index for this matrix, answer the corresponding element.
	 Otherwise, answer v."

	(r between: 1 and: nrows)
		ifFalse: [ ^ v ].
	(c between: 1 and: ncols)
		ifFalse: [ ^ v ].
	^ contents at: (r - 1) * ncols + c
]

Matrix >> at: row at: column incrementBy: value
[
	"Array2D>>at:at:add: was the origin of this method, but in Smalltalk add:
	 generally suggests adding an element to a collection, not doing a sum.
	 This method, and SequenceableCollection>>at:incrementBy: that supports
	 it, have been renamed to reveal their intention more clearly."

	^ contents at: (self indexForRow: row andColumn: column) incrementBy: value
]

Matrix >> at: row at: column put: value
[
	^ contents at: (self indexForRow: row andColumn: column) put: value
]

Matrix >> atAllPut: value
[
	contents atAllPut: value
]

Matrix >> atColumn: column
[
	| p |
	p := (self indexForRow: 1 andColumn: column) - ncols.
	^ (1 to: nrows) collect: [ :row | contents at: (p := p + ncols) ]
]

Matrix >> atColumn: column put: aCollection
[
	| p |
	aCollection size = nrows
		ifFalse: [ self error: 'wrong column size' ].
	p := (self indexForRow: 1 andColumn: column) - ncols.
	aCollection do: [ :each | contents at: (p := p + ncols) put: each ].
	^ aCollection
]

Matrix >> atRandom
[
	^ contents atRandom
]

Matrix >> atRandom: aGenerator
[
	^ contents atRandom: aGenerator
]

Matrix >> atRow: row
[
	(row between: 1 and: nrows)
		ifFalse: [ self error: '1st subscript out of range' ].
	^ contents copyFrom: (row - 1) * ncols + 1 to: row * ncols
]

Matrix >> atRow: row put: aCollection
[
	| p |
	aCollection size = ncols
		ifFalse: [ self error: 'wrong row size' ].
	p := (self indexForRow: row andColumn: 1) - 1.
	aCollection do: [ :each | contents at: (p := p + 1) put: each ].
	^ aCollection
]

Matrix >> atRows: rs columns: cs
[
	"Answer a Matrix obtained by slicing the receiver.
	 rs and cs should be sequenceable collections of positive integers."

	^ self class rows: rs size columns: cs size tabulate: [ :r :c | self at: (rs at: r) at: (cs at: c) ]
]

Matrix >> atRows: r1 to: r2 columns: c1 to: c2
[
	"Answer a submatrix [r1..r2][c1..c2] of the receiver."

	| rd cd |
	rd := r1 - 1.
	cd := c1 - 1.
	^ self class rows: r2 - rd columns: c2 - cd tabulate: [ :r :c | self at: r + rd at: c + cd ]
]

Matrix >> atRows: r1 to: r2 columns: c1 to: c2 ifInvalid: element
[
	"Answer a submatrix [r1..r2][c1..c2] of the receiver.
	 Portions of the result outside the bounds of the original matrix
	 are filled in with element."

	| rd cd |
	rd := r1 - 1.
	cd := c1 - 1.
	^ self class rows: r2 - rd columns: c2 - cd tabulate: [ :r :c | self at: r + rd at: c + cd ifInvalid: element ]
]

Matrix >> atRows: r1 to: r2 columns: c1 to: c2 put: aMatrix
[
	"Set the [r1..r2][c1..c2] submatrix of the receiver
	 from the [1..r2-r1+1][1..c2-c1+1] submatrix of aMatrix.
	 As long as aMatrix responds to at:at: and accepts arguments in the range shown,
	 we don't care if it is bigger or even if it is a Matrix at all."

	| rd cd |
	rd := r1 - 1.
	cd := c1 - 1.
	r1 to: r2 do: [ :r | c1 to: c2 do: [ :c | self at: r at: c put: (aMatrix at: r - rd at: c - cd) ] ].
	^ aMatrix
]

Matrix >> collect: aBlock
[
	"Answer a new matrix with transformed elements; transformations should be independent."

	^ self class rows: nrows columns: ncols contents: (contents collect: aBlock)
]

Matrix >> columnCount
[
	^ ncols
]

Matrix >> diagonal
[
	"Answer (1 to: (nrows min: ncols)) collect: [:i | self at: i at: i]"

	| i |
	i := ncols negated.
	^ (1 to: (nrows min: ncols)) collect: [ :j | contents at: (i := i + ncols + 1) ]
]

Matrix >> difference: aCollection
[
	"Union is in because the result is always a Set.
	 Difference and intersection are out because the result is like the receiver,
	 and with irregular seleection that cannot be."

	self shouldNotImplement
]

Matrix >> do: aBlock
[
	"Pass elements to aBlock one at a time in row-major order."

	contents do: aBlock
]

Matrix >> hash
[
	"I'm really not sure what would be a good hash function here.
	 The essential thing is that it must be compatible with #=, and
	 this satisfies that requirement."

	^ contents hash
]

Matrix >> identityIncludes: anObject
[
	^ contents identityIncludes: anObject
]

Matrix >> identityIndexOf: anElement
[
	^ self identityIndexOf: anElement ifAbsent: [ 0 @ 0 ]
]

Matrix >> identityIndexOf: anElement ifAbsent: anExceptionBlock
[
	^ self rowAndColumnForIndex: (contents identityIndexOf: anElement ifAbsent: [ ^ anExceptionBlock value ])
]

Matrix >> includes: anObject
[
	^ contents includes: anObject
]

Matrix >> includesAll: aCollection
[
	^ contents includesAll: aCollection
]

Matrix >> includesAny: aCollection
[
	^ contents includesAny: aCollection
]

Matrix >> indexForRow: row andColumn: column
[
	(row between: 1 and: nrows)
		ifFalse: [ self error: '1st subscript out of range' ].
	(column between: 1 and: ncols)
		ifFalse: [ self error: '2nd subscript out of range' ].
	^ (row - 1) * ncols + column
]

Matrix >> indexOf: anElement
[
	"If there are integers r, c such that (self at: r at: c) = anElement,
	 answer some such r@c, otherwise answer 0@0.  This kind of perverse
	 result is provided by analogy with SequenceableCollection>>indexOf:.
	 The order in which the receiver are searched is UNSPECIFIED except
	 that it is the same as the order used by #indexOf:ifAbsent: and #readStream."

	^ self indexOf: anElement ifAbsent: [ 0 @ 0 ]
]

Matrix >> indexOf: anElement ifAbsent: anExceptionBlock
[
	"If there are integers r, c such that (self at: r at: c) = anElement,
	 answer some such r@c, otherwise answer the result of anExceptionBlock."

	^ self rowAndColumnForIndex: (contents indexOf: anElement ifAbsent: [ ^ anExceptionBlock value ])
]

Matrix >> indicesCollect: aBlock
[
	| r i |
	r := Array new: nrows * ncols.
	i := 0.
	1 to: nrows do: [ :row | 1 to: ncols do: [ :column | r at: (i := i + 1) put: (aBlock value: row value: column) ] ].
	^ self class rows: nrows columns: ncols contents: r
]

Matrix >> indicesDo: aBlock
[
	1 to: nrows do: [ :row | 1 to: ncols do: [ :column | aBlock value: row value: column ] ]
]

Matrix >> indicesInject: start into: aBlock
[
	| current |
	current := start.
	1 to: nrows do: [ :row | 1 to: ncols do: [ :column | current := aBlock value: current value: row value: column ] ].
	^ current
]

Matrix >> intersection: aCollection
[
	"Union is in because the result is always a Set.
	 Difference and intersection are out because the result is like the receiver,
	 and with irregular seleection that cannot be."

	self shouldNotImplement
]

Matrix >> isSequenceable
[
	"LIE so that arithmetic on matrices will work.
	 What matters for arithmetic is not that there should be random indexing
	 but that the structure should be stable and independent of the values of
	 the elements.  #isSequenceable is simply the wrong question to ask."

	^ true
]

Matrix >> occurrencesOf: anObject
[
	^ contents occurrencesOf: anObject
]

Matrix >> postCopy
[
	super postCopy.
	contents := contents copy
]

Matrix >> privateContents
[
	"Only used in #, #,, and #= so far.
	 It used to be called #contents, but that clashes with Collection>>contents."

	^ contents
]

Matrix >> readStream
[
	"Answer a ReadStream that returns all the elements of the receiver
	 in some UNSPECIFIED order."

	^ contents readStream
]

Matrix >> reject: aBlock
[
	self shouldNotImplement
]

Matrix >> remove: anObject ifAbsent: anExceptionBlock
[
	self shouldNotImplement
]

Matrix >> removeAll
[
	self shouldNotImplement
]

Matrix >> replaceAll: oldObject with: newObject
[
	contents replaceAll: oldObject with: newObject
]

Matrix >> rowAndColumnForIndex: index
[
	| t |
	t := index - 1.
	^ (t // ncols + 1) @ (t \\ ncols + 1)
]

Matrix >> rowCount
[
	^ nrows
]

Matrix >> rows: rows columns: columns contents: anArray
[
	[ rows isInteger and: [ rows >= 0 ] ] assert.
	[ columns isInteger and: [ columns >= 0 ] ] assert.
	[ rows * columns = anArray size ] assert.
	nrows := rows.
	ncols := columns.
	contents := anArray.
	^ self
]

Matrix >> select: aBlock
[
	self shouldNotImplement
]

Matrix >> shuffled
[
	^ self class rows: nrows columns: ncols contents: contents shuffled
]

Matrix >> shuffledBy: aRandom
[
	^ self class rows: nrows columns: ncols contents: (contents copy shuffleBy: aRandom)
]

Matrix >> size
[
	^ contents size
]

Matrix >> storeOn: aStream
[
	aStream
		nextPut: $(;
		nextPutAll: self class name;
		nextPutAll: ' rows: ';
		store: nrows;
		nextPutAll: ' columns: ';
		store: ncols;
		nextPutAll: ' contents: ';
		store: contents;
		nextPut: $)
]

Matrix >> swap: r1 at: c1 with: r2 at: c2
[
	contents swap: (self indexForRow: r1 andColumn: c1) with: (self indexForRow: r2 andColumn: c2)
]

Matrix >> swapColumn: anIndex withColumn: anotherIndex
[
	| a b |
	a := self indexForRow: 1 andColumn: anIndex.
	b := self indexForRow: 1 andColumn: anotherIndex.
	nrows timesRepeat: [ contents swap: a with: b.
			a := a + ncols.
			b := b + ncols ]
]

Matrix >> swapRow: anIndex withRow: anotherIndex
[
	| a b |
	a := self indexForRow: anIndex andColumn: 1.
	b := self indexForRow: anotherIndex andColumn: 1.
	ncols timesRepeat: [ contents swap: a with: b.
			a := a + 1.
			b := b + 1 ]
]

Matrix >> transposed
[
	[ nrows = ncols ] assert.
	^ self indicesCollect: [ :row :column | self at: column at: row ]
]

Matrix >> with: aCollection collect: aBlock
[
	"aCollection must support #at:at: and be at least as large as the receiver."

	^ self withIndicesCollect: [ :each :row :column | aBlock value: each value: (aCollection at: row at: column) ]
]

Matrix >> with: aCollection do: aBlock
[
	"aCollection must support #at:at: and be at least as large as the receiver."

	self withIndicesDo: [ :each :row :column | aBlock value: each value: (aCollection at: row at: column) ]
]

Matrix >> with: aCollection inject: startingValue into: aBlock
[
	"aCollection must support #at:at: and be at least as large as the receiver."

	^ self
		withIndicesInject: startingValue
		into: [ :value :each :row :column | aBlock value: value value: each value: (aCollection at: row at: column) ]
]

Matrix >> withIndicesCollect: aBlock
[
	| i r |
	i := 0.
	r := contents shallowCopy.
	1 to: nrows do: [ :row | 1 to: ncols do: [ :column | i := i + 1.
			r at: i put: (aBlock value: (r at: i) value: row value: column) ] ].
	^ self class rows: nrows columns: ncols contents: r
]

Matrix >> withIndicesDo: aBlock
[
	| i |
	i := 0.
	1 to: nrows do: [ :row | 1 to: ncols do: [ :column | aBlock value: (contents at: (i := i + 1)) value: row value: column ] ]
]

Matrix >> withIndicesInject: start into: aBlock
[
	| i current |
	i := 0.
	current := start.
	1 to: nrows do: [ :row | 1 to: ncols do: [ :column | current := aBlock
				value: current
				value: (contents at: (i := i + 1))
				value: row
				value: column ] ].
	^ current
]

Matrix class >> column: aCollection
[
	"Should this be called #fromColumn:?"

	^ self rows: aCollection size columns: 1 contents: aCollection asArray shallowCopy
]

Matrix class >> diagonal: aCollection
[
	| r i |
	r := self zeros: aCollection size.
	i := 0.
	aCollection do: [ :each | i := i + 1.
			r at: i at: i put: each ].
	^ r
]

Matrix class >> identity: n
[
	| r |
	r := self zeros: n.
	1 to: n do: [ :i | r at: i at: i put: 1 ].
	^ r
]

Matrix class >> new: dim
[
	"Answer a dim*dim matrix.  Is this an abuse of #new:?  The argument is NOT a size."

	^ self rows: dim columns: dim
]

Matrix class >> new: dim element: element
[
	"Answer a dim*dim matrix with all elements set to element.
	 Is this an abuse of #new:?  The argument is NOT a size."

	^ self rows: dim columns: dim element: element
]

Matrix class >> new: dim tabulate: aBlock
[
	"Answer a dim*dim matrix where it at: i at: j is aBlock value: i value: j."

	^ self rows: dim columns: dim tabulate: aBlock
]

Matrix class >> ones: n
[
	^ self new: n element: 1
]

Matrix class >> row: aCollection
[
	"Should this be called #fromRow:?"

	^ self rows: 1 columns: aCollection size contents: aCollection asArray shallowCopy
]

Matrix class >> rows: rows columns: columns
[
	^ self rows: rows columns: columns contents: (Array new: rows * columns)
]

Matrix class >> rows: rows columns: columns contents: contents
[
	^ self new rows: rows columns: columns contents: contents
]

Matrix class >> rows: rows columns: columns element: element
[
	^ self rows: rows columns: columns contents: ((Array new: rows * columns)
				atAllPut: element;
				yourself)
]

Matrix class >> rows: rows columns: columns tabulate: aBlock
[
	"Answer a new Matrix of the given dimensions where
	 result at: i at: j     is   aBlock value: i value: j"

	| a i |
	a := Array new: rows * columns.
	i := 0.
	1 to: rows do: [ :row | 1 to: columns do: [ :column | a at: (i := i + 1) put: (aBlock value: row value: column) ] ].
	^ self rows: rows columns: columns contents: a
]

Matrix class >> zeros: n
[
	^ self new: n element: 0
]

y: n
[identity: n
	| r |
	r := self zeros: n.
	1 to: n do: [ :i | r at: i at: i put: 1 ].
	^ r
]

Matrix class >> new: dim
[new: dim
	"Answer a dim*dim matrix.  Is this an abuse of #new:?  The argument is NOT a size."

	^ self rows: dim columns: dim
]

Matrix class >> new: dim element: element
[new: dim element: element
	"Answer a dim*dim matrix with all elements set to element.
	 Is this an abuse of #new:?  The argument is NOT a size."

	^ self rows: dim columns: dim element: element
]

Matrix class >> new: dim tabulate: aBlock
[new: dim tabulate: aBlock
	"Answer a dim*dim matrix where it at: i at: j is aBlock value: i value: j."

	^ self rows: dim columns: dim tabulate: aBlock
]

Matrix class >> ones: n
[ones: n
	^ self new: n element: 1
]

Matrix class >> row: aCollection
[row: aCollection
	"Should this be called #fromRow:?"

	^ self rows: 1 columns: aCollection size contents: aCollection asArray shallowCopy
]

Matrix class >> rows: rows columns: columns
[rows: rows columns: columns
	^ self rows: rows columns: columns contents: (Array new: rows * columns)
]

Matrix class >> rows: rows columns: columns contents: contents
[rows: rows columns: columns contents: contents
	^ self new rows: rows columns: columns contents: contents
]

Matrix class >> rows: rows columns: columns element: element
[rows: rows columns: columns element: element
	^ self rows: rows columns: columns contents: ((Array new: rows * columns)
				atAllPut: element;
				yourself)
]

Matrix class >> rows: rows columns: columns tabulate: aBlock
[rows: rows columns: columns tabulate: aBlock
	"Answer a new Matrix of the given dimensions where
	 result at: i at: j     is   aBlock value: i value: j"

	| a i |
	a := Array new: rows * columns.
	i := 0.
	1 to: rows do: [ :row | 1 to: columns do: [ :column | a at: (i := i + 1) put: (aBlock value: row value: column) ] ].
	^ self rows: rows columns: columns contents: a
]

Matrix class >> zeros: n
[zeros: n
	^ self new: n element: 0
]

