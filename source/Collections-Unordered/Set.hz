Set
	superclass: #HashedCollection;
	package: #'Collections-Unordered'.

Set >> = aSet
[
	self == aSet
		ifTrue: [ ^ true ].	"stop recursion"
	(aSet isKindOf: Set)
		ifFalse: [ ^ false ].
	self size = aSet size
		ifFalse: [ ^ false ].
	self do: [ :each | (aSet includes: each)
				ifFalse: [ ^ false ] ].
	^ true
]

Set >> add: newObject
[
	"Include newObject as one of the receiver's elements, but only if
	not already present. Answer newObject."

	| index |
	index := self scanFor: newObject.
	(array at: index) ifNil: [ self atNewIndex: index put: newObject asSetElement ].
	^ newObject
]

Set >> add: newObject withOccurrences: anInteger
[
	^ self add: newObject
]

Set >> asSet
[
	^ self
]

Set >> atRandom: aGenerator
[
	"Answer a random element of the receiver. Uses aGenerator which
    should be kept by the user in a variable and used every time. Use
    this instead of #atRandom for better uniformity of random numbers because 
	only you use the generator. Causes an error if self has no elements."

	| rand |
	self emptyCheck.
	rand := aGenerator nextInt: self size.
	self doWithIndex: [ :each :ind | ind == rand
				ifTrue: [ ^ each ] ].
	^ self errorEmptyCollection
]

Set >> collect: aBlock
[
	"Evaluate aBlock with each of the receiver's elements as the argument.  
	Collect the resulting values into a collection like the receiver. Answer  
	the new collection."

	| newSet |
	newSet := Set new: self size.
	array do: [ :each | each ifNotNil: [ newSet add: (aBlock value: each enclosedSetElement) ] ].
	^ newSet
]

Set >> copyWithout: oldElement
[
	"Answer a copy of the receiver that does not contain any
	elements equal to oldElement."

	^ self copy
		remove: oldElement ifAbsent: [  ];
		yourself
]

Set >> difference: aCollection
[
	"Answer the set theoretic difference of two collections. Optimized version for Sets where no intermediate Set is necessary"

	"#(a b c d e f) difference:  #(a b z k)
	=> #(#f #d #e #c)
	
	#(a b z k) difference: #(a b c d e f) 
	=> #(#k #z) 
	"

	| set |
	set := self copy.
	aCollection do: [ :each | set remove: each ifAbsent: [  ] ].
	^ set
]

Set >> do: aBlock
[
	tally = 0
		ifTrue: [ ^ self ].
	1 to: array size do: [ :index | | each |
		(each := array at: index) ifNotNil: [ aBlock value: each enclosedSetElement ] ]
]

Set >> fixCollisionsFrom: start
[
	"The element at start has been removed and replaced by nil.
	This method moves forward from there, relocating any entries
	that had been placed below due to collisions with this one"

	| element index |
	index := start.
	[ (element := array at: (index := index \\ array size + 1)) == nil ]
		whileFalse: [ | newIndex |
			(newIndex := self scanFor: element enclosedSetElement) = index
				ifFalse: [ array swap: index with: newIndex ] ]
]

Set >> flatCollect: aBlock
[
	^ self flatCollectAsSet: aBlock
]

Set >> grow
[
	"Grow the elements array and reinsert the old elements"

	| oldElements |
	oldElements := array.
	array := Array new: (HashTableSizes atLeast: oldElements size * 2).
	tally := 0.
	oldElements do: [ :each | each == nil
				ifFalse: [ self noCheckAdd: each enclosedSetElement ] ]
]

Set >> includes: anObject
[
	^ (array at: (self findElementOrNil: anObject)) ~~ nil
]

Set >> intersection: aCollection
[
	"Answer the set theoretic intersection of two collections.
	Optimized version for Sets where no intermediate Set is necessary"

	| outputSet |
	outputSet := self class new.
	aCollection
		do: [ :each | ((self includes: each) and: [ (outputSet includes: each) not ])
				ifTrue: [ outputSet add: each ] ].
	^ outputSet
]

Set >> isHealthy
[
	"Test that object hashes match their positions stored in set's array,
	answer true if everything ok, false otherwise
	
	Set allSubInstances select: [:badSet |
		badSet isHealthy not ]
	"

	array
		withIndexDo: [ :element :index | element ifNotNil: [ (self scanFor: element) == index
						ifFalse: [ ^ false ] ] ].
	^ true
]

Set >> like: anObject
[
	"Answer an object in the receiver that is equal to anObject,
	nil if no such object is found. Relies heavily on hash properties.
	Note, use #like:ifAbsent: if you need to match against nil as element"

	^ self like: anObject ifAbsent: [ nil ]
]

Set >> like: anObject ifAbsent: aBlock
[
	"Answer an object in the receiver that is equal to anObject,
	or evaluate the block if not found. Relies heavily on hash properties"

	| element |
	element := array at: (self scanFor: anObject).
	^ element ifNil: [ aBlock value ] ifNotNil: [ element enclosedSetElement ]
]

Set >> noCheckAdd: anObject
[
	"This method should be deprecated"

	array at: (self findElementOrNil: anObject) put: anObject asSetElement.
	tally := tally + 1
]

Set >> noCheckNoGrowFillFrom: anArray
[
	"Add the elements of anArray except nils to me assuming that I don't contain any of them, they are unique and I have more free space than they require."

	1 to: anArray size do: [ :index | (anArray at: index) ifNotNil: [ :object | array at: (self scanForEmptySlotFor: object enclosedSetElement) put: object ] ]
]

Set >> occurrencesOf: anObject
[
	^ (self includes: anObject)
		ifTrue: [ 1 ]
		ifFalse: [ 0 ]
]

Set >> postCopy
[
	super postCopy.
	array := array copy
]

Set >> rehash
[
	| newSelf |
	newSelf := self species new: self size.
	self do: [ :each | newSelf noCheckAdd: each ].
	array := newSelf array
]

Set >> remove: oldObject ifAbsent: aBlock
[
	| index |
	index := self findElementOrNil: oldObject.
	(array at: index) == nil
		ifTrue: [ ^ aBlock value ].
	array at: index put: nil.
	tally := tally - 1.
	self fixCollisionsFrom: index.
	^ oldObject
]

Set >> scanFor: anObject
[
	"Scan the key array for the first slot containing either a nil (indicating an empty slot) or an element that matches anObject. Answer the index of that slot or raise an error if no slot is found. This method will be overridden in various subclasses that have different interpretations for matching elements."

	| index start |
	index := start := anObject hash \\ array size + 1.
	[ | element |
	((element := array at: index) == nil or: [ element enclosedSetElement = anObject ])
		ifTrue: [ ^ index ].
	(index := index \\ array size + 1) = start ]
		whileFalse.
	self errorNoFreeSpace
]

Set >> withArray: anArray
[
	"private -- for use only in copy"

	"I want to get a conflict"

	array := anArray
]

Set class >> new
[
	^ self basicNew
		initialize: 5;
		yourself
]

Set class >> newFrom: aCollection
[
	"Answer an instance of me containing the same elements as aCollection."

	| newCollection |
	newCollection := self new: aCollection size.
	newCollection addAll: aCollection.
	^ newCollection	"	Set newFrom: {1. 2. 3}	{1. 2. 3} as: Set"
]

Set class >> sizeFor: nElements
[
	"Large enough size to hold nElements with some slop (see fullCheck)"

	^ HashTableSizes atLeast: nElements * 4 // 3
]

