Class
	name: #PluggableDictionary;
	superclass: #ClassDictionary;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#hashBlock #equalBlock );
	classVariables: #();
	package: #'Collections-Unordered'.

Class PluggableDictionary >> copyEmpty
[
^ super copyEmpty	hashBlock: hashBlock;	equalBlock: equalBlock
]

Class PluggableDictionary >> equalBlock
[
	"Return the block used for comparing the elements in the receiver."
^ equalBlock
]

Class PluggableDictionary >> equalBlock: aBlock
[
	"Set a new equality block. The block must accept two arguments and return true if the argumets are considered to be equal, false otherwise"
equalBlock := aBlock
]

Class PluggableDictionary >> hashBlock
[
	"Return the block used for hashing the elements in the receiver."
^ hashBlock
]

Class PluggableDictionary >> hashBlock: aBlock
[
	"Set a new hash block. The block must accept one argument and must return the hash value of the given argument."
hashBlock := aBlock
]

Class PluggableDictionary >> scanFor: anObject
[
	"Scan the key array for the first slot containing either a nil(indicating 	  an empty slot) or an element that matches anObject. Answer the index 	  	of that slot or zero if no slot is found. This  method will beoverridden   	in various subclasses that have different interpretations for matching  	elements."
| element start finish |start := (hashBlock ifNil: [ anObject hash ] ifNotNil: [ hashBlock value: anObject ]) \\ array size + 1.finish := array size.	"Search from (hash mod size) to the end."start to: finish do: [ :index | 	((element := array at: index) == nil		or: [ equalBlock ifNil: [ element key = anObject ] ifNotNil: [ equalBlock value: element key value: anObject ] ])		ifTrue: [ ^ index ] ].	"Search from 1 to where we started."1 to: start - 1 do: [ :index | 	((element := array at: index) == nil		or: [ equalBlock ifNil: [ element key = anObject ] ifNotNil: [ equalBlock value: element key value: anObject ] ])		ifTrue: [ ^ index ] ].^ 0	"No match AND no empty slot"
]

Class PluggableDictionary >> scanForEmptySlotFor: aKey
[
	"Scan the key array for the first slot containing an empty slot (indicated by a nil). Answer the index of that slot. This method will be overridden in various subclasses that have different interpretations for matching elements."
| index start |index := start := (hashBlock ifNil: [ aKey hash ] ifNotNil: [ hashBlock value: aKey ]) \\ array size + 1.[ (array at: index) ifNil: [ ^ index ].(index := index \\ array size + 1) = start ] whileFalse.self errorNoFreeSpace
]

Metaclass
	name: #PluggableDictionary;
	instanceVariables: #().

Metaclass PluggableDictionary >> integerDictionary
[
^ self new hashBlock: [ :integer | integer hash \\ 1064164 * 1009 ]
]

