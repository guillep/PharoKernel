Dictionary
	superclass: #HashedCollection;
	package: #'Collections-Unordered'.

Dictionary >> = aDictionary
= aDictionary
	"Two dictionaries are equal if
	 (a) they are the same 'kind' of thing.
	 (b) they have the same set of keys.
	 (c) for each (common) key, they have the same value"

	self == aDictionary
		ifTrue: [ ^ true ].
	aDictionary isDictionary
		ifFalse: [ ^ false ].
	self size = aDictionary size
		ifFalse: [ ^ false ].
	self
		associationsDo: [ :assoc | (aDictionary at: assoc key ifAbsent: [ ^ false ]) = assoc value
				ifFalse: [ ^ false ] ].
	^ true

Dictionary >> add: anAssociation
add: anAssociation
	| index element |
	index := self findElementOrNil: anAssociation key.
	element := array at: index.
	element == nil
		ifTrue: [ self atNewIndex: index put: anAssociation ]
		ifFalse: [ element value: anAssociation value ].
	^ anAssociation

Dictionary >> addAll: aKeyedCollection
addAll: aKeyedCollection
	aKeyedCollection == self
		ifFalse: [ aKeyedCollection keysAndValuesDo: [ :key :value | self at: key put: value ] ].
	^ aKeyedCollection

Dictionary >> associationAt: key
associationAt: key
	^ self associationAt: key ifAbsent: [ self errorKeyNotFound: key ]

Dictionary >> associationAt: key ifAbsent: aBlock
associationAt: key ifAbsent: aBlock
	"Answer the association with the given key.
	If key is not found, return the result of evaluating aBlock."

	| index assoc |
	index := self findElementOrNil: key.
	assoc := array at: index.
	nil == assoc
		ifTrue: [ ^ aBlock value ].
	^ assoc

Dictionary >> associations
associations
	"Answer a Collection containing the receiver's associations."

	"Suggested by l. Uzonyi"

	^ Array new: self size streamContents: [ :stream | self associationsDo: [ :each | stream nextPut: each ] ]

Dictionary >> associationsDo: aBlock
associationsDo: aBlock
	"Evaluate aBlock for each of the receiver's elements (key/value 
	associations)."

	tally = 0
		ifTrue: [ ^ self ].
	array do: [ :each | each ifNotNil: [ aBlock value: each ] ]

Dictionary >> associationsSelect: aBlock
associationsSelect: aBlock
	"Evaluate aBlock with each of my associations as the argument. Collect
	into a new dictionary, only those associations for which aBlock evaluates
	to true."

	| newCollection |
	newCollection := self species new.
	self associationsDo: [ :each | (aBlock value: each)
				ifTrue: [ newCollection add: each ] ].
	^ newCollection

Dictionary >> at: key
at: key
	"Answer the value associated with the key."

	^ self at: key ifAbsent: [ self errorKeyNotFound: key ]

Dictionary >> at: key ifAbsent: aBlock
at: key ifAbsent: aBlock
	"Answer the value associated with the key or, if key isn't found,
	answer the result of evaluating aBlock."

	^ ((array at: (self findElementOrNil: key)) ifNil: [ aBlock ] ifNotNil: [ :assoc | assoc ]) value

Dictionary >> at: key ifAbsentPut: aBlock
at: key ifAbsentPut: aBlock
	"Return the value at the given key. 
	If key is not included in the receiver store the result 
	of evaluating aBlock as new value."

	^ self at: key ifAbsent: [ self at: key put: aBlock value ]

Dictionary >> at: key ifPresent: aBlock
at: key ifPresent: aBlock
	"Lookup the given key in the receiver. If it is present, answer the value of evaluating the given block with the value associated with the key. Otherwise, answer nil."

	^ (array at: (self findElementOrNil: key)) ifNotNil: [ :assoc | aBlock cull: assoc value ]

Dictionary >> at: key ifPresent: oneArgBlock ifAbsent: absentBlock
at: key ifPresent: oneArgBlock ifAbsent: absentBlock
	"Lookup the given key in the receiver. If it is present, answer the value of evaluating the oneArgBlock with the value associated with the key, otherwise answer the value of absentBlock."

	self at: key ifPresent: [ :v | ^ oneArgBlock value: v ].
	^ absentBlock value

Dictionary >> at: key put: anObject
at: key put: anObject
	"Set the value at key to be anObject.  If key is not found, create a
	new entry for key and set is value to anObject. Answer anObject."

	| index assoc |
	index := self findElementOrNil: key.
	assoc := array at: index.
	assoc ifNil: [ self atNewIndex: index put: (Association key: key value: anObject) ] ifNotNil: [ assoc value: anObject ].
	^ anObject

Dictionary >> bindingOf: varName
bindingOf: varName
	^ self associationAt: varName ifAbsent: [ nil ]

Dictionary >> bindingsDo: aBlock
bindingsDo: aBlock
	^ self associationsDo: aBlock

Dictionary >> collect: aBlock
collect: aBlock
	"Evaluate aBlock with each of my values as the argument.  Collect the
	resulting values into a collection that is like me. Answer with the new
	collection."

	| newCollection |
	newCollection := self species new.
	self associationsDo: [ :each | newCollection at: each key put: (aBlock value: each value) ].
	^ newCollection

Dictionary >> declare: key from: aDictionary
declare: key from: aDictionary
	"Add key to the receiver. If key already exists, do nothing. If aDictionary 
	includes key, then remove it from aDictionary and use its association as 
	the element of the receiver."

	(self includesKey: key)
		ifTrue: [ ^ self ].
	(aDictionary includesKey: key)
		ifTrue: [ self add: (aDictionary associationAt: key).
			aDictionary removeKey: key ]
		ifFalse: [ self add: key -> nil ]

Dictionary >> difference: aCollection
difference: aCollection
	"Answer the set theoretic difference of two collections. This is a specialized version for Dictionaries keeping the keys of the objects. At a slightly higher price of an additional Set to track duplicates."

	| other result duplicates |
	other := aCollection asSet.
	duplicates := Set new.
	result := self class new: self size.
	self
		keysAndValuesDo: [ :key :value | ((other includes: value) not and: [ (duplicates includes: value) not ])
				ifTrue: [ duplicates add: value.
					result at: key put: value ] ].
	^ result

Dictionary >> do: aBlock
do: aBlock
	^ self valuesDo: aBlock

Dictionary >> errorKeyNotFound: aKey
errorKeyNotFound: aKey
	KeyNotFound signalFor: aKey

Dictionary >> errorValueNotFound: value
errorValueNotFound: value
	ValueNotFound signalFor: value

Dictionary >> fillFrom: aCollection with: aBlock
fillFrom: aCollection with: aBlock
	"Evaluate aBlock with each of aCollections's elements as the argument.  
	Collect the resulting values into self. Answer self."

	aCollection keysAndValuesDo: [ :key :value | self at: key put: (aBlock value: value) ]

Dictionary >> fixCollisionsFrom: start
fixCollisionsFrom: start
	"The element at start has been removed and replaced by nil.
	This method moves forward from there, relocating any entries
	that had been placed below due to collisions with this one."

	| element index |
	index := start.
	[ (element := array at: (index := index \\ array size + 1)) == nil ]
		whileFalse: [ | newIndex |
			(newIndex := self findElementOrNil: element key) = index
				ifFalse: [ array swap: index with: newIndex ] ]

Dictionary >> hasBindingThatBeginsWith: aString
hasBindingThatBeginsWith: aString
	"Answer true if the receiver has a key that begins with aString, false otherwise"

	self keysDo: [ :each | (each beginsWith: aString)
				ifTrue: [ ^ true ] ].
	^ false

Dictionary >> includes: anObject
includes: anObject
	self do: [ :each | anObject = each
				ifTrue: [ ^ true ] ].
	^ false

Dictionary >> includesAssociation: anAssociation
includesAssociation: anAssociation
	^ (self associationAt: anAssociation key ifAbsent: [ ^ false ]) value = anAssociation value

Dictionary >> includesIdentity: anObject
includesIdentity: anObject
	"Answer whether anObject is one of the values of the receiver.  Contrast #includes: in which there is only an equality check, here there is an identity check"

	self do: [ :each | anObject == each
				ifTrue: [ ^ true ] ].
	^ false

Dictionary >> includesKey: key
includesKey: key
	"Answer whether the receiver has a key equal to the argument, key."

	^ (array at: (self scanFor: key)) ~~ nil	"We could use #notNil here, but ProtoObject doesn't understand it."

Dictionary >> isDictionary
isDictionary
	^ true

Dictionary >> isHealthy
isHealthy
	"Test that object hashes match their positions stored in set's array,
	answer true if everything ok, false otherwise
	
	Dictionary allInstances select: [:dict |
		dict isHealthy not ]
	Dictionary allSubInstances select: [:dict |
		dict isHealthy not ]
	"

	array withIndexDo: [ :elem :i | elem ifNotNil: [ (self scanFor: elem key) == i
						ifFalse: [ ^ false ] ] ].
	^ true

Dictionary >> keyAtIdentityValue: value
keyAtIdentityValue: value
	"Answer the key that is the external name for the argument, value. If 
	there is none, answer nil.
	Note: There can be multiple keys with the same value. Only one is returned."

	^ self keyAtIdentityValue: value ifAbsent: [ self errorValueNotFound: value ]

Dictionary >> keyAtIdentityValue: value ifAbsent: exceptionBlock
keyAtIdentityValue: value ifAbsent: exceptionBlock
	"Answer the key that is the external name for the argument, value. If 
	there is none, answer the result of evaluating exceptionBlock.
	Note: There can be multiple keys with the same value. Only one is returned."

	self associationsDo: [ :association | value == association value
				ifTrue: [ ^ association key ] ].
	^ exceptionBlock value

Dictionary >> keyAtValue: value
keyAtValue: value
	"Answer the key that is the external name for the argument, value. If 
	there is none, signal an error."

	^ self keyAtValue: value ifAbsent: [ self errorValueNotFound: value ]

Dictionary >> keyAtValue: value ifAbsent: exceptionBlock
keyAtValue: value ifAbsent: exceptionBlock
	"Answer the key that is the external name for the argument, value. If 
	there is none, answer the result of evaluating exceptionBlock.
	: Use =, not ==, so stings like 'this' can be found.  Note that MethodDictionary continues to use == so it will be fast."

	self associationsDo: [ :association | value = association value
				ifTrue: [ ^ association key ] ].
	^ exceptionBlock value

Dictionary >> keyForIdentity: anObject
keyForIdentity: anObject
	"If anObject is one of the values of the receive, return its key, else return nil.  Contrast #keyAtValue: in which there is only an equality check, here there is an identity check"

	self associationsDo: [ :assoc | assoc value == anObject
				ifTrue: [ ^ assoc key ] ].
	^ nil

Dictionary >> keys
keys
	"Answer an Array containing the receiver's keys."

	^ Array new: self size streamContents: [ :s | self keysDo: [ :key | s nextPut: key ] ]

Dictionary >> keysAndValuesDo: aBlock
keysAndValuesDo: aBlock
	^ self associationsDo: [ :assoc | aBlock value: assoc key value: assoc value ]

Dictionary >> keysAndValuesRemove: keyValueBlock
keysAndValuesRemove: keyValueBlock
	"Removes all entries for which keyValueBlock returns true."

	"When removing many items, you must not do it while iterating over the dictionary, since it may be changing.  This method takes care of tallying the removals in a first pass, and then performing all the deletions afterward.  Many places in the sytem could be simplified by using this method."

	| removals |
	removals := OrderedCollection new.
	self
		associationsDo: [ :assoc | (keyValueBlock value: assoc key value: assoc value)
				ifTrue: [ removals add: assoc key ] ].
	removals do: [ :aKey | self removeKey: aKey ]

Dictionary >> keysDo: aBlock
keysDo: aBlock
	"Evaluate aBlock for each of the receiver's keys."

	self associationsDo: [ :association | aBlock value: association key ]

Dictionary >> keysSortedSafely
keysSortedSafely
	"Answer an Array containing the receiver's keys."

	"Suggested by l. Uzonyi"

	| sortedKeys |
	sortedKeys := Array new: self size streamContents: [ :stream | self keysDo: [ :each | stream nextPut: each ] ].
	sortedKeys
		sort: [ :x :y | "Should really be use <obj, string, num> compareSafely..."
			((x isString and: [ y isString ]) or: [ x isNumber and: [ y isNumber ] ])
				ifTrue: [ x < y ]
				ifFalse: [ x class == y class
						ifTrue: [ x printString < y printString ]
						ifFalse: [ x class name < y class name ] ] ].
	^ sortedKeys

Dictionary >> noCheckAdd: anObject
noCheckAdd: anObject
	"Must be defined separately for Dictionary because (self findElementOrNil:) expects a key, not an association."

	array at: (self findElementOrNil: anObject key) put: anObject.
	tally := tally + 1

Dictionary >> noCheckNoGrowFillFrom: anArray
noCheckNoGrowFillFrom: anArray
	"Add the elements of anArray except nils to me assuming that I don't contain any of them, they are unique and I have more free space than they require."

	1 to: anArray size do: [ :index | (anArray at: index) ifNotNil: [ :association | array at: (self scanForEmptySlotFor: association key) put: association ] ]

Dictionary >> postCopy
postCopy
	"Must copy the associations, or later store will affect both the
original and the copy"

	array := array collect: [ :association | association ifNotNil: [ association copy ] ]

Dictionary >> printElementsOn: aStream
printElementsOn: aStream
	aStream nextPut: $(.
	self size > 100
		ifTrue: [ aStream nextPutAll: 'size '.
			self size printOn: aStream ]
		ifFalse: [ self keysSortedSafely
				do: [ :key | aStream
						print: key;
						nextPutAll: '->';
						print: (self at: key);
						space ] ].
	aStream nextPut: $)

Dictionary >> rehash
rehash
	"Smalltalk rehash."

	| newSelf |
	newSelf := self species new: self size.
	self associationsDo: [ :each | newSelf noCheckAdd: each ].
	array := newSelf array

Dictionary >> remove: anObject
remove: anObject
	self shouldNotImplement

Dictionary >> remove: anObject ifAbsent: exceptionBlock
remove: anObject ifAbsent: exceptionBlock
	self shouldNotImplement

Dictionary >> removeKey: key
removeKey: key
	"Remove key from the receiver.
	If key is not in the receiver, notify an error."

	^ self removeKey: key ifAbsent: [ self errorKeyNotFound: key ]

Dictionary >> removeKey: key ifAbsent: aBlock
removeKey: key ifAbsent: aBlock
	"Remove key (and its associated value) from the receiver. If key is not in 
	the receiver, answer the result of evaluating aBlock. Otherwise, answer 
	the value externally named by key."

	| index assoc |
	index := self findElementOrNil: key.
	assoc := array at: index.
	assoc == nil
		ifTrue: [ ^ aBlock value ].
	array at: index put: nil.
	tally := tally - 1.
	self fixCollisionsFrom: index.
	^ assoc value

Dictionary >> removeUnreferencedKeys
removeUnreferencedKeys
	"Undeclared removeUnreferencedKeys"

	^ self unreferencedKeys do: [ :key | self removeKey: key ]

Dictionary >> scanFor: anObject
scanFor: anObject
	"Scan the key array for the first slot containing either a nil (indicating an empty slot) or an element that matches anObject. Answer the index of that slot or zero if no slot is found. This method will be overridden in various subclasses that have different interpretations for matching elements."

	| element start finish |
	finish := array size.
	start := anObject hash \\ finish + 1.	"Search from (hash mod size) to the end."
	start to: finish do: [ :index | ((element := array at: index) == nil or: [ element key = anObject ])
			ifTrue: [ ^ index ] ].	"Search from 1 to where we started."
	1 to: start - 1 do: [ :index | ((element := array at: index) == nil or: [ element key = anObject ])
			ifTrue: [ ^ index ] ].
	^ 0	"No match AND no empty slot"

Dictionary >> select: aBlock
select: aBlock
	"Evaluate aBlock with each of my values as the argument. Collect into a new dictionary, only those associations for which aBlock evaluates to true."

	| newCollection |
	newCollection := self copyEmpty.
	self associationsDo: [ :each | (aBlock value: each value)
				ifTrue: [ newCollection add: each copy ] ].
	^ newCollection

Dictionary >> storeOn: aStream
storeOn: aStream
	| noneYet |
	aStream nextPutAll: '(('.
	aStream nextPutAll: self class name.
	aStream nextPutAll: ' new)'.
	noneYet := true.
	self
		associationsDo: [ :each | noneYet
				ifTrue: [ noneYet := false ]
				ifFalse: [ aStream nextPut: $; ].
			aStream nextPutAll: ' add: '.
			aStream store: each ].
	noneYet
		ifFalse: [ aStream nextPutAll: '; yourself' ].
	aStream nextPut: $)

Dictionary >> unreferencedKeys
unreferencedKeys
	"| uk | (Time millisecondsToRun: [uk := TextConstants unreferencedKeys]) -> uk"

	^ 'Scanning for references . . .'
		displayProgressFrom: 0
		to: Smalltalk globals classNames size * 2
		during: [ :bar | | currentClass n associations referencedAssociations |
			currentClass := nil.
			n := 0.
			associations := self associations asIdentitySet.
			referencedAssociations := IdentitySet new: associations size.
			self systemNavigation
				allMethodsSelect: [ :m | m methodClass ~~ currentClass
						ifTrue: [ currentClass := m methodClass.
							bar current: (n := n + 1) ].
					m
						literalsDo: [ :l | (l isVariableBinding and: [ associations includes: l ])
								ifTrue: [ referencedAssociations add: l ] ].
					false ].
			((associations reject: [ :assoc | referencedAssociations includes: assoc ]) collect: [ :assoc | assoc key ]) asSet ]

Dictionary >> valueAtNewKey: aKey put: anObject atIndex: index declareFrom: aDictionary
valueAtNewKey: aKey put: anObject atIndex: index declareFrom: aDictionary
	"Support for coordinating class variable and global declarations
	with variables that have been put in Undeclared so as to
	redirect all references to the undeclared variable."

	(aDictionary includesKey: aKey)
		ifTrue: [ self atNewIndex: index put: ((aDictionary associationAt: aKey) value: anObject).
			aDictionary removeKey: aKey ]
		ifFalse: [ self atNewIndex: index put: (Association key: aKey value: anObject) ]

Dictionary >> values
values
	"Answer a Collection containing the receiver's values."

	| out |
	out := (Array new: self size) writeStream.
	self valuesDo: [ :value | out nextPut: value ].
	^ out contents

Dictionary >> valuesDo: aBlock
valuesDo: aBlock
	"Evaluate aBlock for each of the receiver's values.  Implemented with == checks
	merely for the sake of maximum efficiency"

	tally = 0
		ifTrue: [ ^ self ].
	1 to: array size do: [ :eachIndex | | eachAssociation |
		eachAssociation := array at: eachIndex.
		nil == eachAssociation
			ifFalse: [ aBlock value: eachAssociation value ] ]

Dictionary class >> newFrom: aDict
newFrom: aDict
	"Answer an instance of me containing the same associations as aDict.
	 Error if any key appears twice."

	| newDictionary |
	newDictionary := self new: aDict size.
	aDict
		associationsDo: [ :x | (newDictionary includesKey: x key)
				ifTrue: [ self error: 'Duplicate key: ' , x key printString ]
				ifFalse: [ newDictionary add: x ] ].
	^ newDictionary	"	NewDictionary newFrom: {1->#a. 2->#b. 3->#c}	{1->#a. 2->#b. 3->#c} as: NewDictionary	NewDictionary newFrom: {1->#a. 2->#b. 1->#c}	{1->#a. 2->#b. 1->#c} as: NewDictionary"

Dictionary class >> newFromPairs: anArray
newFromPairs: anArray
	"Answer an instance of me associating (anArray at:i) to (anArray at: i+i)
	 for each odd i.  anArray must have an even number of entries."

	| newDictionary |
	newDictionary := self new: anArray size / 2.
	1 to: anArray size - 1 by: 2 do: [ :i | newDictionary at: (anArray at: i) put: (anArray at: i + 1) ].
	^ newDictionary	"  Dictionary newFromPairs: {'Red' . Color red . 'Blue' . Color blue . 'Green' . Color green}. "

