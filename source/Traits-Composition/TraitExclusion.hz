TraitExclusion
	superclass: #TraitTransformation;
	instanceVariables: #(#exclusions );
	package: #'Traits-Composition'.

TraitExclusion >> addExclusionOf: aSymbol
[
	self exclusions: (self exclusions copyWith: aSymbol)
]

TraitExclusion >> allSelectors
[
	| selectors |
	selectors := self subject allSelectors.
	self exclusions do: [ :each | selectors remove: each ifAbsent: [  ] ].
	^ selectors
]

TraitExclusion >> collectMethodsFor: aSelector into: methodDescription
[
	(self exclusions includes: aSelector)
		ifFalse: [ self subject collectMethodsFor: aSelector into: methodDescription ]
]

TraitExclusion >> copyTraitExpression
[
	^ super copyTraitExpression
		exclusions: self exclusions deepCopy;
		yourself
]

TraitExclusion >> exclusions
[
	^ exclusions
]

TraitExclusion >> exclusions: aCollection
[
	exclusions := aCollection
]

TraitExclusion >> isEmpty
[
	^ self exclusions isEmpty
]

TraitExclusion >> postCopy
[
	super postCopy.
	exclusions := exclusions copy
]

TraitExclusion >> printOn: aStream
[
	super printOn: aStream.
	aStream
		space;
		nextPut: $-;
		space;
		nextPut: ${.
	self exclusions do: [ :each | aStream print: each ] separatedBy: [ aStream nextPutAll: '. ' ].
	aStream nextPut: $}
]

TraitExclusion class >> with: aTraitComposition exclusions: anArrayOfSelectors
[
	^ self new
		subject: aTraitComposition;
		exclusions: anArrayOfSelectors;
		yourself
]

