Class
	name: #TraitAlias;
	superclass: #ClassTraitTransformation;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#aliases );
	classVariables: #();
	package: #'Traits-Composition'.

Class TraitAlias >> - anArrayOfSelectors
[
^ TraitExclusion with: self exclusions: anArrayOfSelectors
]

Class TraitAlias >> aliasNamed: aSymbol ifAbsent: aBlock
[
^ self aliases detect: [ :association | association key = aSymbol ] ifNone: aBlock
]

Class TraitAlias >> aliases
[
	"Collection of associations where key is the	alias and value the original selector."
^ aliases
]

Class TraitAlias >> aliases: anArrayOfAssociations
[
| newNames |newNames := (anArrayOfAssociations collect: [ :each | each key ]) asIdentitySet.newNames size < anArrayOfAssociations size	ifTrue: [ TraitCompositionException signal: 'Cannot use the same alias name twice' ].anArrayOfAssociations	do: [ :each | 		(newNames includes: each value)			ifTrue: [ TraitCompositionException signal: 'Cannot define an alias for an alias' ] ].aliases := anArrayOfAssociations
]

Class TraitAlias >> aliasesForSelector: aSymbol
[
| selectors |selectors := self aliases	select: [ :association | association value = aSymbol ]	thenCollect: [ :association | association key ].^ (super aliasesForSelector: aSymbol)	addAll: selectors;	yourself
]

Class TraitAlias >> allAliasesDict
[
| dict |dict := super allAliasesDict.self aliases do: [ :assoc | dict at: assoc key put: assoc value ].^ dict
]

Class TraitAlias >> allSelectors
[
^ self subject allSelectors	addAll: (self aliases collect: [ :each | each key ]) asSet;	yourself
]

Class TraitAlias >> collectMethodsFor: aSelector into: methodDescription
[
| originalSelector association |self subject collectMethodsFor: aSelector into: methodDescription.association := self aliasNamed: aSelector ifAbsent: [ nil ].association notNil	ifTrue: [ 		originalSelector := association value.		self subject collectMethodsFor: originalSelector into: methodDescription ]
]

Class TraitAlias >> copyTraitExpression
[
^ super copyTraitExpression	aliases: self aliases deepCopy;	yourself
]

Class TraitAlias >> isEmpty
[
^ self aliases isEmpty
]

Class TraitAlias >> postCopy
[
super postCopy.aliases := self aliases copy
]

Class TraitAlias >> printOn: aStream
[
super printOn: aStream.aStream	space;	nextPut: $@;	space;	nextPut: ${.self aliases do: [ :each | aStream print: each ] separatedBy: [ aStream nextPutAll: '. ' ].aStream nextPut: $}
]

Class TraitAlias >> removeAlias: aSymbol
[
self aliases: (self aliases reject: [ :each | each key = aSymbol ])
]

Metaclass
	name: #TraitAlias;
	instanceVariables: #().

Metaclass TraitAlias >> assertValidAliasDefinition: anArrayOfAssociations
[
	"Throw an exceptions if the alias definition is not valid.	It is expected to be a collection of associations and	the number of arguments of the alias selector has to	be the same as the original selector."
((anArrayOfAssociations isKindOf: Collection)	and: [ anArrayOfAssociations allSatisfy: [ :each | each isKindOf: Association ] ])	ifFalse: [ TraitCompositionException signal: 'Invalid alias definition: Not a collection of associations.' ].(anArrayOfAssociations	allSatisfy: [ :association | association key numArgs = association value numArgs and: [ (association key numArgs = -1) not ] ])	ifFalse: [ 		TraitCompositionException			signal: 'Invalid alias definition: Alias and original selector have to have the same number of arguments.' ]
]

Metaclass TraitAlias >> with: aTraitComposition aliases: anArrayOfAssociations
[
self assertValidAliasDefinition: anArrayOfAssociations.^ self new	subject: aTraitComposition;	aliases: anArrayOfAssociations;	yourself
]

