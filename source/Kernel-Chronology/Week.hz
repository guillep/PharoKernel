Week
	superclass: #Timespan;
	classVariables: #(#StartDay );
	sharedPools: #(#ChronologyConstants );
	package: #'Kernel-Chronology'.

Week >> asWeek
[
	^ self
]

Week >> index
[
	^ (self asMonth dayOfWeek + self dayOfMonth - 2) // 7 + 1
]

Week >> printOn: aStream
[
	aStream nextPutAll: 'a Week starting: '.
	self start printOn: aStream
]

Week class >> dayNames
[
	^ DayNames
]

Week class >> indexOfDay: aSymbol
[
	^ DayNames indexOf: aSymbol
]

Week class >> nameOfDay: anIndex
[
	^ DayNames at: anIndex
]

Week class >> startDay
[
	^ StartDay ifNil: [ StartDay := DayNames first ]
]

Week class >> startDay: aSymbol
[
	(DayNames includes: aSymbol)
		ifTrue: [ StartDay := aSymbol ]
		ifFalse: [ self error: aSymbol , ' is not a recognised day name' ]
]

Week class >> starting: aDateAndTime duration: aDuration
[
	"Override - the duration is always one week.
	 Week will start from the Week class>>startDay"

	| midnight delta adjusted |
	midnight := aDateAndTime asDateAndTime midnight.
	delta := (midnight dayOfWeek + 7 - (DayNames indexOf: self startDay) rem: 7) abs.
	adjusted := midnight - (Duration days: delta seconds: 0).
	^ super starting: adjusted duration: (Duration weeks: 1)
]

