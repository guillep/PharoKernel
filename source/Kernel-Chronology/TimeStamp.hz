TimeStamp
	superclass: #DateAndTime;
	package: #'Kernel-Chronology'.

TimeStamp >> asTimeStamp
[
	"Answer the receiver as an instance of TimeStamp."

	^ self
]

TimeStamp >> date
[
	"Answer the date of the receiver."

	^ self asDate
]

TimeStamp >> dateAndTime
[
	"Answer a two element Array containing the receiver's date and time."

	^ Array with: self date with: self time
]

TimeStamp >> minusDays: anInteger
[
	"Answer a TimeStamp which is anInteger days before the receiver."

	^ self - anInteger days
]

TimeStamp >> minusSeconds: anInteger
[
	"Answer a TimeStamp which is anInteger number of seconds before the receiver."

	^ self - anInteger seconds
]

TimeStamp >> plusDays: anInteger
[
	"Answer a TimeStamp which is anInteger days after the receiver."

	^ self + anInteger days
]

TimeStamp >> plusSeconds: anInteger
[
	"Answer a TimeStamp which is anInteger number of seconds after the receiver."

	^ self + anInteger seconds
]

TimeStamp >> printOn: aStream
[
	"Print receiver's date and time on aStream."

	aStream
		nextPutAll: self date printString;
		space;
		nextPutAll: self time printString
]

TimeStamp >> species
[
	^ DateAndTime
]

TimeStamp >> storeOn: aStream
[
	aStream
		nextPut: $';
		print: self;
		nextPut: $';
		nextPutAll: ' asTimeStamp'
]

TimeStamp >> time
[
	"Answer the time of the receiver."

	^ self asTime
]

TimeStamp class >> current
[
	| ts ticks |
	ts := super now.
	ticks := ts ticks.
	ticks at: 3 put: 0.
	ts ticks: ticks offset: ts offset.
	^ ts
]

TimeStamp class >> fromMethodTimeStamp: aString
[
	| stream |
	(stream := aString readStream)
		skipSeparators;
		skipTo: Character space.
	^ self readFrom: stream
]

TimeStamp class >> now
[
	"Answer the current date and time as a TimeStamp."

	^ self current
]

TimeStamp class >> readFrom: stream
[
	| date time |
	stream skipSeparators.
	date := Date readFrom: stream.
	stream skipSeparators.
	time := Time readFrom: stream.
	^ self date: date time: time
]

