Stopwatch
	instanceVariables: #(#timespans #state );
	package: #'Kernel-Chronology'.

Stopwatch >> activate
[
	self isSuspended
		ifTrue: [ self timespans add: (Timespan starting: DateAndTime now duration: Duration zero).
			self state: #active ]
]

Stopwatch >> duration
[
	| ts last |
	self isSuspended
		ifTrue: [ (ts := self timespans) isEmpty
				ifTrue: [ ts := {(Timespan starting: DateAndTime now duration: Duration zero)} ] ]
		ifFalse: [ last := self timespans last.
			ts := self timespans allButLast
				add: (last
								duration: DateAndTime now - last start;
								yourself);
				yourself ].
	^ (ts collect: [ :t | t duration ]) sum
]

Stopwatch >> end
[
	^ self timespans last next
]

Stopwatch >> isActive
[
	^ self state = #active
]

Stopwatch >> isSuspended
[
	^ self state = #suspended
]

Stopwatch >> printOn: aStream
[
	super printOn: aStream.
	aStream
		nextPut: $(;
		nextPutAll: self state;
		nextPut: $:;
		print: self duration;
		nextPut: $)
]

Stopwatch >> reActivate
[
	self
		suspend;
		activate
]

Stopwatch >> reset
[
	self suspend.
	timespans := nil
]

Stopwatch >> start
[
	^ self timespans first start
]

Stopwatch >> state
[
	^ state ifNil: [ state := #suspended ]
]

Stopwatch >> state: aSymbol
[
	state := aSymbol
]

Stopwatch >> suspend
[
	| ts |
	self isActive
		ifTrue: [ ts := self timespans last.
			ts duration: DateAndTime now - ts start.
			self state: #suspended ]
]

Stopwatch >> timespans
[
	^ timespans ifNil: [ timespans := OrderedCollection new ]
]

