Year
	superclass: #Timespan;
	package: #'Kernel-Chronology'.

Year >> asYear
[
	^ self
]

Year >> daysInMonth
[
	self shouldNotImplement
]

Year >> daysInYear
[
	^ self duration days
]

Year >> previous
[
	"This implementation handles leap years correctly"

	^ self class year: self year - 1
]

Year >> printOn: aStream
[
	aStream nextPutAll: 'a Year ('.
	self start year printOn: aStream.
	aStream nextPutAll: ')'
]

Year class >> current
[
	^ self year: DateAndTime now year
]

Year class >> daysInYear: yearInteger
[
	^ 365 + ((self isLeapYear: yearInteger)
				ifTrue: [ 1 ]
				ifFalse: [ 0 ])
]

Year class >> isLeapYear: aYearInteger
[
	| adjustedYear |
	adjustedYear := aYearInteger > 0
		ifTrue: [ aYearInteger ]
		ifFalse: [ (aYearInteger + 1) negated ].	"There was no year 0"
	^ (adjustedYear \\ 4 ~= 0 or: [ adjustedYear \\ 100 = 0 and: [ adjustedYear \\ 400 ~= 0 ] ]) not
]

Year class >> leapYear: yearInteger
[
	^ (self isLeapYear: yearInteger)
		ifTrue: [ 1 ]
		ifFalse: [ 0 ]
]

Year class >> starting: aDateAndTime duration: aDuration
[
	"Override - start from midnight"

	| midnight |
	midnight := aDateAndTime asDateAndTime midnight.
	^ super starting: midnight duration: (Duration days: (self daysInYear: midnight year))
]

Year class >> year: aYear
[
	^ self starting: (DateAndTime year: aYear month: 1 day: 1)
]

