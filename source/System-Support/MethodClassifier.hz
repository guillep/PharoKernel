MethodClassifier
	instanceVariables: #(#prefixMapping );
	package: #'System-Support'.

MethodClassifier >> buildPrefixDictionary
[
	prefixMapping := Dictionary new.
	prefixMapping
		at: 'test' put: 'tests';
		at: 'bench' put: 'benchmarking';
		at: 'copy' put: 'copying';
		at: 'initialize' put: 'initialize-release';
		at: 'accept' put: 'visitor';
		at: 'visit' put: 'visitor';
		at: 'signal' put: 'signalling';
		at: 'parse' put: 'parsing';
		at: 'add' put: 'adding';
		at: 'is' put: 'testing';
		at: 'as' put: 'converting';
		at: 'new' put: 'instance-creation'
]

MethodClassifier >> classify: aMethod
[
	(self classifyAccessor: aMethod)
		ifTrue: [ ^ aMethod category ].
	(self classifyInSuperclassProtocol: aMethod)
		ifTrue: [ ^ aMethod category ].
	(self classifyByKnownPrefix: aMethod)
		ifTrue: [ ^ aMethod category ].
	(self classifyByOtherImplementors: aMethod)
		ifTrue: [ ^ aMethod category ]
]

MethodClassifier >> classifyAccessor: aMethod
[
	" If the method is a setter or getter for a  "

	| names selector |
	names := aMethod methodClass allInstVarNames.
	selector := aMethod selector.
	(selector endsWith: ':')
		ifTrue: [ "selector might be a setter"
			selector := selector allButLast ].
	(names includes: selector)
		ifFalse: [ ^ false ].
	aMethod protocol: 'accessing'.
	^ true
]

MethodClassifier >> classifyByKnownPrefix: aMethod
[
	prefixMapping
		keysAndValuesDo: [ :prefix :protocol | (aMethod selector beginsWith: prefix)
				ifTrue: [ aMethod protocol: protocol.
					^ true ] ].
	^ false
]

MethodClassifier >> classifyByOtherImplementors: aMethod
[
	| protocolBag |
	protocolBag := Bag new.
	aMethod implementors
		ifEmpty: [ ^ false ]
		ifNotEmpty: [ :methods | methods
				do: [ :method | self flag: 'TODO: at some point we should have first-class protocols which will tell whether they are extensions...'.
					((method protocol beginsWith: '*') or: [ method protocol = ClassOrganizer default ])
						ifFalse: [ protocolBag add: method protocol ] ]
				without: aMethod ].
	protocolBag ifEmpty: [ ^ false ].
	aMethod protocol: protocolBag sortedCounts first value.
	^ true
]

MethodClassifier >> classifyInSuperclassProtocol: aMethod
[
	| currentClass |
	currentClass := aMethod methodClass.
	[ currentClass superclass isNil ]
		whileFalse: [ currentClass := currentClass superclass.
			(currentClass includesSelector: aMethod selector)
				ifTrue: [ aMethod protocol: (currentClass >> aMethod selector) protocol.
					^ true ] ].
	^ false
]

MethodClassifier >> initialize
[
	self buildPrefixDictionary
]

MethodClassifier class >> classify: aMethod
[
	^ self new classify: aMethod
]

MethodClassifier class >> classifyAll: aCollectionOfMethods
[
	| classifier |
	classifier := MethodClassifier new.
	aCollectionOfMethods do: [ :method | classifier classify: method ]
]

