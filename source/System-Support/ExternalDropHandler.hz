ExternalDropHandler
	instanceVariables: #(#action #type #extension );
	classVariables: #(#DefaultHandler #RegisteredHandlers );
	package: #'System-Support'.

ExternalDropHandler >> extension
extension
	^ extension

ExternalDropHandler >> handle: dropStream in: pasteUp dropEvent: anEvent
handle: dropStream in: pasteUp dropEvent: anEvent
	^ action cull: dropStream cull: pasteUp cull: anEvent

ExternalDropHandler >> matchesExtension: aExtension
matchesExtension: aExtension
	(self extension isNil or: [ aExtension isNil ])
		ifTrue: [ ^ false ].
	FileSystem disk isCaseSensitive
		ifTrue: [ ^ extension = aExtension ]
		ifFalse: [ ^ extension sameAs: aExtension ]

ExternalDropHandler >> matchesTypes: types
matchesTypes: types
	(self type isNil or: [ types isNil ])
		ifTrue: [ ^ false ].
	^ types anySatisfy: [ :mimeType | mimeType beginsWith: self type ]

ExternalDropHandler >> type
type
	^ type

ExternalDropHandler >> type: aType extension: anExtension action: anAction
type: aType extension: anExtension action: anAction
	action := anAction.
	type := aType.
	extension := anExtension

ExternalDropHandler class >> chooseServiceFrom: aCollection
chooseServiceFrom: aCollection
	"private - choose a service from aCollection asking the user if  
	needed"

	aCollection size = 1
		ifTrue: [ ^ aCollection anyOne ].
	^ UIManager default chooseFrom: (aCollection collect: [ :each | each label ]) values: aCollection

ExternalDropHandler class >> cleanUp
cleanUp
	self resetRegisteredHandlers

ExternalDropHandler class >> defaultHandler
defaultHandler
	DefaultHandler
		ifNil: [ DefaultHandler := ExternalDropHandler type: nil extension: nil action: [ :dropStream | dropStream edit ] ].
	^ DefaultHandler

ExternalDropHandler class >> defaultHandler: externalDropHandler
defaultHandler: externalDropHandler
	DefaultHandler := externalDropHandler

ExternalDropHandler class >> initialize
initialize
	"ExternalDropHandler initialize"

	self resetRegisteredHandlers

ExternalDropHandler class >> lookupExternalDropHandler: stream
lookupExternalDropHandler: stream
	| types extension serviceHandler |
	types := stream mimeTypes.
	types
		ifNotNil: [ self registeredHandlers do: [ :handler | (handler matchesTypes: types)
						ifTrue: [ ^ handler ] ] ].
	extension := stream name asFileReference extension.
	self registeredHandlers do: [ :handler | (handler matchesExtension: extension)
				ifTrue: [ ^ handler ] ].
	serviceHandler := self lookupServiceBasedHandler: stream.
	^ serviceHandler ifNil: [ self defaultHandler ]

ExternalDropHandler class >> lookupServiceBasedHandler: dropStream
lookupServiceBasedHandler: dropStream
	"the file was just droped, let's do our job"

	| fileName services theOne |
	fileName := dropStream name.
	services := (Smalltalk tools fileList itemsForFile: fileName asFileReference)
		reject: [ :svc | self unwantedSelectors includes: svc selector ].	"no service, default behavior"
	services isEmpty
		ifTrue: [ ^ nil ].
	theOne := self chooseServiceFrom: services.
	^ theOne
		ifNotNil: [ ExternalDropHandler type: nil extension: nil action: [ :stream | theOne performServiceFor: stream ] ]

ExternalDropHandler class >> registerHandler: aHandler
registerHandler: aHandler
	self registeredHandlers add: aHandler

ExternalDropHandler class >> registeredHandlers
registeredHandlers
	RegisteredHandlers ifNil: [ RegisteredHandlers := OrderedCollection new ].
	^ RegisteredHandlers

ExternalDropHandler class >> resetRegisteredHandlers
resetRegisteredHandlers
	RegisteredHandlers := nil

ExternalDropHandler class >> type: aType extension: anExtension action: anAction
type: aType extension: anExtension action: anAction
	^ self new type: aType extension: anExtension action: anAction

ExternalDropHandler class >> unwantedSelectors
unwantedSelectors
	"private - answer a collection well known unwanted selectors "

	^ #(#removeLineFeeds: #addFileToNewZip: #compressFile: #putUpdate:)

