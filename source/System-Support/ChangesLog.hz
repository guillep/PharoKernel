ChangesLog
	instanceVariables: #(#startupStamp );
	classVariables: #(#DefaultInstance );
	package: #'System-Support'.

ChangesLog >> assureStartupStampLogged
[
	"If there is a startup stamp not yet actually logged to disk, do it now."

	| changesFile |
	startupStamp ifNil: [ ^ self ].
	(SourceFiles isNil or: [ (changesFile := SourceFiles at: 2) == nil ])
		ifTrue: [ ^ self ].
	changesFile isReadOnly
		ifTrue: [ ^ self ].
	changesFile
		setToEnd;
		cr;
		cr.
	changesFile
		nextChunkPut: startupStamp asString;
		cr.
	startupStamp := nil.
	self forceChangesToDisk
]

ChangesLog >> forceChangesToDisk
[
	"Ensure that the changes file has been fully written to disk by closing and re-opening it. This makes the system more robust in the face of a power failure or hard-reboot."

	| changesFile |
	changesFile := SourceFiles at: 2.
	(changesFile isKindOf: FileStream)
		ifTrue: [ changesFile flush.
			changesFile close.
			changesFile open: changesFile name forWrite: true.
			changesFile setToEnd ]
]

ChangesLog >> logChange: aStringOrText
[
	"Write the argument, aString, onto the changes file."

	| aString changesFile |
	(SourceFiles isNil or: [ (SourceFiles at: 2) == nil ])
		ifTrue: [ ^ self ].
	self assureStartupStampLogged.
	aString := aStringOrText asString.
	(aString findFirst: [ :char | char isSeparator not ]) = 0
		ifTrue: [ ^ self ].	"null doits confuse replay"
	changesFile := SourceFiles at: 2.
	changesFile isReadOnly
		ifTrue: [ ^ self ].
	changesFile
		setToEnd;
		cr;
		cr.
	changesFile nextChunkPut: aString.	"If want style changes in DoIt, use nextChunkPutWithStyle:, and allow Texts to get here"
	self forceChangesToDisk
]

ChangesLog >> logClassRemoved: annoucement
[
	annoucement classRemoved acceptsLoggingOfCompilation
		ifTrue: [ self logChange: 'Smalltalk globals removeClassNamed: #' , annoucement classRemoved name ]
]

ChangesLog >> logClassRenamed: annoucement
[
	annoucement classRenamed acceptsLoggingOfCompilation
		ifTrue: [ self logChange: '(Smalltalk globals at: #' , annoucement oldName , ') rename: #' , annoucement newName ]
]

ChangesLog >> logExpressionEvaluated: announcement
[
	self logChange: announcement expressionEvaluated
]

ChangesLog >> logMethodRemoved: announcement
[
	announcement methodClass acceptsLoggingOfCompilation
		ifTrue: [ self logChange: announcement methodClass name , ' removeSelector: #' , announcement selector ]
]

ChangesLog >> recordStartupStamp
[
	startupStamp := '----STARTUP----' , Time dateAndTimeNow printString , ' as ' , Smalltalk imagePath
]

ChangesLog >> registerToAnnouncements
[
	SystemAnnouncer uniqueInstance
		on: ClassRemoved send: #logClassRemoved: to: self;
		on: ClassRenamed send: #logClassRenamed: to: self;
		on: MethodRemoved send: #logMethodRemoved: to: self;
		on: ExpressionEvaluated send: #logExpressionEvaluated: to: self
]

ChangesLog class >> default
[
	^ DefaultInstance ifNil: [ DefaultInstance := self new.
			DefaultInstance registerToAnnouncements ]
]

ChangesLog class >> reset
[
	SystemAnnouncer uniqueInstance unsubscribe: DefaultInstance.
	DefaultInstance := nil
]

