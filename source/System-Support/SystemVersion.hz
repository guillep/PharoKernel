SystemVersion
	instanceVariables: #(#version #date #highestUpdate #updates #type #major #minor #suffix );
	classVariables: #(#Current );
	package: #'System-Support'.

SystemVersion >> date
[
	^ date
]

SystemVersion >> date: newDate
[
	date := newDate
]

SystemVersion >> datedVersion
[
	" E.g. 'Pharo2.0a of ''18 April 2012''' "

	^ self version asString , ' of ' , self date printString
]

SystemVersion >> dottedMajorMinor
[
	^ self majorMinor: '.'
]

SystemVersion >> highestUpdate
[
	"Returns the highest number of available updates"

	| sortedUpdates |
	highestUpdate
		ifNil: [ sortedUpdates := self updates asSortedCollection.
			highestUpdate := sortedUpdates isEmpty
				ifTrue: [ 0 ]
				ifFalse: [ sortedUpdates last ] ].
	^ highestUpdate
]

SystemVersion >> highestUpdate: anInteger
[
	highestUpdate := anInteger
]

SystemVersion >> imageVersionString
[
	"Print the version compatibile with naming the image."

	^ String
		streamContents: [ :str | str
				nextPutAll: self type;
				nextPut: $-;
				nextPutAll: self major printString;
				nextPut: $.;
				nextPutAll: self minor printString;
				nextPut: $-;
				nextPutAll: self highestUpdate printString;
				nextPut: $-;
				nextPutAll: self suffix ]
]

SystemVersion >> includesUpdate: anUpdate
[
	^ self updates includes: anUpdate
]

SystemVersion >> initialize
[
	super initialize.
	date := Date today.
	updates := Set new
]

SystemVersion >> major
[
	"Answer the major number of a version. 1 in '1.2'"

	^ major
]

SystemVersion >> major: anObject
[
	"Set the value of major"

	major := anObject
]

SystemVersion >> majorMinor
[
	self deprecated: 'Use #dottedMajorMinor instead' on: '5 September, 2012' in: 'Pharo 2.0'.
	^ self dottedMajorMinor
]

SystemVersion >> majorMinor: aSeparatingString
[
	"Return the major/minor version number of the form XaSeparatingStringY, without any 'alpha' or 'beta' or other suffix. If the receiver needs upgrading, do it. Remove the guard in 1.3."

	"SystemVersion current majorMinor: '-'"

	"SystemVersion current majorMinor: ''"

	self upgrade.
	^ String
		streamContents: [ :str | str
				nextPutAll: self major printString;
				nextPutAll: aSeparatingString;
				nextPutAll: self minor printString ]
]

SystemVersion >> majorMinorVersion
[
	^ self type , self dottedMajorMinor
]

SystemVersion >> minor
[
	"Answer the minor number of a version. 2 in '1.2'"

	^ minor
]

SystemVersion >> minor: anObject
[
	"Set the value of minor"

	minor := anObject
]

SystemVersion >> printOn: stream
[
	stream
		nextPutAll: self datedVersion;
		nextPutAll: ' update ' , self highestUpdate printString
]

SystemVersion >> registerUpdate: update
[
	self updates add: update.
	self resetHighestUpdate
]

SystemVersion >> resetHighestUpdate
[
	highestUpdate := nil
]

SystemVersion >> shortVersionString
[
	"Print a short version string.  Compatibile with senders that concatenate this with 
	#lastUpdateString or #highestUpdate. Essentially the old version format. Guard 
	against no state being set."

	self type ifNil: [ ^ 'No version set' ].
	^ String
		streamContents: [ :str | str
				nextPutAll: self type;
				nextPutAll: self major printString;
				nextPut: $.;
				nextPutAll: self minor printString;
				nextPutAll: self suffix ]
]

SystemVersion >> suffix
[
	"Answer the suffix (alpha, beta, rc  of a version. beta in '1.2beta'"

	^ suffix
]

SystemVersion >> suffix: anObject
[
	"Set the value of suffix"

	suffix := anObject
]

SystemVersion >> type
[
	"Answer the value of type"

	^ type
]

SystemVersion >> type: anObject
[
	"Set the value of type"

	type := anObject
]

SystemVersion >> unregisterUpdate: update
[
	self updates remove: update ifAbsent: [  ]
]

SystemVersion >> updates
[
	^ updates
]

SystemVersion >> upgrade
[
	| parts |
	version ifNil: [ ^ self ].
	parts := self class parseShortVersionString: version.
	self type: parts first.
	self major: parts second.
	self minor: parts third.
	self suffix: parts fourth.
	version := nil
]

SystemVersion >> version
[
	"Answer the short version string. If the receiver needs upgrading, do it."

	^ self shortVersionString
]

SystemVersion class >> current
[
	Current ifNil: [ Current := SystemVersion new ].
	^ Current
]

SystemVersion class >> fromShortVersionString: aString
[
	"Create a new SystemVersion from the given short version string. Useful for testing."

	| parts |
	parts := self parseShortVersionString: aString.
	^ self new
		type: parts first;
		major: parts second;
		minor: parts third;
		suffix: parts fourth;
		yourself
]

SystemVersion class >> newVersion: versionName
[
	"Install a new SystemVersion as the current version. Only preserve the higest update recorded.
	This method is a candidate for being removed, I am not sure it ever makes sense to do this."

	| newVersion |
	newVersion := self fromShortVersionString: versionName.
	newVersion highestUpdate: self current highestUpdate.
	Current := newVersion
]

SystemVersion class >> parseShortVersionString: aString
[
	"Answer the parts of aString, expected in short format <type><major>.<minor><suffix>."

	| stream length type major minor suffix |
	stream := aString readStream.
	[ stream peek isDigit ] whileFalse: [ stream next ].
	length := stream position.
	stream reset.
	type := stream next: length.
	major := (stream upTo: $.) asInteger.
	stream := stream upToEnd readStream.
	[ stream peek notNil and: [ stream peek isDigit ] ] whileTrue: [ stream next ].
	length := stream position.
	stream reset.
	minor := (stream next: length) asInteger.
	suffix := stream upToEnd.
	^ {type.
	major.
	minor.
	suffix}
]

SystemVersion class >> parseVersionString: versionString
[
	"Answer the version of this release as version, date, update."

	"SystemVersion parseVersionString: 'Squeak3.1alpha of 28 February 2001 [latest update: #3966]' "

	| version date update |
	[ | stream |
	stream := versionString readStream.
	version := stream upToAll: ' of '.
	date := Date readFrom: stream.
	stream upToAll: ' #'.
	update := Number readFrom: stream ]
		on: Error
		do: [ ^ nil ].
	^ {version.
	date.
	update}
]

