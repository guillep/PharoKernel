SystemNavigation
	instanceVariables: #(#environment );
	package: #'System-Support'.

SystemNavigation >> allAccessesTo: instVarName from: aClass
[
	| coll |
	coll := OrderedCollection new.
	aClass
		withAllSubAndSuperclassesDo: [ :class | (class whichSelectorsAccess: instVarName) do: [ :sel | coll add: (self createMethodNamed: sel realParent: class) ] ].
	^ coll
]

SystemNavigation >> allBehaviors
[
	^ self environment allBehaviors
]

SystemNavigation >> allBehaviorsDo: aBlock
[
	"Execute a block on each class, metaclass, trait and trait class"

	self environment allClassesDo: [ :aClass | aBlock
				value: aClass;
				value: aClass class ].
	self environment allTraitsDo: [ :aTrait | aBlock
				value: aTrait;
				value: aTrait classTrait ]
]

SystemNavigation >> allCallsOn: aSymbol
[
	"Answer a Collection of all the methods that call on the provided symbol even deeply embedded in literal array."

	"self new allCallsOn: #allCallsOn:"

	^ self allReferencesTo: aSymbol
]

SystemNavigation >> allCallsOn: aSymbol from: aClass
[
	"Answer a SortedCollection of all the methods that call on aSymbol."

	| collection special byte |
	collection := OrderedCollection new.
	special := Smalltalk hasSpecialSelector: aSymbol ifTrueSetByte: [ :b | byte := b ].
	aClass
		withAllSubclassesDo: [ :class | (class whichSelectorsReferTo: aSymbol special: special byte: byte)
				do: [ :sel | collection add: (self createMethodNamed: sel realParent: class) ] ].
	^ collection
]

SystemNavigation >> allClasses
[
	"currently returns all the classes in the current environment"

	^ self environment allClasses
]

SystemNavigation >> allClassesAndTraits
[
	"Answer all the classes and traits present in the image"

	"Note that metaclasses are not part of the answer"

	^ Smalltalk globals allClassesAndTraits
]

SystemNavigation >> allClassesDefiningClassVarNamed: aString
[
	"Answer an Array of all classes that define the class variables named aString."

	| aCollection |
	aCollection := ReadWriteStream on: Array new.
	self allClassesDo: [ :class | (class hasClassVarNamed: aString)
				ifTrue: [ aCollection nextPut: class ] ].
	^ aCollection contents
]

SystemNavigation >> allClassesDo: aBlock
[
	^ self environment allClassesDo: aBlock
]

SystemNavigation >> allClassesImplementing: aSelector
[
	"Answer an Array of all classes that implement the message aSelector."

	| aCollection |
	aCollection := ReadWriteStream on: Array new.
	self allBehaviorsDo: [ :class | (class includesSelector: aSelector)
				ifTrue: [ aCollection nextPut: class ] ].
	^ aCollection contents
]

SystemNavigation >> allClassesInPackageNamed: packageName
[
	"Returns the list of classes that belongs to a Monticello package."

	"It would be probably better to delegate that query to the package itself"

	| classes organization |
	organization := Smalltalk globals organization.
	classes := (organization classesInCategory: packageName) asSet.
	(organization categoriesMatching: packageName , '-*')
		do: [ :category | classes addAll: (organization classesInCategory: category) ].
	^ classes asArray
]

SystemNavigation >> allClassesUsingSharedPool: aString
[
	"Answer an Array of all classes that uses the shared pool named aString."

	| aCollection |
	aCollection := ReadWriteStream on: Array new.
	self allClassesDo: [ :class | (class includesSharedPoolNamed: aString)
				ifTrue: [ aCollection nextPut: class ] ].
	^ aCollection contents
]

SystemNavigation >> allImplementedMessages
[
	"Answer a Collection of all the messages that are implemented in the system."

	| messages |
	messages := IdentitySet new.
	self allBehaviorsDo: [ :each | messages addAll: each selectors ].
	^ messages
]

SystemNavigation >> allImplementorsOf: aSelector
[
	"Answer all the methods that implement the message aSelector."

	| aCollection |
	aCollection := OrderedCollection new.
	self
		allBehaviorsDo: [ :class | (class includesSelector: aSelector)
				ifTrue: [ aCollection add: (self createMethodNamed: aSelector realParent: class) ] ].
	^ aCollection
]

SystemNavigation >> allImplementorsOf: aSelector localTo: aClass
[
	"Answer a SortedCollection of all the methods that implement the message  
	aSelector in, above, or below the given class."

	| cls aCollection |
	aCollection := OrderedCollection new.
	cls := aClass theNonMetaClass.
	cls
		withAllSuperAndSubclassesDo: [ :class | (class includesSelector: aSelector)
				ifTrue: [ aCollection add: (self createMethodNamed: aSelector realParent: class) ] ].
	cls class
		withAllSuperAndSubclassesDo: [ :class | (class includesSelector: aSelector)
				ifTrue: [ aCollection add: (self createMethodNamed: aSelector realParent: class) ] ].
	^ aCollection
]

SystemNavigation >> allLocalCallsOn: aSymbol ofClass: aClass
[
	"Answer a SortedCollection of all the methods that call on aSymbol, anywhere in my class hierarchy."

	| aSet special byte cls |
	aSet := Set new.
	cls := aClass theNonMetaClass.
	special := Smalltalk hasSpecialSelector: aSymbol ifTrueSetByte: [ :b | byte := b ].
	cls
		withAllSuperAndSubclassesDo: [ :class | (class whichSelectorsReferTo: aSymbol special: special byte: byte)
				do: [ :sel | aSet add: (self createMethodNamed: sel realParent: class) ] ].
	cls class
		withAllSuperAndSubclassesDo: [ :class | (class whichSelectorsReferTo: aSymbol special: special byte: byte)
				do: [ :sel | aSet add: (self createMethodNamed: sel realParent: class) ] ].
	^ aSet
]

SystemNavigation >> allMethods
[
	^ self allBehaviors flatCollect: [ :behavior | behavior methods ]
]

SystemNavigation >> allMethodsSelect: aBlock
[
	"Answer a SortedCollection of each method that, when used as the block  
	argument to aBlock, gives a true result."

	| aCollection |
	aCollection := OrderedCollection new.
	self
		allBehaviorsDo: [ :class | class
				selectorsAndMethodsDo: [ :sel :m | (aBlock value: m)
						ifTrue: [ aCollection add: (self createMethodNamed: sel realParent: class) ] ] ].
	^ aCollection
]

SystemNavigation >> allMethodsWithSourceString: aString matchCase: caseSensitive
[
	"Answer a SortedCollection of all the methods that contain, in source code, aString as a substring.  Search the class comments also"

	| list addMethod addComment |
	list := Set new.
	addMethod := [ :mrClass :mrSel | list add: (self createMethodNamed: mrSel realParent: mrClass) ].
	addComment := [ :mrClass | list add: (RGCommentDefinition realClass: mrClass) ].
	'Searching all source code...'
		displayProgressFrom: 0
		to: 2 * Smalltalk globals classAndTraitNames size
		during: [ :bar | | count |
			count := 0.
			self
				allBehaviorsDo: [ :each | bar current: (count := count + 1).
					each
						selectorsDo: [ :sel | ((each sourceCodeAt: sel) includesSubstring: aString caseSensitive: caseSensitive)
								ifTrue: [ addMethod value: each value: sel ] ].
					(each organization classComment asString includesSubstring: aString caseSensitive: caseSensitive)
						ifTrue: [ addComment value: each ] ] ].
	^ list asSortedCollection
]

SystemNavigation >> allObjectsDo: aBlock
[
	"Evaluate the argument, aBlock, for each object in the system 
	excluding SmallIntegers."

	| object endMarker |
	object := self someObject.
	endMarker := Object new.
	[ endMarker == object ] whileFalse: [ aBlock value: object.
			object := object nextObject ]
]

SystemNavigation >> allPrimitiveMethods
[
	"Answer an OrderedCollection of all the methods that are implemented by primitives."

	| aColl |
	aColl := OrderedCollection new: 200.
	self
		allBehaviorsDo: [ :class | class
				selectorsAndMethodsDo: [ :sel :method | method isPrimitive
						ifTrue: [ aColl addLast: class name , ' ' , sel , ' ' , method primitive printString ] ] ].
	^ aColl
]

SystemNavigation >> allReferencesTo: aLiteral
[
	"Answer a Collection of all the methods that refer to aLiteral even deeply embedded in literal array."

	"SystemNavigation new allReferencesTo: #+"

	"SystemNavigation new allReferencesTo: Point binding"

	| result special byte symbol |
	result := OrderedCollection new.
	special := Smalltalk hasSpecialSelector: aLiteral ifTrueSetByte: [ :value | byte := value ].
	symbol := aLiteral isSymbol.
	self
		allBehaviorsDo: [ :class | | selectors |
			selectors := symbol
				ifFalse: [ class whichSelectorsReferTo: aLiteral special: special byte: byte ]
				ifTrue: [ class thoroughWhichSelectorsReferTo: aLiteral special: special byte: byte ].
			selectors do: [ :selector | result addLast: (self createMethodNamed: selector realParent: class) ] ].
	^ result
]

SystemNavigation >> allReferencesToPool: aPool
[
	"Answer all the references to variable aPool"

	| list |
	list := OrderedCollection new.
	self
		allClassesDo: [ :cls | cls
				selectorsAndMethodsDo: [ :sel :meth | meth literals
						detect: [ :lit | (lit isVariableBinding and: [ lit key notNil ]) and: [ (aPool bindingOf: lit key) notNil ] ]
						ifFound: [ list add: (self createMethodNamed: sel realParent: cls) ] ] ].
	^ list
]

SystemNavigation >> allReferencesToPool: aPool from: aClass
[
	"Answer all the references to variables from aPool"

	| list |
	list := OrderedCollection new.
	aClass
		withAllSubclassesDo: [ :cls | cls
				selectorsAndMethodsDo: [ :sel :meth | meth literals
						detect: [ :lit | lit isVariableBinding and: [ (aPool bindingOf: lit key) notNil ] ]
						ifFound: [ list add: (self createMethodNamed: sel realParent: aClass) ] ] ].
	^ list
]

SystemNavigation >> allSendersOf: selector
[
	| senders special byte |
	senders := OrderedCollection new.
	special := Smalltalk hasSpecialSelector: selector ifTrueSetByte: [ :b | byte := b ].
	self
		allBehaviorsDo: [ :behavior | (behavior thoroughWhichSelectorsReferTo: selector special: special byte: byte)
				do: [ :sel | senders add: (self createMethodNamed: sel realParent: behavior) ] ].
	^ senders
]

SystemNavigation >> allSentMessages
[
	"Answer the set of selectors which are sent somewhere in the system."

	| sent |
	sent := IdentitySet new.
	self
		allBehaviorsDo: [ :each | each selectors
				do: [ :sel | "Include all sels, but not if sent by self"
					(each compiledMethodAt: sel)
						literalsDo: [ :m | m isSymbol
								ifTrue: [ "might be sent"
									m == sel
										ifFalse: [ sent add: m ] ].
							(m isMemberOf: Array)
								ifTrue: [ "might be performed"
									m do: [ :x | x isSymbol
												ifTrue: [ x == sel
														ifFalse: [ sent add: x ] ] ] ] ] ] ].	"The following may be sent without being in any literal frame"
	1 to: Smalltalk specialSelectorSize do: [ :index | sent add: (Smalltalk specialSelectorAt: index) ].
	^ sent
]

SystemNavigation >> allStoresInto: instVarName of: aClass
[
	| coll |
	coll := OrderedCollection new.
	aClass
		withAllSubAndSuperclassesDo: [ :class | (class whichSelectorsStoreInto: instVarName) do: [ :sel | coll add: (self createMethodNamed: sel realParent: class) ] ].
	^ coll
]

SystemNavigation >> allUnimplementedCalls
[
	"Answer an Array of each message that is sent by an expression in a  
	method but is not implemented by any object in the system."

	| aStream all |
	all := self allImplementedMessages.
	aStream := (Array new: 50) writeStream.
	self
		allBehaviorsDo: [ :cl | cl
				selectorsAndMethodsDo: [ :sel :meth | | secondStream |
					secondStream := (String new: 5) writeStream.
					meth messages
						do: [ :m | (all includes: m)
								ifFalse: [ secondStream
										nextPutAll: m;
										space ] ].
					secondStream position = 0
						ifFalse: [ aStream nextPut: cl name , ' ' , sel , ' calls: ' , secondStream contents ] ] ].
	^ aStream contents
]

SystemNavigation >> allUnreferencedClassVariablesOf: aClass
[
	"Answer a list of the names of all the receiver's unreferenced class  
	vars, including those defined in superclasses"

	| aList |
	aList := OrderedCollection new.
	aClass withAllSuperclasses
		reverseDo: [ :aSuperClass | aSuperClass classVarNames
				do: [ :var | (self allReferencesTo: (aSuperClass classPool associationAt: var)) isEmpty
						ifTrue: [ aList add: var ] ] ].
	^ aList
]

SystemNavigation >> allUnsentMessages
[
	"SystemNavigation new allUnSentMessages"

	"Answer the set of selectors that are implemented by some object in the  
	system but not sent by any."

	^ self allImplementedMessages copyWithoutAll: self allSentMessages
]

SystemNavigation >> allUnsentMessagesIn: selectorSet
[
	"Answer the subset of selectorSet which are not sent anywhere in the 
	system. As allSentMessages does not recurse into nested Arrays, filter
	with #allCallsOn, which does"

	^ (selectorSet copyWithoutAll: self allSentMessages) select: [ :each | (self allCallsOn: each) isEmpty ]
]

SystemNavigation >> categoriesInPackageNamed: packageName
[
	^ (self environment organization categoriesMatching: packageName)
		, (self environment organization categoriesMatching: packageName , '-*')
]

SystemNavigation >> createMethodNamed: aSelector realParent: class
[
	^ (RGMethodDefinition realClass: class selector: aSelector)
		package: (class >> aSelector) package asRingDefinition;
		yourself
]

SystemNavigation >> environment
[
	^ environment
]

SystemNavigation >> environment: aSystemDictionary
[
	^ environment := aSystemDictionary
]

SystemNavigation >> headingAndAutoselectForLiteral: aLiteral do: binaryBlock
[
	"Evaluate aBlock with either Users of ... or Senders of ... plus the auto-select string
	 for the given literal.  aLiteral can be a Symbol, a VariableBinding or an arbitrary object."

	| autoSelect |
	^ aLiteral isSymbol
		ifTrue: [ binaryBlock value: 'Senders of ' , aLiteral value: aLiteral ]
		ifFalse: [ autoSelect := aLiteral isVariableBinding
				ifTrue: [ aLiteral key ]
				ifFalse: [ aLiteral printString ].
			binaryBlock value: 'Users of ' , autoSelect value: autoSelect ]
]

SystemNavigation >> initialize
[
	super initialize.
	self environment: Smalltalk globals
]

SystemNavigation >> installedMethodsWithIncorrectTrailerKind
[
	^ self
		allMethodsSelect: [ :each | (#(#SourcePointer #VarLengthSourcePointer #NativeCodeTrailer) includes: each trailer kind) not and: [ each isInstalled ] ]
]

SystemNavigation >> instanceSideMethodsWithNilKeyInLastLiteral
[
	"This answers all the instance side methods that has NIL as the key in their last literal. There should be none (only class side methods have this)"

	^ self
		allMethodsSelect: [ :each | (((each literalAt: each numLiterals) key isNil and: [ (each literalAt: each numLiterals) value isMeta not ])
				and: [ each methodClass ~= UndefinedObject ]) and: [ each isInstalled ] ]
]

SystemNavigation >> isUnsentMessage: selector
[
	| special byte |
	special := Smalltalk hasSpecialSelector: selector ifTrueSetByte: [ :b | byte := b ].
	self
		allBehaviorsDo: [ :behavior | (behavior thoroughHasSelectorReferringTo: selector special: special byte: byte)
				ifTrue: [ ^ false ] ].
	^ true
]

SystemNavigation >> methodsWithUnboundGlobals
[
	"This says that for any global, it should match either the class's notion of what bindingOf: the key is, or bindingOf: should be nil and the binding should be in Undeclared. If the class answers a different binding through bindingOf: or answers no binding and the binding is not in Undeclared then the variable in the method is wrong.
	For a clean image the result should be empty. If it is not empty, evaluating Compiler recompileAll probably solves the problem. However, we should investigate why the method gets an incorrect state."

	"SystemNavigation new methodsWithUnboundGlobals"

	^ self
		allMethodsSelect: [ :m | m literals
				anySatisfy: [ :l | l isVariableBinding
						and: [ l key isSymbol
								and: [ (m methodClass bindingOf: l key)
										ifNil: [ (Undeclared associationAt: l key ifAbsent: [  ]) ~~ l ]
										ifNotNil: [ :b | b ~~ l ] ]	"avoid class-side methodClass literals" ] ] ]
]

SystemNavigation >> numberOfImplementorsOf: aSelector
[
	"Answer a count of the implementors of the given selector found in the  
	system"

	"self new numberOfImplementorsOf: #contents.  
	self new numberOfImplementorsOf: #nobodyImplementsThis.  
	self new numberOfimplementorsOf: #numberOfImplementorsOf:."

	| aCount |
	aCount := 0.
	self allBehaviorsDo: [ :class | (class includesSelector: aSelector)
				ifTrue: [ aCount := aCount + 1 ] ].
	^ aCount
]

SystemNavigation >> obsoleteBehaviors
[
	"SystemNavigation new obsoleteBehaviors inspect"

	"Find all obsolete behaviors including meta classes"

	| obs |
	obs := OrderedCollection new.
	Smalltalk garbageCollect.
	self allObjectsDo: [ :cl | (cl isBehavior and: [ cl isObsolete ])
				ifTrue: [ obs add: cl ] ].
	^ obs asArray
]

SystemNavigation >> obsoleteClasses
[
	"SystemNavigation new obsoleteClasses inspect"

	"NOTE:  Also try inspecting comments below"

	| obs |
	obs := OrderedCollection new.
	Smalltalk garbageCollect.
	Metaclass
		allInstancesDo: [ :m | | c |
			c := m soleInstance.
			(c notNil and: [ 'AnOb*' match: c name asString ])
				ifTrue: [ obs add: c ] ].
	^ obs asArray	"Likely in a ClassDict or Pool...(Association allInstances select: [:a | (a value isKindOf: Class) and: ['AnOb*' match: a value name]]) asArray"	"Obsolete class refs or super pointer in last lit of a method...| n l found |Smalltalk browseAllSelect:	[:m | found := false.	1 to: m numLiterals do:		[:i | (((l := m literalAt: i) isMemberOf: Association)				and: [(l value isKindOf: Behavior)				and: ['AnOb*' match: l value name]])			ifTrue: [found := true]].	found]"
]

SystemNavigation >> obsoleteMethodReferences
[
	"SystemNavigation new obsoleteMethodReferences"

	"Open a browser on all referenced behaviors that are obsolete"

	| obsClasses references |
	references := Array new writeStream.
	obsClasses := self obsoleteBehaviors.
	'Scanning for methods referencing obsolete classes'
		displayProgressFrom: 0
		to: obsClasses size
		during: [ :bar | obsClasses
				keysAndValuesDo: [ :index :each | | obsRefs |
					bar current: index.
					obsRefs := each pointersToExcept: obsClasses.
					obsRefs
						do: [ :ref | "Figure out if it may be a global"
							(ref isVariableBinding and: [ ref key isString	"or Symbol" ])
								ifTrue: [ ref pointersTo
										do: [ :meth | meth isCompiledMethod
												ifTrue: [ meth methodReference ifNotNil: [ :mref | references nextPut: mref ] ] ] ] ] ] ].
	^ references contents
]

SystemNavigation >> removeAllButPackages: packagesList
[
	"Remove all classes and methods that do not belong to some of listed packages. Skip #unload. Do not use this method if you can use Monticello! This method is used by some low-level shrinking process. Do not use it. This is quite hackish"

	| keep remove oldRemove extensionCategories |
	keep := Set new.
	packagesList do: [ :pkg | keep addAll: (self allClassesInPackageNamed: pkg) ].
	oldRemove := Set new.
	[ remove := Smalltalk globals allClassesAndTraits reject: [ :c | keep includes: c ].
	remove := remove collect: [ :c | c name ].
	(remove asSortedCollection: [ :a :b | a <= b ])
		do: [ :className | | class |
			class := Smalltalk globals classOrTraitNamed: className.
			class allSubclasses
				ifEmpty: [ SystemAnnouncer uniqueInstance unsubscribe: class.
					class isTrait
						ifFalse: [ (class class includesSelector: #unload)
								ifTrue: [ class removeSelector: #unload ] ].
					class removeFromSystem ] ].
	oldRemove
		ifNotEmpty: [ oldRemove = remove
				ifTrue: [ self
						error:
							'Some classes still have subclasses: '
								, (remove collect: [ :c | c -> (Smalltalk classOrTraitNamed: c) allSubclasses ]) asString ] ].
	oldRemove := remove.
	remove notEmpty ]
		whileTrue.
	keep
		do: [ :class | extensionCategories := (class organization ownCategories select: [ :category | category first = $* ])
				asOrderedCollection.
			extensionCategories
				removeAllSuchThat: [ :category | packagesList
						anySatisfy: [ :package | category asLowercase allButFirst = package asLowercase
								or: [ package asLowercase , '-*' match: category asLowercase allButFirst ] ] ].
			extensionCategories
				do: [ :category | | protocol |
					protocol := class organization protocolOrganizer protocolNamed: category.
					(protocol methods intersection: class localSelectors) do: [ :sel | class removeSelector: sel ]	"class removeProtocol: category" ].
			class isTrait
				ifFalse: [ extensionCategories := (class class organization ownCategories select: [ :category | category first = $* ])
						asOrderedCollection.
					extensionCategories
						removeAllSuchThat: [ :category | packagesList
								anySatisfy: [ :package | category asLowercase allButFirst = package asLowercase
										or: [ package asLowercase , '-*' match: category asLowercase allButFirst ] ] ].
					extensionCategories
						do: [ :category | | protocol |
							protocol := class class organization protocolOrganizer protocolNamed: category.
							(protocol methods intersection: class class localSelectors) do: [ :sel | class class removeSelector: sel ]	"class class removeProtocol: category" ] ] ]
]

SystemNavigation >> unimplemented
[
	"Answer an Array of each message that is sent by an expression in a method but is not implemented by any object in the system."

	| all unimplemented |
	all := IdentitySet new.
	self allBehaviorsDo: [ :cl | cl selectorsDo: [ :aSelector | all add: aSelector ] ].
	unimplemented := IdentityDictionary new.
	self
		allBehaviorsDo: [ :cl | cl
				selectorsAndMethodsDo: [ :sel :meth | meth messages
						do: [ :m | | entry |
							(all includes: m)
								ifFalse: [ entry := unimplemented at: m ifAbsent: [ Array new ].
									entry := entry copyWith: cl name , '>' , sel.
									unimplemented at: m put: entry ] ] ] ].
	^ unimplemented
]

SystemNavigation class >> default
[
	^ self new
]

