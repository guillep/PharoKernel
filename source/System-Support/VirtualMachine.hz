VirtualMachine
	classVariables: #(#LastStats #WordSize );
	package: #'System-Support'.

VirtualMachine >> allocationsBetweenGC
[allocationsBetweenGC
	"allocations between GCs (read-write)"

	^ self parameterAt: 5
]

VirtualMachine >> allocationsBetweenGC: anInteger
[allocationsBetweenGC: anInteger
	"allocations between GCs (read-write)"

	^ self parameterAt: 5 put: anInteger
]

VirtualMachine >> binary
[binary
	"Answer the a file reference to the virtual machine binary."

	"SmalltalkImage current vmBinary"

	^ FileLocator vmBinary
]

VirtualMachine >> buildDate
[buildDate
	"Return a String reflecting the build date of the VM"

	"Smalltalk buildDate"

	^ self getSystemAttribute: 1006
]

VirtualMachine >> cogitClass
[cogitClass
	"Return the jit class that is currently executing the system (Cog VM only)"

	^ self getSystemAttribute: 1008
]

VirtualMachine >> command
[command
	"return a bash-like lauch command for the vm including all arguments up to the image name "

	^ String
		streamContents: [ :s | s nextPutAll: (self optionAt: 0).
			Smalltalk commandLine options
				do: [ :argument | (argument endsWith: '.image')
						ifTrue: [ ^ s contents ].
					s
						space;
						nextPutAll: argument ] ]
]

VirtualMachine >> directory
[directory
	"Answer the a file reference to the directory containing the Smalltalk virtual machine."

	"SmalltalkImage current directory"

	^ FileLocator vmDirectory
]

VirtualMachine >> disableModuleLoading
[disableModuleLoading
	"Primitive. Disable a new module loading mechanism for the rest of current session.
	This operation is not reversable.
	Any subsequent attempts to load either external or internal module(s) will fail"

	<primitive: 'primitiveDisableModuleLoading' module: ''>
	
]

VirtualMachine >> documentPath
[documentPath
	"Answer the absolute path of the document passed to the vm or nil if none."

	"Smalltalk commandLine documentPath"

	^ self getSystemAttribute: 2
]

VirtualMachine >> extraVMMemory
[extraVMMemory
	"Answer the current setting of the 'extraVMMemory' VM parameter. See the comment in extraVMMemory: for details."

	^ self parameterAt: 23
]

VirtualMachine >> extraVMMemory: extraBytesToReserve
[extraVMMemory: extraBytesToReserve
	"Request that the given amount of extra memory be reserved for use by the virtual machine to leave extra C heap space available for things like plugins, network and file buffers, and so on. This request is stored when the image is saved and honored when the image is next started up. Answer the previous value of this parameter."

	extraBytesToReserve < 0
		ifTrue: [ self error: 'VM memory reservation must be non-negative' ].
	^ self parameterAt: 23 put: extraBytesToReserve
]

VirtualMachine >> fileName
[fileName
	^ FilePathEncoder decode: self fullPath
]

VirtualMachine >> flagInterpretedMethods: aBoolean
[flagInterpretedMethods: aBoolean
	"The Cog VM can be instructed to set the flag bit of CompiledMethods that it executes but will only interpret.  This can be used e.g. to profile startup. See CompiledMethod>>#flag & CompiledMethod>>#clearFlag. This flag persists across snapshots, stored in the image header."

	self parameterAt: 48 put: ((self parameterAt: 48) bitClear: 2) + (aBoolean
						ifTrue: [ 2 ]
						ifFalse: [ 0 ])
]

VirtualMachine >> forgetModule: aString
[forgetModule: aString
	"Primitive. If the module named aString is loaded, unloaded. If not, and it is marked an unloadable, unmark it so the VM will try to load it again next time. See comment for #unloadModule:."

	<primitive: 571>
	^ self primitiveFailed
]

VirtualMachine >> fullGCCount
[fullGCCount
	"Answer the total number of full GCs since startup (read-only)."

	^ self parameterAt: 7
]

VirtualMachine >> fullPath
[fullPath
	"Return the full vm path as a string"

	"Ex: '/Applications/Squeak/Squeak 4.2.5beta1U.app/Contents/MacOS/Squeak VM Opt'"

	"SmalltalkImage current vmFullPath"

	^ self getSystemAttribute: 0
]

VirtualMachine >> gcBiasToGrow: aBool
[gcBiasToGrow: aBool
	"Tell the VM to grow after tenures instead of running in a tight loop where it does IGCs over and over. For some weird reason the primitive takes an integer not a bool but oh well..."

	self primitiveGCBiasToGrow: (aBool
				ifTrue: [ 1 ]
				ifFalse: [ 0 ])
]

VirtualMachine >> gcBiasToGrowLimit: arg
[gcBiasToGrowLimit: arg
	"Tell the VM the grow limit if the GC logic has bias to grow."

	<primitive: 'primitiveSetGCBiasToGrowGCLimit'>
	^ self primitiveFailed
]

VirtualMachine >> getParameters
[getParameters
	"Answer an Array containing the current values of the VM's internal
	parameter/metric registers.  Each value is stored in the array at the
	index corresponding to its VM register.  (See #vmParameterAt: and
	#vmParameterAt:put:.)"

	"Smalltalk vm getParameters"

	<primitive: 254>
	self primitiveFailed
]

VirtualMachine >> getSystemAttribute: attributeID
[getSystemAttribute: attributeID
	"Optional. Answer the string for the system attribute with the given 
	integer ID. Answer nil if the given attribute is not defined on this 
	platform. On platforms that support invoking programs from command 
	lines (e.g., Unix), this mechanism can be used to pass command line 
	arguments to programs written in Pharo.

	By convention, the first command line argument that is not a VM
	configuration option is considered a 'document' to be filed in. Such a
	document can add methods and classes, can contain a serialized object,
	can include code to be executed, or any combination of these.

	Currently defined attributes include: 
	-1000   1000th command line argument that specify VM options
   	...
	-1              first command line argument that specify VM options
      0               the full path name for currently executing VM
                       (or, on some platforms, just the path name of the VM's directory)
       1               full path name of this image (better use primImageName instead)
       2               a Squeak document to open, if any
       3               first command line argument for Squeak programs
       ...
       1000    1000th command line argument for Squeak programs
       1001    this platform's operating system 'Mac OS', 'Win32', 'unix', ...
       1002    operating system version
       1003    this platform's processor type
       1004    vm version
       1005    window system name
       1006    vm build id
       1007    Interpreter class (Cog VM only)
       1008    Cogit class (Cog VM only)
       1201    max filename length (Mac OS only)
       1202    file last error (Mac OS only)
       10001   hardware details (Win32 only)
       10002   operating system details (Win32 only)
       10003   graphics hardware details (Win32 only)"

	<primitive: 149>
	^ nil
]

VirtualMachine >> headlessOption
[headlessOption
	"Return the default name for the headless option for this VM"

	^ self optionDash , (Smalltalk os isUnix
				ifTrue: [ 'vm-display-null' ]
				ifFalse: [ 'headless' ])
]

VirtualMachine >> imageFile
[imageFile
	"Image file "

	^ Smalltalk image imageFile
]

VirtualMachine >> imagePath
[imagePath
	"Image file path
	Ex:  '/Users/foo/Pharo/Pharo-1.1.1-dev10.09.1.image'"

	^ Smalltalk image imagePath
]

VirtualMachine >> imageVersionNumber
[imageVersionNumber
	"Image version number (6505 means the Squeak V3 format with BlockClosure support (but _without_ BlockContext support)"

	^ self parameterAt: 41
]

VirtualMachine >> incrementalGCCount
[incrementalGCCount
	"Answer the total number of incremental GCs since startup (read-only)."

	^ self parameterAt: 9
]

VirtualMachine >> interpreterClass
[interpreterClass
	"Return the interpreter class that is currently executing the system (Cog VM only)"

	^ self getSystemAttribute: 1007
]

VirtualMachine >> interpreterSourceDate
[interpreterSourceDate
	"Return the date of changes given by `self interpreterSourceVersion`"

	| dateString parts |
	dateString := (self interpreterSourceVersion splitOn: 'Date: ') second.
	dateString first isDigit
		ifTrue: [ "most probably the date is in ISO 8601 Format"
			^ dateString asDateAndTime ].	"Otherwise assume the old format: DDD MMM DD HH:MM:SS YYYY +TTTT ..."
	parts := dateString substrings first: 6.	"create a more reasonable string.."
	dateString := String
		streamContents: [ :s | s
				nextPutAll: (parts at: 5);
				space;
				nextPutAll: (parts at: 2);
				space;
				nextPutAll: (parts at: 3);
				space;
				nextPutAll: (parts at: 4);
				space;
				nextPutAll: parts last;
				space	"year"	"month name"	"day of month"	"time"	"timezone" ].
	^ dateString asDateAndTime
]

VirtualMachine >> interpreterSourceVersion
[interpreterSourceVersion
	"The use of this primitive not recommended. Not all VMs providing that"

	"Answer a string corresponding to the version of the interpreter source.
	This represents the version level of the Smalltalk source code (interpreter
	and various plugins) that is translated to C by a CCodeGenerator, as distinct
	from the external platform source code, typically written in C and managed
	separately for each platform. An optional primitive is invoked that may not
	be available on all virtual machines."

	"Smalltalk vm interpreterSourceVersion"

	<primitive: 'primitiveInterpreterSourceVersion'>
	^ self getSystemAttribute: 1009
]

VirtualMachine >> isPharoVM
[isPharoVM
	"Answers if this VM is a valid PharoVM (made with our sources)"

	| version |
	self flag: #todo.	"We need a certain way of identify PharoVM, but in the mean time this ensures "
	version := self version.
	^ (version beginsWith: 'PharoVM')
		or: [ (version includesSubstring: 'NBCoInterpreter')
				or: [ (version includesSubstring: 'Commit: ')
						and: [ | pos |
							pos := (version findString: 'Commit: ') + 8.
							(version copyFrom: pos to: pos + 39) allSatisfy: [ :each | ($a to: $f) , ($0 to: $9) includes: each ] ] ] ]
]

VirtualMachine >> isRunningCog
[isRunningCog
	"Returns true if we're running on a Cog VM (JIT or StackInterpreter)
	 (parameterAt: 42 is the number of stack pages)"

	^ [ (self parameterAt: 42) > 0 ]
		on: Error
		do: [ :ex | ex return: false ]
]

VirtualMachine >> isRunningCogit
[isRunningCogit
	"Returns true if we're running on the Cog JIT
	 (vmParameterAt: 46 is the size of the machine code zone)"

	^ [ (self parameterAt: 46) > 0 ]
		on: Error
		do: [ :ex | ex return: false ]
]

VirtualMachine >> listBuiltinModule: index
[listBuiltinModule: index
	"Return the name of the n-th builtin module.
	This list is not sorted!"

	<primitive: 572>
	^ self primitiveFailed
]

VirtualMachine >> listBuiltinModules
[listBuiltinModules
	"Smalltalk vm listBuiltinModules"

	"Return a list of all builtin modules (e.g., plugins). Builtin plugins are those that are 
	compiled with the VM directly, as opposed to plugins residing in an external shared library. 	
	The list will include all builtin plugins regardless of whether they are currently loaded 
	or not. Note that the list returned is not sorted!"

	| modules index tname |
	modules := Array new writeStream.
	index := 1.
	[ true ]
		whileTrue: [ tname := self listBuiltinModule: index.
			tname ifNil: [ ^ modules contents ].
			modules nextPut: tname.
			index := index + 1 ]
]

VirtualMachine >> listLoadedModule: index
[listLoadedModule: index
	"Return the name of the n-th loaded module.
	This list is not sorted!"

	<primitive: 573>
	^ self primitiveFailed
]

VirtualMachine >> listLoadedModules
[listLoadedModules
	"SmalltalkImage current listLoadedModules"

	"Return a list of all currently loaded modules (e.g., plugins). Loaded modules are those that currently in use (e.g., active). The list returned will contain all currently active modules regardless of whether they're builtin (that is compiled with the VM) or external (e.g., residing in some external shared library). Note that the returned list is not sorted!"

	| modules index tname |
	modules := Array new writeStream.
	index := 1.
	[ true ]
		whileTrue: [ tname := self listLoadedModule: index.
			tname ifNil: [ ^ modules contents ].
			modules nextPut: tname.
			index := index + 1 ]
]

VirtualMachine >> loadModule: aModuleName
[loadModule: aModuleName
	"Primitive. Attempt to load a module of the given name.
	Fail if module cannot be found, or cannot be loaded,
	or failed to initialize"

	<primitive: 'primLoadModule' module: '' error: #errorCode>
	^ self primitiveFailed
]

VirtualMachine >> maxExternalSemaphores
[maxExternalSemaphores
	"The size of array in some VM's where external signals for
	semaphores in externalObjects are handled.
	Essentially, if a semaphore is registered in externalObjects outside
	its bounds, they will not be signalled."

	^ [ self parameterAt: 49 ]
		on: PrimitiveFailed
		do: [ :ex | ex return: nil ]
]

VirtualMachine >> maxExternalSemaphores: aSize
[maxExternalSemaphores: aSize
	"This method should never be called as result of normal program
	execution. If it is however, handle it differently:
	- In development, signal an error to promt user to set a bigger size
	at startup immediately.
	- In production, accept the cost of potentially unhandled interrupts,
	but log the action for later review.
	
	See comment in maxExternalObjectsSilently: why this behaviour is
	desirable, "

	"Can't find a place where development/production is decided.
	Suggest Smalltalk image inProduction, but use an overridable temp
	meanwhile. "

	| inProduction |
	self maxExternalSemaphores ifNil: [ ^ 0 ].
	inProduction := false.
	^ inProduction
		ifTrue: [ self maxExternalSemaphoresSilently: aSize.
			self
				crTrace:
						'WARNING: Had to increase size of semaphore signal handling table due to many external objects concurrently in use';
				crTrace: 'You should increase this size at startup using #maxExternalObjectsSilently:';
				crTrace: 'Current table size: ' , self maxExternalSemaphores printString ]
		ifFalse: [ "Smalltalk image"
			self error: 'Not enough space for external objects, set a larger size at startup!'	"Smalltalk image" ]
]

VirtualMachine >> maxExternalSemaphoresSilently: aSize
[maxExternalSemaphoresSilently: aSize
	"Changes the size of array where external signals for semaphores in
	externalObjects are handled.. 
	The size can only grow, and will always be the next power of two
	larger than the parameter.
	
	The intended use is to set the table size to some adequate
	maximum as part of a non-resuming image startUp.
	
	Setting this at any time other than start-up can potentially result in
	lost signals during reallocation.
	i.e. Requests handled during copying og signals from old to new array
	won't be seen if they occur to indices already copied, before
	pointers to the new and old arrays are switched."

	self maxExternalSemaphores ifNil: [ ^ 0 ].	"The vm-header field where the size is stored is a short, maximum	64k entries. 	Well, on most platforms anyways"
	(aSize < 0 or: [ aSize > 65535 ])
		ifTrue: [ ^ DomainError signalFrom: 0 to: 65535 ].
	^ self parameterAt: 49 put: aSize
]

VirtualMachine >> maxFilenameLength
[maxFilenameLength
	"Return the maximal filename length (only under MacOS)"

	"Smalltalk vm maxFilenameLength"

	^ self getSystemAttribute: 1201
]

VirtualMachine >> memoryEnd
[memoryEnd
	"end of memory"

	^ self parameterAt: 3
]

VirtualMachine >> oldSpaceEnd
[oldSpaceEnd
	"end of old-space (0-based, read-only)"

	^ self parameterAt: 1
]

VirtualMachine >> optionAt: i
[optionAt: i
	"Answer the i-th option of the command line, or nil if not so many options."

	^ self getSystemAttribute: i negated
]

VirtualMachine >> optionDash
[optionDash
	"VMs release in Mai 2013 use -- instead of - for VM command line options"

	^ Smalltalk vm interpreterSourceDate > '2013-05-17' asDate
		ifTrue: [ '--' ]
		ifFalse: [ '-' ]
]

VirtualMachine >> options
[options
	"return an array with all the options passed to the VM (up to the image) "

	^ Array
		streamContents: [ :s | Smalltalk commandLine options
				do: [ :argument | (argument endsWith: '.image')
						ifTrue: [ ^ s contents ].
					s nextPut: argument ] ]
]

VirtualMachine >> parameterAt: parameterIndex
[parameterAt: parameterIndex
	"parameterIndex is a positive integer corresponding to one of the VM's internal
	parameter/metric registers.  Answer with the current value of that register.
	Fail if parameterIndex has no corresponding register.
	VM parameters are numbered as follows:
		1	end of old-space (0-based, read-only)
		2	end of young-space (read-only)
		3	end of memory (read-only)
		4	allocationCount (read-only; nil in Cog VMs)
		5	allocations between GCs (read-write; nil in Cog VMs)
		6	survivor count tenuring threshold (read-write)
		7	full GCs since startup (read-only)
		8	total milliseconds in full GCs since startup (read-only)
		9	incremental GCs since startup (read-only)
		10	total milliseconds in incremental GCs since startup (read-only)
		11	tenures of surving objects since startup (read-only)
		12-20 specific to the translating VM
		21	root table size (read-only)
		22	root table overflows since startup (read-only)
		23	bytes of extra memory to reserve for VM buffers, plugins, etc.
		24	memory threshold above whichto shrink object memory (read-write)
		25	memory headroom when growing object memory (read-write)
		26  interruptChecksEveryNms - force an ioProcessEvents every N milliseconds (read-write)
		27	number of times mark loop iterated for current IGC/FGC (read-only) includes ALL marking
		28	number of times sweep loop iterated  for current IGC/FGC (read-only)
		29	number of times make forward loop iterated for current IGC/FGC (read-only)
		30	number of times compact move loop iterated for current IGC/FGC (read-only)
		31	number of grow memory requests (read-only)
		32	number of shrink memory requests (read-only)
		33	number of root table entries used for current IGC/FGC (read-only)
		34	number of allocations done before current IGC/FGC (read-only)
		35	number of survivor objects after current IGC/FGC (read-only)
		36  millisecond clock when current IGC/FGC completed (read-only)
		37  number of marked objects for Roots of the world, not including Root Table entries for current IGC/FGC (read-only)
		38  milliseconds taken by current IGC  (read-only)
		39  Number of finalization signals for Weak Objects pending when current IGC/FGC completed (read-only)
		40  BytesPerWord for this image
		41  imageFormatVersion for the VM
		42	number of stack pages in use (Cog Stack VM only, otherwise nil)
		43	desired number of stack pages (stored in image file header, max 65535; Cog VMs only, otherwise nil)
		44	size of eden, in bytes (Cog VMs only, otherwise nil)
		45	desired size of eden, in bytes (stored in image file header; Cog VMs only, otherwise nil)
		46	size of machine code zone, in bytes (stored in image file header; Cog JIT VM only, otherwise nil)
		47	desired size of machine code zone, in bytes (applies at startup only, stored in image file header; Cog JIT VM only)
		48	various properties of the Cog VM as an integer encoding an array of bit flags.
			 Bit 0: implies the image's Process class has threadId as its 3rd inst var (zero relative)
		49-55 reserved for VM parameters that persist in the image (such as eden above)
		56	number of process switches since startup (read-only)
		57	number of ioProcessEvents calls since startup (read-only)
		58	number of ForceInterruptCheck (Cog VMs) or quickCheckInterruptCalls (non-Cog VMs) calls since startup (read-only)
		59	number of check event calls since startup (read-only)
		60	number of stack page overflows since startup (read-only; Cog VMs only)
		61	number of stack page divorces since startup (read-only; Cog VMs only)"

	<primitive: 254>
	self primitiveFailed
]

VirtualMachine >> parameterAt: parameterIndex put: newValue
[parameterAt: parameterIndex put: newValue
	"parameterIndex is a positive integer corresponding to one of the VM's internal
	parameter/metric registers.  Store newValue (a positive integer) into that
	register and answer with the previous value that was stored there.
	Fail if newValue is out of range, if parameterIndex has no corresponding
	register, or if the corresponding register is read-only."

	<primitive: 254>
	self primitiveFailed
]

VirtualMachine >> path
[path
	"Answer the path for the directory containing the Smalltalk virtual machine. Return the 	empty string if this primitive is not implemented."

	"SmalltalkImage current vmPath"

	^ FilePathEncoder decode: self primVmPath
]

VirtualMachine >> platformSourceVersion
[platformSourceVersion
	"The use of this primitive not recommended. Not all VMs providing that"

	"Answer a string corresponding to the version of the external platform source
	code, typically written in C and managed separately for each platform. This
	invokes an optional primitive that may not be available on all virtual machines."

	"Smalltalk vm platformSourceVersion"

	<primitive: 'primitivePlatformSourceVersion'>
	self notify: 'This virtual machine does not support the optional primitive #primitivePlatformSourceVersion' translated.
	^ ''
]

VirtualMachine >> primVmPath
[primVmPath
	"Answer the path for the directory containing the Smalltalk virtual machine. Return the empty string if this primitive is not implemented."

	"Smalltalk vmPath"

	<primitive: 142>
	^ ''
]

VirtualMachine >> primitiveGCBiasToGrow: arg
[primitiveGCBiasToGrow: arg
	"Tell the VM to grow after tenures instead of running in a tight loop where it does IGCs over and over. For some weird reason the primitive takes an integer not a bool but oh well..."

	<primitive: 'primitiveSetGCBiasToGrow'>
	^ self primitiveFailed
]

VirtualMachine >> processHasThreadIdInstVar: aBoolean
[processHasThreadIdInstVar: aBoolean
	"The threaded VM needs to know if the 4th inst var of Process
	 is threadId which it uses to control process-to-thread binding.
	 This flag persists across snapshots, stored in the image header."

	aBoolean
		ifTrue: [ self assert: (Process instVarNames at: 4) = 'threadId' ].
	self parameterAt: 48 put: ((self parameterAt: 48) bitClear: 1) + aBoolean asBit
]

VirtualMachine >> processPreemptionYields
[processPreemptionYields
	"Answer whether the VM causes a process to yield on process preemption, i.e. to put a preempted process at the back of its run queue.  If the parameter is unavailable (non-Cog VMs) or bit 2 (4) is 0 then preemption yields."

	^ (([ self parameterAt: 48 ]
		on: Error
		do: [ :ex | ^ true ]) allMask: 2r100) not
]

VirtualMachine >> processPreemptionYields: aBoolean
[processPreemptionYields: aBoolean
	"The Cog VM can be instructed not to yield on process preemption, i.e. not to put a preempted process at the back of its run queue.  By default preempting a process causes it to yield (Blue Book semantics) which can have unfortunate effects. This flag persists across snapshots, stored in the image header."

	self
		parameterAt: 48
		put: ((self parameterAt: 48) bitClear: 4) + (aBoolean
						ifTrue: [ 0 ]
						ifFalse: [ 2r100 ])
]

VirtualMachine >> setGCBiasToGrow: aNumber
[setGCBiasToGrow: aNumber
	"Primitive. Indicate that the GC logic should be bias to grow"

	<primitive: 'primitiveSetGCBiasToGrow'>
	^ self primitiveFailed	"Example:	Smalltalk vm  setGCBiasToGrowGCLimit: 16*1024*1024.	Smalltalk vm setGCBiasToGrow: 1."
]

VirtualMachine >> setGCBiasToGrowGCLimit: aNumber
[setGCBiasToGrowGCLimit: aNumber
	"Primitive. Indicate that the bias to grow logic should do a GC after aNumber Bytes"

	<primitive: 'primitiveSetGCBiasToGrowGCLimit'>
	^ self primitiveFailed	"Example:	Smalltalk vm setGCBiasToGrowGCLimit: 16*1024*1024."
]

VirtualMachine >> setGCParameters
[setGCParameters
	"Adjust the VM's default GC parameters to avoid premature tenuring."

	self allocationsBetweenGC: 4000.	"do an incremental GC after this many allocations"
	self tenuringThreshold: 2000.	"tenure when more than this many objects survive the GC"
	self setGCBiasToGrowGCLimit: 16 * 1024 * 1024.
	self setGCBiasToGrow: 1
]

VirtualMachine >> setGCSemaphore: semaIndex
[setGCSemaphore: semaIndex
	"Primitive. Indicate the GC semaphore index to be signaled on GC occurance."

	<primitive: 'primitiveSetGCSemaphore'>
	^ self primitiveFailed	"Example:	| index sema process |	sema := Semaphore new.	index := Smalltalk registerExternalObject: sema.	Smalltalk setGCSemaphore: index.	process := [		[[true] whileTrue:[			sema wait.			Smalltalk beep.		]] ensure:[			Smalltalk setGCSemaphore: 0.			Smalltalk unregisterExternalObject: sema.		].	] fork.	process inspect."
]

VirtualMachine >> statisticsReport
[statisticsReport
	"Workspace openContents: (Smalltalk vm statisticsReport) label: 'VM Statistics'"

	| oldSpaceEnd youngSpaceEnd memoryEnd fullGCs fullGCTime incrGCs incrGCTime tenureCount upTime upTime2 fullGCs2 fullGCTime2 incrGCs2 incrGCTime2 tenureCount2 str |
	oldSpaceEnd := self oldSpaceEnd.
	youngSpaceEnd := self youngSpaceEnd.
	tenureCount := self tenureCount.
	memoryEnd := self memoryEnd.
	fullGCs := self fullGCCount.
	fullGCTime := self totalFullGCTime.
	incrGCs := self incrementalGCCount.
	incrGCTime := self totalIncrementalGCTime.
	upTime := Time millisecondClockValue.
	str := (String new: 1000) writeStream.
	str
		<< 'uptime			';
		print: upTime / 1000 / 60 // 60;
		nextPut: $h;
		print: (upTime / 1000 / 60 \\ 60) asInteger;
		nextPut: $m;
		print: (upTime / 1000 \\ 60) asInteger;
		nextPut: $s;
		cr.
	str << 'memory			'.
	memoryEnd printWithCommasOn: str.
	str
		<< ' bytes';
		cr.
	str << '	old			'.
	oldSpaceEnd printWithCommasOn: str.
	str
		<< ' bytes (';
		print: (oldSpaceEnd / memoryEnd * 100 roundTo: 0.1);
		<< '%)';
		cr.
	str << '	young		'.
	youngSpaceEnd - oldSpaceEnd printWithCommasOn: str.
	str
		<< ' bytes (';
		print: ((youngSpaceEnd - oldSpaceEnd) / memoryEnd * 100 roundTo: 0.1);
		<< '%)';
		cr.
	str << '	used		'.
	youngSpaceEnd printWithCommasOn: str.
	str
		<< ' bytes (';
		print: (youngSpaceEnd / memoryEnd * 100 roundTo: 0.1);
		<< '%)';
		cr.
	str << '	free		'.
	memoryEnd - youngSpaceEnd printWithCommasOn: str.
	str
		<< ' bytes (';
		print: ((memoryEnd - youngSpaceEnd) / memoryEnd * 100 roundTo: 0.1);
		<< '%)';
		cr.
	str << 'GCs				'.
	fullGCs + incrGCs printWithCommasOn: str.
	fullGCs + incrGCs > 0
		ifTrue: [ str
				<< ' (';
				print: (upTime / (fullGCs + incrGCs) roundTo: 1);
				<< 'ms between GCs)' ].
	str cr.
	str
		<< '	full			';
		print: fullGCs;
		<< ' totalling '.
	fullGCTime printWithCommasOn: str.
	str
		<< 'ms (';
		print: (fullGCTime / upTime * 100 roundTo: 0.1);
		<< '% uptime)'.
	fullGCs = 0
		ifFalse: [ str
				<< ', avg ';
				print: (fullGCTime / fullGCs roundTo: 0.1);
				<< 'ms' ].
	str cr.
	str
		<< '	incr		';
		print: incrGCs;
		<< ' totalling '.
	incrGCTime printWithCommasOn: str.
	str
		<< 'ms (';
		print: (incrGCTime / upTime * 100 roundTo: 0.1);
		<< '% uptime), avg ';
		print: (incrGCTime / incrGCs roundTo: 0.1);
		<< 'ms';
		cr.
	str << '	tenures		'.
	tenureCount printWithCommasOn: str.
	tenureCount = 0
		ifFalse: [ str
				<< ' (avg ';
				print: (incrGCs / tenureCount) asInteger;
				<< ' GCs/tenure)' ].
	str cr.
	LastStats
		ifNil: [ LastStats := Array new: 6 ]
		ifNotNil: [ upTime2 := upTime - (LastStats at: 1).
			fullGCs2 := fullGCs - (LastStats at: 2).
			fullGCTime2 := fullGCTime - (LastStats at: 3).
			incrGCs2 := incrGCs - (LastStats at: 4).
			incrGCTime2 := incrGCTime - (LastStats at: 5).
			tenureCount2 := tenureCount - (LastStats at: 6).
			str << 'Since last view	'.
			fullGCs2 + incrGCs2 printWithCommasOn: str.
			fullGCs2 + incrGCs2 > 0
				ifTrue: [ str
						<< ' (';
						print: (upTime2 / (fullGCs2 + incrGCs2) roundTo: 1);
						<< 'ms between GCs)' ].
			str cr.
			str
				<< '	uptime		';
				print: (upTime2 / 1000.0 roundTo: 0.1);
				<< 's';
				cr.
			str
				<< '	full			';
				print: fullGCs2;
				<< ' totalling '.
			fullGCTime2 printWithCommasOn: str.
			str
				<< 'ms (';
				print: (fullGCTime2 / upTime2 * 100 roundTo: 0.1);
				<< '% uptime)'.
			fullGCs2 = 0
				ifFalse: [ str
						<< ', avg ';
						print: (fullGCTime2 / fullGCs2 roundTo: 0.1);
						<< 'ms' ].
			str cr.
			str
				<< '	incr		';
				print: incrGCs2;
				<< ' totalling '.
			incrGCTime2 printWithCommasOn: str.
			str
				<< 'ms (';
				print: (incrGCTime2 / upTime2 * 100 roundTo: 0.1);
				<< '% uptime), avg '.
			incrGCs2 > 0
				ifTrue: [ str
						print: (incrGCTime2 / incrGCs2 roundTo: 0.1);
						<< 'ms' ].
			str cr.
			str << '	tenures		'.
			tenureCount2 printWithCommasOn: str.
			tenureCount2 = 0
				ifFalse: [ str
						<< ' (avg ';
						print: (incrGCs2 / tenureCount2) asInteger;
						<< ' GCs/tenure)' ].
			str cr ].
	LastStats at: 1 put: upTime.
	LastStats at: 2 put: fullGCs.
	LastStats at: 3 put: fullGCTime.
	LastStats at: 4 put: incrGCs.
	LastStats at: 5 put: incrGCTime.
	LastStats at: 6 put: tenureCount.
	^ str contents
]

VirtualMachine >> tenureCount
[tenureCount
	"tenures of surving objects since startup (read-only)."

	^ self parameterAt: 11
]

VirtualMachine >> tenuringThreshold
[tenuringThreshold
	"survivor count tenuring threshold (read-write)"

	^ self parameterAt: 6
]

VirtualMachine >> tenuringThreshold: anInteger
[tenuringThreshold: anInteger
	"survivor count tenuring threshold (read-write).
	tenure when more than this many objects survive the GC"

	^ self parameterAt: 6 put: anInteger
]

VirtualMachine >> totalFullGCTime
[totalFullGCTime
	"Answer the total time in milliseconds spent in full GCs since startup (read-only)."

	^ self parameterAt: 8
]

VirtualMachine >> totalGCTime
[totalGCTime
	^ self totalFullGCTime + self totalIncrementalGCTime
]

VirtualMachine >> totalIncrementalGCTime
[totalIncrementalGCTime
	"Answer the total time in milliseconds spent in incremental GCs since startup (read-only)."

	^ self parameterAt: 10
]

VirtualMachine >> unloadModule: aString
[unloadModule: aString
	"Primitive. Unload the given module.
	This primitive is intended for development only since some
	platform do not implement unloading of DLL's accordingly.
	Also, the mechanism for unloading may not be supported
	on all platforms."

	<primitive: 571>
	^ self primitiveFailed
]

VirtualMachine >> version
[version
	"Return a string of attributes representing the current VM"

	"
	Smalltalk vm version
	"

	^ String
		streamContents: [ :s | s
				nextPutAll: self interpreterClass;
				cr.
			self isRunningCogit
				ifTrue: [ s
						nextPutAll: self cogitClass;
						cr ].
			s
				nextPutAll: self interpreterSourceVersion;
				cr ]
]

VirtualMachine >> versionLabel
[versionLabel
	"The use of this primitive not recommended. Not all VMs providing that"

	"Answer a string corresponding to the version of virtual machine. This
	represents the version level of the Smalltalk source code (interpreter
	and various plugins) that is translated to C by a CCodeGenerator,  in
	addition to the external platform source code, typically written in C and
	managed separately for each platform.
	
	This invokes an optional primitive that may not be available on all virtual
	machines. See also vmVersion, which answers a string identifying the image
	from which virtual machine sources were generated."

	"Smalltalk vm versionLabel"

	<primitive: 'primitiveVMVersion'>
	self notify: 'This virtual machine does not support the optional primitive #primitiveVMVersion' translated.
	^ ''
]

VirtualMachine >> vmDirectory
[vmDirectory
	^ self directory
]

VirtualMachine >> vmFileName
[vmFileName
	^ self fileName
]

VirtualMachine >> voidCogVMState
[voidCogVMState
	"Void any internal caches the VM maintains other than the method lookup caches.
	 These comprise
		- the stack zone, where method activations are stored, and
		- the machine code zone, where the machine code form of CompiledMethods is held."

	<primitive: 214>
	^ self primitiveFailed
]

VirtualMachine >> wordSize
[wordSize
	^ WordSize ifNil: [ WordSize := [ self parameterAt: 40 ]
				on: Error
				do: [ 4 ] ]
]

VirtualMachine >> youngSpaceEnd
[youngSpaceEnd
	"end of young-space"

	^ self parameterAt: 2
]

