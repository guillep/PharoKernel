ArrayedCollection
	superclass: #SequenceableCollection;
	package: #'Collections-Abstract'.

ArrayedCollection >> add: newObject
add: newObject
	self shouldNotImplement

ArrayedCollection >> byteSize
byteSize
	^ self basicSize * self bytesPerBasicElement

ArrayedCollection >> bytesPerBasicElement
bytesPerBasicElement
	"Answer the number of bytes that each of my basic elements requires.
	In other words:
		self basicSize * self bytesPerBasicElement
	should equal the space required on disk by my variable sized representation."

	^ self class isBytes
		ifTrue: [ 1 ]
		ifFalse: [ 4 ]

ArrayedCollection >> defaultElement
defaultElement
	^ nil

ArrayedCollection >> fillFrom: aCollection with: aBlock
fillFrom: aCollection with: aBlock
	"Evaluate aBlock with each of aCollections's elements as the argument.  
	Collect the resulting values into self. Answer self."

	| index |
	index := 0.
	aCollection do: [ :each | self at: (index := index + 1) put: (aBlock value: each) ]

ArrayedCollection >> removeAll
removeAll
	self shouldNotImplement

ArrayedCollection >> restoreEndianness
restoreEndianness
	"This word object was just read in from a stream.  It was stored in Big Endian (Mac) format.  Reverse the byte order if the current machine is Little Endian.
 	We only intend this for non-pointer arrays.  Do nothing if I contain pointers."

	self class isPointers | self class isWords not
		ifTrue: [ ^ self ].
	Smalltalk isLittleEndian
		ifTrue: [ Bitmap swapBytesIn: self from: 1 to: self basicSize ]

ArrayedCollection >> size
size
	"Answer how many elements the receiver contains."

	<primitive: 62>
	^ self basicSize

ArrayedCollection >> storeElementsFrom: firstIndex to: lastIndex on: aStream
storeElementsFrom: firstIndex to: lastIndex on: aStream
	| noneYet defaultElement arrayElement |
	noneYet := true.
	defaultElement := self defaultElement.
	firstIndex to: lastIndex do: [ :index | arrayElement := self at: index.
		arrayElement = defaultElement
			ifFalse: [ noneYet
					ifTrue: [ noneYet := false ]
					ifFalse: [ aStream nextPut: $; ].
				aStream nextPutAll: ' at: '.
				aStream store: index.
				aStream nextPutAll: ' put: '.
				aStream store: arrayElement ] ].
	^ noneYet

ArrayedCollection >> storeOn: aStream
storeOn: aStream
	aStream nextPutAll: '(('.
	aStream nextPutAll: self class name.
	aStream nextPutAll: ' new: '.
	aStream store: self size.
	aStream nextPut: $).
	(self storeElementsFrom: 1 to: self size on: aStream)
		ifFalse: [ aStream nextPutAll: '; yourself' ].
	aStream nextPut: $)

ArrayedCollection >> swapHalves
swapHalves
	"A normal switch in endianness (byte order in words) reverses the order of 4 bytes.  That is not correct for SoundBuffers, which use 2-bytes units.  If a normal switch has be done, this method corrects it further by swapping the two halves of the long word.
 	This method is only used for 16-bit quanities in SoundBuffer, ShortIntegerArray, etc."

	| hack blt |
	"The implementation is a hack, but fast for large ranges"
	hack := Form new hackBits: self.
	blt := (BitBlt toForm: hack) sourceForm: hack.
	blt combinationRule: Form reverse.	"XOR"
	blt
		sourceY: 0;
		destY: 0;
		height: self size;
		width: 2.
	blt
		sourceX: 0;
		destX: 2;
		copyBits.	"Exchange bytes 0&1 with 2&3"
	blt
		sourceX: 2;
		destX: 0;
		copyBits.
	blt
		sourceX: 0;
		destX: 2;
		copyBits

ArrayedCollection >> writeOn: aStream
writeOn: aStream
	"Store the array of bits onto the argument, aStream.  (leading byte ~= 16r80) identifies this as raw bits (uncompressed).  Always store in Big Endian (Mac) byte order.  Do the writing at BitBlt speeds. We only intend this for non-pointer arrays.  Do nothing if I contain pointers."

	(self class isPointers or: [ self class isWords not ])
		ifTrue: [ ^ self ].
	aStream nextInt32Put: self basicSize.
	aStream nextWordsPutAll: self

ArrayedCollection class >> new
new
	"Answer a new instance of me, with size = 0."

	^ self new: 0

ArrayedCollection class >> new: size withAll: value
new: size withAll: value
	"Answer an instance of me, with number of elements equal to size, each 
	of which refers to the argument, value."

	^ (self new: size) atAllPut: value

ArrayedCollection class >> newFrom: aCollection
newFrom: aCollection
	"Answer an instance of me containing the same elements as aCollection."

	| newArray |
	newArray := self new: aCollection size.
	1 to: aCollection size do: [ :i | newArray at: i put: (aCollection at: i) ].
	^ newArray	"	Array newFrom: {1. 2. 3}	{1. 2. 3} as: Array	{1. 2. 3} as: ByteArray	{$c. $h. $r} as: String	{$c. $h. $r} as: Text"

ArrayedCollection class >> newFromStream: s
newFromStream: s
	"Only meant for my subclasses that are raw bits and word-like.  For quick unpack form the disk."

	| len |
	self isPointers not & self isWords
		ifFalse: [ self error: 'This method is only meant for raw bits and word-like subclasses ' ].
	s next = 16r80
		ifTrue: [ 
			"A compressed format.  Could copy what BitMap does, or use a 		special sound compression format.  Callers normally compress their own way."
			^ self error: 'not implemented' ].
	s skip: -1.
	len := s nextInt32.
	^ s nextWordsInto: (self basicNew: len)

ArrayedCollection class >> with: anObject
with: anObject
	"Answer a new instance of me, containing only anObject."

	| newCollection |
	newCollection := self new: 1.
	newCollection at: 1 put: anObject.
	^ newCollection

ArrayedCollection class >> with: firstObject with: secondObject
with: firstObject with: secondObject
	"Answer a new instance of me, containing firstObject and secondObject."

	| newCollection |
	newCollection := self new: 2.
	newCollection at: 1 put: firstObject.
	newCollection at: 2 put: secondObject.
	^ newCollection

ArrayedCollection class >> with: firstObject with: secondObject with: thirdObject
with: firstObject with: secondObject with: thirdObject
	"Answer a new instance of me, containing only the three arguments as
	elements."

	| newCollection |
	newCollection := self new: 3.
	newCollection at: 1 put: firstObject.
	newCollection at: 2 put: secondObject.
	newCollection at: 3 put: thirdObject.
	^ newCollection

ArrayedCollection class >> with: firstObject with: secondObject with: thirdObject with: fourthObject
with: firstObject with: secondObject with: thirdObject with: fourthObject
	"Answer a new instance of me, containing only the three arguments as
	elements."

	| newCollection |
	newCollection := self new: 4.
	newCollection at: 1 put: firstObject.
	newCollection at: 2 put: secondObject.
	newCollection at: 3 put: thirdObject.
	newCollection at: 4 put: fourthObject.
	^ newCollection

ArrayedCollection class >> with: firstObject with: secondObject with: thirdObject with: fourthObject with: fifthObject
with: firstObject with: secondObject with: thirdObject with: fourthObject with: fifthObject
	"Answer a new instance of me, containing only the five arguments as
	elements."

	| newCollection |
	newCollection := self new: 5.
	newCollection at: 1 put: firstObject.
	newCollection at: 2 put: secondObject.
	newCollection at: 3 put: thirdObject.
	newCollection at: 4 put: fourthObject.
	newCollection at: 5 put: fifthObject.
	^ newCollection

ArrayedCollection class >> with: firstObject with: secondObject with: thirdObject with: fourthObject with: fifthObject with: sixthObject
with: firstObject with: secondObject with: thirdObject with: fourthObject with: fifthObject with: sixthObject
	"Answer a new instance of me, containing only the 6 arguments as elements."

	| newCollection |
	newCollection := self new: 6.
	newCollection at: 1 put: firstObject.
	newCollection at: 2 put: secondObject.
	newCollection at: 3 put: thirdObject.
	newCollection at: 4 put: fourthObject.
	newCollection at: 5 put: fifthObject.
	newCollection at: 6 put: sixthObject.
	^ newCollection

ArrayedCollection class >> withAll: aCollection
withAll: aCollection
	"Create a new collection containing all the elements from aCollection."

	^ (self new: aCollection size) replaceFrom: 1 to: aCollection size with: aCollection

