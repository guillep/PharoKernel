WordArray
	superclass: #ArrayedCollection;
	instanceSpecification: #(#variable #words );
	package: #'Collections-Native'.

WordArray >> asWordArray
asWordArray
	^ self

WordArray >> atAllPut: value
atAllPut: value
	"Fill the receiver with the given value"

	<primitive: 145>
	super atAllPut: value

WordArray >> byteSize
byteSize
	^ self size * 4

WordArray >> defaultElement
defaultElement
	"Return the default element of the receiver"

	^ 0

WordArray >> primAddArray: rcvr and: other into: result
primAddArray: rcvr and: other into: result
	"^ KedamaPlugin doPrimitive: #primitiveAddArrays."

	<primitive: 'primitiveAddArrays' module: 'KedamaPlugin'>
	1 to: rcvr size do: [ :i | result at: i put: (rcvr at: i) + (other at: i) ].
	^ result

WordArray >> primAddScalar: rcvr and: other into: result
primAddScalar: rcvr and: other into: result
	"^ KedamaPlugin doPrimitive: #primitiveAddScalar."

	<primitive: 'primitiveAddScalar' module: 'KedamaPlugin'>
	1 to: rcvr size do: [ :i | result at: i put: (rcvr at: i) + other ].
	^ result

WordArray >> primDivArray: rcvr and: other into: result
primDivArray: rcvr and: other into: result
	"^ KedamaPlugin doPrimitive: #primitiveDivArrays."

	<primitive: 'primitiveDivArrays' module: 'KedamaPlugin'>
	1 to: rcvr size do: [ :i | result at: i put: (rcvr at: i) / (other at: i) ].
	^ result

WordArray >> primDivScalar: rcvr and: other into: result
primDivScalar: rcvr and: other into: result
	"^ KedamaPlugin doPrimitive: #primitiveDivScalar."

	<primitive: 'primitiveDivScalar' module: 'KedamaPlugin'>
	1 to: rcvr size do: [ :i | result at: i put: (rcvr at: i) / other ].
	^ result

WordArray >> primMulArray: rcvr and: other into: result
primMulArray: rcvr and: other into: result
	"^ KedamaPlugin doPrimitive: #primitiveMulArrays."

	<primitive: 'primitiveMulArrays' module: 'KedamaPlugin'>
	1 to: rcvr size do: [ :i | result at: i put: (rcvr at: i) * (other at: i) ].
	^ result

WordArray >> primMulScalar: rcvr and: other into: result
primMulScalar: rcvr and: other into: result
	"^ KedamaPlugin doPrimitive: #primitiveMulScalar."

	<primitive: 'primitiveMulScalar' module: 'KedamaPlugin'>
	1 to: rcvr size do: [ :i | result at: i put: (rcvr at: i) * other ].
	^ result

WordArray >> primSubArray: rcvr and: other into: result
primSubArray: rcvr and: other into: result
	"^ KedamaPlugin doPrimitive: #primitiveSubArrays."

	<primitive: 'primitiveSubArrays' module: 'KedamaPlugin'>
	1 to: rcvr size do: [ :i | result at: i put: (rcvr at: i) - (other at: i) ].
	^ result

WordArray >> primSubScalar: rcvr and: other into: result
primSubScalar: rcvr and: other into: result
	"^ KedamaPlugin doPrimitive: #primitiveSubScalar."

	<primitive: 'primitiveSubScalar' module: 'KedamaPlugin'>
	1 to: rcvr size do: [ :i | result at: i put: (rcvr at: i) - other ].
	^ result

WordArray >> replaceFrom: start to: stop with: replacement startingAt: repStart
replaceFrom: start to: stop with: replacement startingAt: repStart
	<primitive: 105>
	^ super
		replaceFrom: start
		to: stop
		with: replacement
		startingAt: repStart

