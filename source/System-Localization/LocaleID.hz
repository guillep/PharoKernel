LocaleID
	instanceVariables: #(#isoLanguage #isoCountry );
	package: #'System-Localization'.

LocaleID >> = anotherObject
[
	self class == anotherObject class
		ifFalse: [ ^ false ].
	^ self isoLanguage = anotherObject isoLanguage and: [ self isoCountry = anotherObject isoCountry ]
]

LocaleID >> displayCountry
[
	^ ISOLanguageDefinition iso2Countries at: self isoCountry asUppercase ifAbsent: [ self isoCountry ]
]

LocaleID >> displayLanguage
[
	| language |
	language := (ISOLanguageDefinition iso2LanguageTable at: self isoLanguage ifAbsent: [ ^ self isoLanguage ]) language.
	^ self isoCountry ifNil: [ language ] ifNotNil: [ language , ' (' , self displayCountry , ')' ]
]

LocaleID >> hasParent
[
	^ self isoCountry notNil
]

LocaleID >> hash
[
	^ self isoLanguage hash bitXor: self isoCountry hash
]

LocaleID >> isoCountry
[
	^ isoCountry
]

LocaleID >> isoLanguage
[
	^ isoLanguage
]

LocaleID >> isoLanguage: langString isoCountry: countryStringOrNil
[
	isoLanguage := langString.
	isoCountry := countryStringOrNil
]

LocaleID >> isoString
[
	^ self asString
]

LocaleID >> parent
[
	^ self class isoLanguage: self isoLanguage
]

LocaleID >> posixName
[
	"(LocaleID isoString: 'es-MX') posixName"

	"(LocaleID isoString: 'es') posixName"

	"language[_territory]"

	^ self isoCountry ifNil: [ self isoLanguage ] ifNotNil: [ self isoLanguage , '_' , self isoCountry ]
]

LocaleID >> printOn: stream
[
	"<language>-<country>"

	stream nextPutAll: self isoLanguage.
	self isoCountry ifNotNil: [ stream
				nextPut: $-;
				nextPutAll: self isoCountry ]
]

LocaleID >> storeOn: aStream
[
	aStream nextPut: $(.
	aStream nextPutAll: self class name.
	aStream nextPutAll: ' isoString: '.
	aStream nextPutAll: '''' , self printString , ''''.
	aStream nextPut: $)
]

LocaleID class >> current
[
	^ Locale current localeID
]

LocaleID class >> isoLanguage: langString
[
	^ self isoLanguage: langString isoCountry: nil
]

LocaleID class >> isoLanguage: langString isoCountry: countryStringOrNil
[
	^ self new isoLanguage: langString isoCountry: countryStringOrNil
]

LocaleID class >> isoString: isoString
[
	"Parse the isoString (<language>-<country>) into its components and return the matching LocaleID"

	"LocaleID isoString: 'en' "

	"LocaleID isoString: 'en-us' "

	| parts language country |
	parts := isoString findTokens: #($-).
	language := parts first.
	parts size > 1
		ifTrue: [ country := parts second ].
	^ self isoLanguage: language isoCountry: country
]

LocaleID class >> posixName: aString
[
	^ self isoString: (aString copyReplaceAll: '_' with: '-')
]

LocaleID class >> previous
[
	^ Locale previous localeID
]

