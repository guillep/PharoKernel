Class
	name: #MemoryFileSystemDirectory;
	superclass: #ClassMemoryFileSystemEntry;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#entries );
	classVariables: #();
	package: #'FileSystem-Memory'.

Class MemoryFileSystemDirectory >> ensureDirectory: aDirectoryName
[
^ self fileEntryAt: aDirectoryName put: (MemoryFileSystemDirectory named: aDirectoryName)
]

Class MemoryFileSystemDirectory >> ensureFile: aFileName
[
^ self fileEntryAt: aFileName put: (MemoryFileSystemFile named: aFileName)
]

Class MemoryFileSystemDirectory >> entries
[
^ entries
]

Class MemoryFileSystemDirectory >> fileEntriesDo: aBlock
[
entries keys sorted do: [ :fileName | aBlock value: (entries at: fileName) ]
]

Class MemoryFileSystemDirectory >> fileEntryAt: aFIleName
[
^ entries at: aFIleName
]

Class MemoryFileSystemDirectory >> fileEntryAt: aFileName ifAbsent: aBlock
[
^ entries at: aFileName ifAbsent: aBlock
]

Class MemoryFileSystemDirectory >> fileEntryAt: aFileName ifPresent: aBlock
[
^ entries at: aFileName ifPresent: aBlock
]

Class MemoryFileSystemDirectory >> fileEntryAt: aFIleName put: anEntry
[
^ entries	at: aFIleName	ifAbsentPut: [ 		self modified.		anEntry ]
]

Class MemoryFileSystemDirectory >> fileSize
[
^ 0
]

Class MemoryFileSystemDirectory >> includes: aFIleName
[
^ entries includesKey: aFIleName
]

Class MemoryFileSystemDirectory >> initialize
[
super initialize.entries := Dictionary new
]

Class MemoryFileSystemDirectory >> isDirectory
[
^ true
]

Class MemoryFileSystemDirectory >> remove: aFileName
[
modificationTime := DateAndTime now.^ entries removeKey: aFileName
]

Metaclass
	name: #MemoryFileSystemDirectory;
	instanceVariables: #().

