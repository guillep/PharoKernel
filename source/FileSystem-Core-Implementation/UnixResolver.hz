UnixResolver
	superclass: #PlatformResolver;
	package: #'FileSystem-Core-Implementation'.

UnixResolver >> desktop
[
	^ (self xdgUserDir: 'DESKTOP') ifNil: [ self home / 'Desktop' ]
]

UnixResolver >> documents
[
	^ (self xdgUserDir: 'DOCUMENTS') ifNil: [ self home / 'Documents' ]
]

UnixResolver >> home
[
	"Value of the $HOME environment variable. When NativeBoost is not available, do your best to answer something not too stupid."

	^ [ self resolveString: (self nbGetEnv: 'HOME') ]
		on: Error
		do: [ (self resolveString: self class primitiveGetUntrustedUserDirectory) parent parent parent	"don't know any better default" ]
]

UnixResolver >> nbGetEnv: str
[
	"This method calls a Standard C library getenv() function"

	<primitive: #primitiveNativeCall module: #NativeBoostPlugin error: #errorCode>
	^ self nbCall: #(#String #getenv #(#String #str)) module: NativeBoost CLibrary
]

UnixResolver >> preferences
[
	"Value of $XDG_CONFIG_HOME or, if unset, $HOME/.config"

	"http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html"

	^ (self nbGetEnv: 'XDG_CONFIG_HOME') ifNotNil: [ :home | self resolveString: home ] ifNil: [ self home / '.config' ]
]

UnixResolver >> xdgParseUserDirLine: aStream
[
	"Format is XDG_xxx_DIR="

	"$HOME/yyy"

	", where yyy is a shell-escaped homedir-relative path, or XDG_xxx_DIR="

	"/yyy"

	", where /yyy is an absolute path. No other format is supported."

	| path firstChar |
	aStream next = $"
		ifFalse: [ ^ nil ].
	firstChar := aStream next.
	(#($$ $/) includes: firstChar)
		ifFalse: [ ^ nil ].
	path := firstChar = $$
		ifTrue: [ (aStream next: 5) = 'HOME/'
				ifFalse: [ ^ nil ].
			self home / (aStream upTo: $") ]
		ifFalse: [ self resolveString: '/' , (aStream upTo: $") ].
	^ path isDirectory
		ifTrue: [ path ]
		ifFalse: [ nil ]
]

UnixResolver >> xdgUserDir: userDirName
[
	"Read ~/.config/user-dirs.dirs to find the directory of userDirName (e.g., 'DESKTOP')"

	"http://freedesktop.org/wiki/Software/xdg-user-dirs"

	"This file is written by xdg-user-dirs-update If you want to change or add directories, just edit the line you're interested in. All local changes will be retained on the next run Format is XDG_xxx_DIR="

	"$HOME/yyy"

	", where yyy is a shell-escaped homedir-relative path, or XDG_xxx_DIR="

	"/yyy"

	", where /yyy is an absolute path. No other format is supported."

	| configFile |
	configFile := self preferences / 'user-dirs.dirs'.
	(configFile isFile and: [ configFile isReadable ])
		ifFalse: [ ^ nil ].
	configFile
		readStreamDo: [ :stream | [ stream atEnd ]
				whileFalse: [ (stream peek ~= $# and: [ (stream upTo: $=) = ('XDG_' , userDirName , '_DIR') ])
						ifTrue: [ ^ self xdgParseUserDirLine: stream ]
						ifFalse: [ stream nextLine ] ] ].
	^ nil
]

UnixResolver class >> platformName
[
	^ 'unix'
]

