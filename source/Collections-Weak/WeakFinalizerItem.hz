WeakFinalizerItem
	instanceSpecification: #(#variable #weak #pointers #words );
	instanceVariables: #(#list #next #executor );
	package: #'Collections-Weak'.

WeakFinalizerItem >> add: newExecutor
[
	executor
		ifNil: [ executor := newExecutor ]
		ifNotNil: [ executor hasMultipleExecutors
				ifTrue: [ executor add: newExecutor ]
				ifFalse: [ executor := ObjectFinalizerCollection with: executor with: newExecutor ] ]
]

WeakFinalizerItem >> clear
[
	list := next := nil
]

WeakFinalizerItem >> copyWithList: aList
[
	^ self copy list: aList
]

WeakFinalizerItem >> executor
[
	^ executor
]

WeakFinalizerItem >> finalizeValues
[
	" cleanup the receiver, so it could be reused "

	| ex |
	ex := executor.
	executor := nil.
	next := nil.
	ex finalize
]

WeakFinalizerItem >> list
[
	^ list
]

WeakFinalizerItem >> list: aList
[
	list := aList
]

WeakFinalizerItem >> list: weakFinalizationList object: anObject
[
	self assert: weakFinalizationList class == WeakFinalizationList.
	list := weakFinalizationList.
	self at: 1 put: anObject
]

WeakFinalizerItem >> list: weakFinalizationList object: anObject executor: anExecutor
[
	self assert: weakFinalizationList class == WeakFinalizationList.
	list := weakFinalizationList.
	self at: 1 put: anObject.
	executor := anExecutor
]

WeakFinalizerItem >> next
[
	^ next
]

WeakFinalizerItem >> object
[
	^ self at: 1
]

WeakFinalizerItem >> postCopy
[
	executor hasMultipleExecutors
		ifTrue: [ executor := executor copy ]
]

WeakFinalizerItem class >> new
[
	^ self basicNew: 1
]

object
[object
	^ self at: 1
]

WeakFinalizerItem >> postCopy
[postCopy
	executor hasMultipleExecutors
		ifTrue: [ executor := executor copy ]
]

WeakFinalizerItem class >> new
[new
	^ self basicNew: 1
]

