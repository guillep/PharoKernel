LanguageEnvironment
	instanceVariables: #(#id );
	classVariables: #(#KnownEnvironments #InputInterpreterClass #FileNameConverter #SystemConverter #Current #ClipboardInterpreterClass );
	package: #'Multilingual-Languages'.

LanguageEnvironment >> isoCountry
[
	^ self localeID isoCountry
]

LanguageEnvironment >> isoLanguage
[
	^ self localeID isoLanguage
]

LanguageEnvironment >> leadingChar
[
	^ self class leadingChar
]

LanguageEnvironment >> localeID
[
	^ id
]

LanguageEnvironment >> localeID: anID
[
	id := anID
]

LanguageEnvironment class >> canBeGlobalVarInitial: char
[
	^ Unicode canBeGlobalVarInitial: char
]

LanguageEnvironment class >> canBeNonGlobalVarInitial: char
[
	^ Unicode canBeNonGlobalVarInitial: char
]

LanguageEnvironment class >> clearDefault
[
	SystemConverter := nil.
	FileNameConverter := nil
]

LanguageEnvironment class >> currentPlatform
[
	^ Locale currentPlatform languageEnvironment
]

LanguageEnvironment class >> defaultFileNameConverter
[
	FileNameConverter ifNil: [ FileNameConverter := self currentPlatform class fileNameConverterClass new ].
	^ FileNameConverter
]

LanguageEnvironment class >> defaultSystemConverter
[
	SystemConverter ifNil: [ SystemConverter := self currentPlatform class systemConverterClass new ].
	^ SystemConverter
]

LanguageEnvironment class >> digitValueOf: char
[
	"Answer 0-9 if the receiver is $0-$9, 10-35 if it is $A-$Z, and < 0
	otherwise. This is used to parse literal numbers of radix 2-36."

	^ Unicode digitValueOf: char
]

LanguageEnvironment class >> fileNameConverterClass
[
	^ UTF8TextConverter
]

LanguageEnvironment class >> initKnownEnvironments
[
	"LanguageEnvironment initKnownEnvironments"

	| known |
	known := Dictionary new.
	self
		allSubclassesDo: [ :subClass | subClass supportedLanguages
				do: [ :language | | env id |
					env := subClass new.
					id := LocaleID isoString: language.
					env localeID: id.
					known at: id put: env ] ].
	^ known
]

LanguageEnvironment class >> initialize
[
	"LanguageEnvironment initialize"

	Smalltalk addToStartUpList: LanguageEnvironment
]

LanguageEnvironment class >> isBreakableAt: index in: text
[
	| char |
	char := text at: index.
	char = Character space
		ifTrue: [ ^ true ].
	char = Character cr
		ifTrue: [ ^ true ].
	^ false
]

LanguageEnvironment class >> isCharset
[
	^ false
]

LanguageEnvironment class >> isDigit: char
[
	^ Unicode isDigit: char
]

LanguageEnvironment class >> isLetter: char
[
	^ Unicode isLetter: char
]

LanguageEnvironment class >> isLowercase: char
[
	^ Unicode isLowercase: char
]

LanguageEnvironment class >> isUppercase: char
[
	^ Unicode isUppercase: char
]

LanguageEnvironment class >> knownEnvironments
[
	"LanguageEnvironment knownEnvironments"

	"KnownEnvironments := nil"

	^ KnownEnvironments ifNil: [ KnownEnvironments := self initKnownEnvironments ]
]

LanguageEnvironment class >> leadingChar
[
	self subclassResponsibility.
	^ 0
]

LanguageEnvironment class >> localeChanged
[
	self startUp
]

LanguageEnvironment class >> localeID: localeID
[
	self knownEnvironments at: localeID ifPresent: [ :value | ^ value ].
	^ self knownEnvironments
		at: (LocaleID isoLanguage: localeID isoLanguage)
		ifAbsent: [ self localeID: (LocaleID isoLanguage: 'en') ]
]

LanguageEnvironment class >> resetKnownEnvironments
[
	"LanguageEnvironment resetKnownEnvironments"

	KnownEnvironments := nil
]

LanguageEnvironment class >> scanSelector
[
	^ #scanMultiCharactersFrom:to:in:rightX:stopConditions:kern:
]

LanguageEnvironment class >> startUp
[
	self clearDefault
]

LanguageEnvironment class >> supportedLanguages
[
	"Return the languages that this class supports. 
	Any translations for those languages will use this class as their environment."

	self subclassResponsibility
]

LanguageEnvironment class >> systemConverterClass
[
	self subclassResponsibility.
	^ Latin1TextConverter
]

