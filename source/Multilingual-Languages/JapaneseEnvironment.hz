JapaneseEnvironment
	superclass: #LanguageEnvironment;
	package: #'Multilingual-Languages'.

JapaneseEnvironment class >> fromJISX0208String: aString
[
	^ aString collect: [ :each | Character leadingChar: JapaneseEnvironment leadingChar code: each asUnicode ]
]

JapaneseEnvironment class >> isBreakableAt: index in: text
[
	| prev |
	index = 1
		ifTrue: [ ^ false ].
	prev := text at: index - 1.
	prev leadingChar ~= JapaneseEnvironment leadingChar
		ifTrue: [ ^ true ].
	^ (('、。，．・：；？！゛゜´｀¨＾―‐／\〜‖｜…‥’”）〕］｝〉》」』】°′″℃' includes: (text at: index)) or: [ '‘“（〔［｛〈《「『【°′″℃＠§' includes: prev ])
		not
]

JapaneseEnvironment class >> leadingChar
[
	^ 5
]

JapaneseEnvironment class >> scanSelector
[
	^ #scanJapaneseCharactersFrom:to:in:rightX:stopConditions:kern:
]

JapaneseEnvironment class >> supportedLanguages
[
	"Return the languages that this class supports. 
	Any translations for those languages will use this class as their environment."

	^ #('ja' 'ja-etoys')
]

JapaneseEnvironment class >> systemConverterClass
[
	| encoding |
	OSPlatform isWin32
		ifTrue: [ ^ ShiftJISTextConverter ].
	OSPlatform isMacOS
		ifTrue: [ ^ UTF8TextConverter ].
	OSPlatform isUnix
		ifTrue: [ encoding := X11Encoding encoding.
			encoding ifNil: [ ^ EUCJPTextConverter ].
			encoding = 'utf-8'
				ifTrue: [ ^ UTF8TextConverter ].
			(encoding = 'shiftjis' or: [ encoding = 'sjis' ])
				ifTrue: [ ^ ShiftJISTextConverter ].
			^ EUCJPTextConverter ].
	^ UTF8TextConverter
]

JapaneseEnvironment class >> traditionalCharsetClass
[
	^ JISX0208
]

