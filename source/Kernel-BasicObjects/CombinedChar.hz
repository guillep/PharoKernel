Class
	name: #CombinedChar;
	superclass: #ClassObject;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#codes #combined );
	classVariables: #(#Decompositions #Diacriticals #Compositions );
	package: #'Kernel-BasicObjects'.

Class CombinedChar >> add: char
[
| dict elem |codes	ifNil: [ 		codes := Array with: char.		combined := char.		^ true ].dict := Compositions at: combined charCode ifAbsent: [ ^ false ].elem := dict at: char charCode ifAbsent: [ ^ false ].codes := codes copyWith: char.combined := Character leadingChar: self base leadingChar code: elem.^ true
]

Class CombinedChar >> base
[
^ codes first
]

Class CombinedChar >> combined
[
^ combined
]

Class CombinedChar >> combinesWith: char
[
| dict |codes ifNil: [ ^ false ].dict := Compositions at: combined charCode ifAbsent: [ ^ false ].dict at: char charCode ifAbsent: [ ^ false ].^ true
]

Class CombinedChar >> simpleAdd: char
[
| dict elem |codes	ifNil: [ 		codes := Array with: char.		combined := char.		^ true ].dict := Compositions at: combined charCode ifAbsent: [ ^ false ].elem := dict at: char charCode ifAbsent: [ ^ false ].combined := Character leadingChar: self base leadingChar code: elem.codes at: 1 put: combined.^ true
]

Metaclass
	name: #CombinedChar;
	instanceVariables: #().

Metaclass CombinedChar >> isCompositionCharacter: charCode
[
^ Compositions includesKey: charCode
]

Metaclass CombinedChar >> isDiacriticals: unicode
[
^ Diacriticals includes: unicode
]

Metaclass CombinedChar >> loadCompositionMapping
[
self	parseCompositionMappingFrom:		(ZnClient new			url: 'http://unicode.org/Public/UNIDATA/UnicodeData.txt';			get) readStream
]

Metaclass CombinedChar >> parseCompositionMappingFrom: stream
[
	"	self halt.	self parseCompositionMapping"
| line fieldEnd point fieldStart compositions toNumber diacritical result |toNumber := [ :quad | ('16r' , quad) asNumber ].Compositions := IdentityDictionary new: 2048.Decompositions := IdentityDictionary new: 2048.Diacriticals := IdentitySet new: 2048.[ (line := stream nextLine) notNil ]	whileTrue: [ 		fieldEnd := line indexOf: $; startingAt: 1.		point := ('16r' , (line copyFrom: 1 to: fieldEnd - 1)) asNumber.		2 to: 6 do: [ :i | 			fieldStart := fieldEnd + 1.			fieldEnd := line indexOf: $; startingAt: fieldStart ].		compositions := line copyFrom: fieldStart to: fieldEnd - 1.		(compositions size > 0 and: [ compositions first ~= $< ])			ifTrue: [ 				compositions := compositions substrings collect: toNumber.				compositions size > 1					ifTrue: [ 						diacritical := compositions first.						Diacriticals add: diacritical.						result := compositions second.						(Decompositions includesKey: point)							ifTrue: [ self error: 'should not happen' ]							ifFalse: [ Decompositions at: point put: (Array with: diacritical with: result) ].						(Compositions includesKey: diacritical)							ifTrue: [ (Compositions at: diacritical) at: result put: point ]							ifFalse: [ 								Compositions									at: diacritical									put:										(IdentityDictionary new											at: result put: point;											yourself) ] ] ] ]
]

