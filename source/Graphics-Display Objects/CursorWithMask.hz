CursorWithMask
	superclass: #Cursor;
	instanceVariables: #(#maskForm );
	package: #'Graphics-Display Objects'.

CursorWithMask >> asCursorForm
[
	| form |
	form := Form extent: self extent depth: 8.
	form fillShape: maskForm fillColor: Color white.
	form fillShape: self fillColor: Color black at: offset negated.
	^ form offset: offset
]

CursorWithMask >> beCursor
[
	maskForm unhibernate.
	^ self beCursorWithMask: maskForm
]

CursorWithMask >> hasMask
[
	^ true
]

CursorWithMask >> maskForm
[
	^ maskForm
]

CursorWithMask >> setMaskForm: aForm
[
	maskForm := aForm
]

CursorWithMask >> storeOn: aStream base: anInteger
[
	aStream nextPut: $(.
	super storeOn: aStream base: anInteger.
	aStream nextPutAll: ' setMaskForm: '.
	maskForm storeOn: aStream base: anInteger.
	aStream nextPut: $)
]

CursorWithMask >> withMask
[
	^ self
]

CursorWithMask class >> derivedFrom: aForm
[
	"Cursor initNormalWithMask.  Cursor normal show"

	"aForm is presumably a cursor"

	| cursor mask ext |
	ext := aForm extent.
	cursor := self extent: ext.
	cursor
		copy: (1 @ 1 extent: ext)
		from: 0 @ 0
		in: aForm
		rule: Form over.
	mask := Form extent: ext.
	(1 @ 1) eightNeighbors do: [ :p | mask
				copy: (p extent: ext)
				from: 0 @ 0
				in: aForm
				rule: Form under ].
	cursor setMaskForm: mask.
	cursor offset: (aForm offset - (1 @ 1) max: ext negated).
	^ cursor
]

