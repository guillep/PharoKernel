OCASTTranslator
	superclass: #RBProgramNodeVisitor;
	instanceVariables: #(#methodBuilder #effectTranslator #valueTranslator );
	classVariables: #(#OptimizedMessages );
	package: #'OpalCompiler-Core'.

OCASTTranslator >> backendError: aMessage forNode: aNode
[
	SyntaxErrorNotification
		inClass: Object
		category: nil
		withCode: aNode methodNode source
		doitFlag: false
		errorMessage: aMessage
		location: aNode startWithoutParentheses
]

OCASTTranslator >> compilationContext
[
	^ methodBuilder compilationContext
]

OCASTTranslator >> emitAllButLastCases: cases
[
	| assocMessageNode |
	1 to: cases size - 1 do: [ :i | methodBuilder pushDup.
		assocMessageNode := cases at: i.
		valueTranslator visitInlinedBlockNode: assocMessageNode receiver.
		methodBuilder send: #=.
		methodBuilder jumpAheadTo: #next if: false.
		methodBuilder popTop.
		self visitInlinedBlockNode: assocMessageNode arguments first.
		methodBuilder jumpAheadTo: #end.
		methodBuilder jumpAheadTarget: #next ]
]

OCASTTranslator >> emitAnd: aMessageNode
[
	self shouldBeSentToValueOrEffectTranslator
]

OCASTTranslator >> emitCaseOf: aMessageNode
[
	| cases assocMessageNode |
	cases := aMessageNode arguments first statements.
	cases ifEmpty: [ self backendError: 'At least one case required' forNode: aMessageNode ].
	valueTranslator visitNode: aMessageNode receiver.
	self emitAllButLastCases: cases.	"last case without otherwise"
	methodBuilder pushDup.
	assocMessageNode := cases last.
	valueTranslator visitInlinedBlockNode: assocMessageNode receiver.
	methodBuilder send: #=.
	methodBuilder jumpAheadTo: #next if: false.
	methodBuilder popTop.
	self visitInlinedBlockNode: assocMessageNode arguments first.
	methodBuilder jumpAheadTo: #end.
	methodBuilder jumpAheadTarget: #next.
	methodBuilder send: #caseError.
	aMessageNode lastIsReturn
		ifTrue: [ aMessageNode owningScope isBlockScope
				ifTrue: [ methodBuilder blockReturnTop ]
				ifFalse: [ methodBuilder returnTop ] ]
		ifFalse: [ self isEffectTranslator
				ifTrue: [ methodBuilder popTop ] ].
	cases size timesRepeat: [ methodBuilder jumpAheadTarget: #end ]
]

OCASTTranslator >> emitCaseOfOtherwise: aMessageNode
[
	| cases assocMessageNode |
	cases := aMessageNode arguments first statements.
	cases ifEmpty: [ self backendError: 'At least one case required' forNode: aMessageNode ].
	valueTranslator visitNode: aMessageNode receiver.
	self emitAllButLastCases: cases.	"last case with otherwise"
	assocMessageNode := cases last.
	valueTranslator visitInlinedBlockNode: assocMessageNode receiver.
	methodBuilder send: #=.
	methodBuilder jumpAheadTo: #next if: false.
	self visitInlinedBlockNode: assocMessageNode arguments first.
	methodBuilder jumpAheadTo: #end.
	methodBuilder jumpAheadTarget: #next.
	self visitInlinedBlockNode: aMessageNode arguments last.
	cases size timesRepeat: [ methodBuilder jumpAheadTarget: #end ]
]

OCASTTranslator >> emitIf: aMessageNode boolean: aBoolean
[
	valueTranslator visitNode: aMessageNode receiver.
	methodBuilder jumpAheadTo: #else if: aBoolean.
	self visitInlinedBlockNode: aMessageNode arguments first.
	methodBuilder jumpAheadTo: #end.
	methodBuilder jumpAheadTarget: #else.
	self visitInlinedBlockNode: aMessageNode arguments last.
	methodBuilder jumpAheadTarget: #end
]

OCASTTranslator >> emitIfFalse: aMessageNode
[
	self shouldBeSentToValueOrEffectTranslator
]

OCASTTranslator >> emitIfFalseIfTrue: aMessageNode
[
	self emitIf: aMessageNode boolean: true
]

OCASTTranslator >> emitIfNil: aMessageNode
[
	valueTranslator visitNode: aMessageNode receiver.
	self isValueTranslator
		ifTrue: [ methodBuilder pushDup ].
	methodBuilder pushLiteral: nil.
	methodBuilder send: #==.
	methodBuilder jumpAheadTo: #else if: false.
	self isValueTranslator
		ifTrue: [ methodBuilder popTop ].
	self visitInlinedBlockNode: aMessageNode arguments first.
	methodBuilder jumpAheadTarget: #else
]

OCASTTranslator >> emitIfNilIfNotNil: aMessageNode
[
	| args |
	valueTranslator visitNode: aMessageNode receiver.
	args := aMessageNode arguments.
	args last arguments ifNotEmpty: [ args last arguments first binding emitStore: methodBuilder ].
	methodBuilder pushLiteral: nil.
	methodBuilder send: #==.
	methodBuilder jumpAheadTo: #notNilCase if: false.
	self visitInlinedBlockNode: args first.
	methodBuilder jumpAheadTo: #end.
	methodBuilder jumpAheadTarget: #notNilCase.
	self visitInlinedBlockNode: args last.
	methodBuilder jumpAheadTarget: #end
]

OCASTTranslator >> emitIfNotNil: aMessageNode
[
	self shouldBeSentToValueOrEffectTranslator
]

OCASTTranslator >> emitIfNotNilIfNil: aMessageNode
[
	| args |
	valueTranslator visitNode: aMessageNode receiver.
	args := aMessageNode arguments.
	args first arguments ifNotEmpty: [ args first arguments first binding emitStore: methodBuilder ].
	methodBuilder pushLiteral: nil.
	methodBuilder send: #==.
	methodBuilder jumpAheadTo: #else if: true.
	self visitInlinedBlockNode: args first.
	methodBuilder jumpAheadTo: #end.
	methodBuilder jumpAheadTarget: #else.
	self visitInlinedBlockNode: args last.
	methodBuilder jumpAheadTarget: #end
]

OCASTTranslator >> emitIfTrue: aMessageNode
[
	self shouldBeSentToValueOrEffectTranslator
]

OCASTTranslator >> emitIfTrueIfFalse: aMessageNode
[
	self emitIf: aMessageNode boolean: false
]

OCASTTranslator >> emitMessageNode: aMessageNode
[
	aMessageNode isCascaded
		ifFalse: [ valueTranslator visitNode: aMessageNode receiver ].
	aMessageNode arguments do: [ :each | valueTranslator visitNode: each ].
	aMessageNode isSuperSend
		ifTrue: [ methodBuilder send: aMessageNode selector toSuperOf: self compilationContext getClass ]
		ifFalse: [ methodBuilder send: aMessageNode selector ]
]

OCASTTranslator >> emitOr: aMessageNode
[
	self shouldBeSentToValueOrEffectTranslator
]

OCASTTranslator >> emitTimesRepeat: aMessageNode
[
	| limit block limitEmit |
	limit := aMessageNode receiver.
	block := aMessageNode arguments last.
	limitEmit := [ valueTranslator visitNode: limit ].
	limit isLiteral | limit isSelf | limit isSuper
		ifFalse: [ valueTranslator visitNode: limit.
			methodBuilder addTemp: #limit.
			methodBuilder storeTemp: #limit.
			methodBuilder popTop.
			limitEmit := [ methodBuilder pushTemp: #limit ] ].	"push start. allocate and initialize iterator"
	self isValueTranslator
		ifTrue: [ limitEmit value ].
	methodBuilder pushLiteral: 1.
	methodBuilder addTemp: #iterator.
	methodBuilder storeTemp: #iterator.
	methodBuilder popTop.
	methodBuilder jumpBackTarget: #start.
	methodBuilder pushTemp: #iterator.
	limitEmit value.
	methodBuilder send: #<=.
	methodBuilder jumpAheadTo: #done if: false.
	effectTranslator visitInlinedBlockNode: block.
	methodBuilder pushTemp: #iterator.
	methodBuilder pushLiteral: 1.
	methodBuilder send: #+.
	methodBuilder storeTemp: #iterator.
	methodBuilder popTop.
	methodBuilder jumpBackTo: #start.
	methodBuilder jumpAheadTarget: #done
]

OCASTTranslator >> emitToByDo: aMessageNode
[
	| step |
	step := aMessageNode arguments second.
	step isLiteralNode
		ifFalse: [ self error: 'should not have been inlined' ].
	step := step value.
	self emitToDo: aMessageNode step: step
]

OCASTTranslator >> emitToDo: aMessageNode
[
	self emitToDo: aMessageNode step: 1
]

OCASTTranslator >> emitToDo: aMessageNode step: step
[
	| limit block iterator limitEmit |
	limit := aMessageNode arguments first.
	block := aMessageNode arguments last.
	iterator := block arguments first binding.
	limitEmit := [ valueTranslator visitNode: limit ].
	limit isLiteralNode | limit isSelf | limit isSuper
		ifFalse: [ valueTranslator visitNode: limit.
			methodBuilder addTemp: iterator name , #limit.
			methodBuilder storeTemp: iterator name , #limit.
			methodBuilder popTop.
			limitEmit := [ methodBuilder pushTemp: iterator name , #limit ] ].	"push start. allocate and initialize iterator"
	valueTranslator visitNode: aMessageNode receiver.
	iterator emitStore: methodBuilder.
	self isEffectTranslator
		ifTrue: [ methodBuilder popTop ].
	methodBuilder jumpBackTarget: #start.
	iterator emitValue: methodBuilder.
	limitEmit value.
	methodBuilder send: (step > 0
				ifTrue: [ #<= ]
				ifFalse: [ #>= ]).
	methodBuilder jumpAheadTo: #done if: false.
	effectTranslator visitInlinedBlockNode: block.
	iterator emitValue: methodBuilder.
	methodBuilder pushLiteral: step.
	methodBuilder send: #+.
	iterator emitStore: methodBuilder.
	methodBuilder popTop.
	methodBuilder jumpBackTo: #start.
	methodBuilder jumpAheadTarget: #done
]

OCASTTranslator >> emitWhile: aMessageNode boolean: aBoolean
[
	methodBuilder jumpBackTarget: #begin.
	valueTranslator visitInlinedBlockNode: aMessageNode receiver.
	methodBuilder jumpAheadTo: #end if: aBoolean.
	aMessageNode arguments ifNotEmpty: [ effectTranslator visitInlinedBlockNode: aMessageNode arguments first ].
	methodBuilder jumpBackTo: #begin.
	methodBuilder jumpAheadTarget: #end
]

OCASTTranslator >> emitWhileFalse: aMessageNode
[
	self emitWhile: aMessageNode boolean: true
]

OCASTTranslator >> emitWhileTrue: aMessageNode
[
	self emitWhile: aMessageNode boolean: false
]

OCASTTranslator >> initialize
[
	methodBuilder := IRBuilder new.
	effectTranslator := self as: OCASTTranslatorForEffect.
	valueTranslator := self as: OCASTTranslatorForValue.
	effectTranslator instVarNamed: #effectTranslator put: effectTranslator.
	effectTranslator instVarNamed: #valueTranslator put: valueTranslator.
	valueTranslator instVarNamed: #valueTranslator put: valueTranslator
]

OCASTTranslator >> ir
[
	^ methodBuilder ir
]

OCASTTranslator >> isEffectTranslator
[
	^ self == effectTranslator
]

OCASTTranslator >> isValueTranslator
[
	^ self == valueTranslator
]

OCASTTranslator >> shouldBeSentToValueOrEffectTranslator
[
	self error: 'should be sent only to valueTranslator or effectTranslator'
]

OCASTTranslator >> visitArrayNode: anArrayNode
[
	| elementNodes |
	anArrayNode statements size > 32
		ifTrue: [ ^ self visitLargeArrayNode: anArrayNode ].
	elementNodes := anArrayNode children.
	elementNodes do: [ :node | valueTranslator visitNode: node ].
	methodBuilder pushConsArray: elementNodes size
]

OCASTTranslator >> visitAssignmentNode: anAssignmentNode
[
	valueTranslator visitNode: anAssignmentNode value.
	anAssignmentNode variable binding emitStore: methodBuilder
]

OCASTTranslator >> visitBlockNode: aBlockNode
[
	| tempNames argumentNames copiedNames |
	aBlockNode arguments size > 15
		ifTrue: [ self backendError: 'Too many arguments' forNode: aBlockNode ].
	aBlockNode isInlined
		ifTrue: [ ^ self visitInlinedBlockNode: aBlockNode ].	"uncomment to enable clean blocks	aBlockNode isClean ifTrue: [^ self visitCleanBlockNode: aBlockNode ]."
	argumentNames := aBlockNode argumentNames asArray.
	tempNames := (aBlockNode scope tempVars asArray collect: [ :each | each name ]) copyWithoutAll: argumentNames.
	copiedNames := aBlockNode scope inComingCopiedVars asArray collect: [ :each | each name ].
	methodBuilder pushClosureCopyCopiedValues: copiedNames args: argumentNames jumpTo: #block.
	aBlockNode scope tempVector
		ifNotEmpty: [ methodBuilder
				createTempVectorNamed: aBlockNode scope tempVectorName
				withVars: (aBlockNode scope tempVector collect: [ :each | each name ]) asArray ].
	methodBuilder addTemps: tempNames.
	valueTranslator visitNode: aBlockNode body.
	methodBuilder addBlockReturnTopIfRequired.
	self flag: 'why dont we just add a blockReturnTop here... it could be removed or ignored in IRTranslator'.
	methodBuilder jumpAheadTarget: #block
]

OCASTTranslator >> visitCascadeNode: aCascadeNode
[
	valueTranslator visitNode: aCascadeNode receiver.
	aCascadeNode messages allButLastDo: [ :node | methodBuilder pushDup.
			effectTranslator visitNode: node ].
	self visitNode: aCascadeNode messages last
]

OCASTTranslator >> visitCleanBlockNode: aBlockNode
[
	
]

OCASTTranslator >> visitInlinedBlockNode: anOptimizedBlockNode
[
	"We are visiting a scope that is not a block, but inlined in the outer context.
	This means: 
			- we do not create a Block
			- we call IRBuilder to add temps
	"

	| argumentNames tempNames copiedNames |
	argumentNames := anOptimizedBlockNode argumentNames asArray.
	tempNames := (anOptimizedBlockNode scope tempVars collect: [ :each | each name asSymbol ])
		copyWithoutAll: argumentNames.
	copiedNames := (anOptimizedBlockNode scope inComingCopiedVars collect: [ :each | each name ]) asArray.
	anOptimizedBlockNode scope tempVector
		ifNotEmpty: [ methodBuilder
				createTempVectorNamed: anOptimizedBlockNode scope tempVectorName
				withVars: (anOptimizedBlockNode scope tempVector collect: [ :each | each name ]) asArray ].
	methodBuilder addTemps: tempNames.
	methodBuilder addTemps: copiedNames.
	methodBuilder addTemps: argumentNames.
	anOptimizedBlockNode isInlinedLoop
		ifTrue: [ tempNames
				do: [ :tempName | methodBuilder pushLiteral: nil.
					methodBuilder storeTemp: tempName.
					methodBuilder popTop ] ].
	self visitNode: anOptimizedBlockNode body
]

OCASTTranslator >> visitLargeArrayNode: aRBArrayNode
[
	"Long form: generates (Array braceStream: N) nextPut: a; nextPut: b; ...; braceArray"

	methodBuilder pushLiteralVariable: Array binding.
	methodBuilder pushLiteral: aRBArrayNode statements size.
	methodBuilder send: #braceStream:.
	aRBArrayNode statements
		do: [ :each | methodBuilder pushDup.
			valueTranslator visitNode: each.
			methodBuilder send: #nextPut:.
			methodBuilder popTop ].
	methodBuilder send: #braceArray
]

OCASTTranslator >> visitLiteralArrayNode: aRBLiteralArrayNode
[
	methodBuilder pushLiteral: aRBLiteralArrayNode value
]

OCASTTranslator >> visitLiteralNode: aLiteralNode
[
	methodBuilder pushLiteral: aLiteralNode value
]

OCASTTranslator >> visitMessageNode: aMessageNode
[
	aMessageNode isInlined
		ifTrue: [ methodBuilder addLiteral: aMessageNode selector.	"so searching for senders will work"
			^ self perform: (OptimizedMessages at: aMessageNode selector) with: aMessageNode ].
	^ self emitMessageNode: aMessageNode
]

OCASTTranslator >> visitMethodNode: aMethodNode
[
	aMethodNode arguments size > 15
		ifTrue: [ self backendError: 'Too many arguments' forNode: aMethodNode ].
	methodBuilder compilationContext: aMethodNode compilationContext.
	methodBuilder addTemps: aMethodNode scope tempVarNames.
	methodBuilder properties: aMethodNode properties.
	methodBuilder irPrimitive: aMethodNode primitiveFromPragma.
	aMethodNode pragmas do: [ :each | self visitPragmaNode: each ].
	methodBuilder numArgs: aMethodNode arguments size.
	aMethodNode scope tempVector
		ifNotEmpty: [ methodBuilder
				createTempVectorNamed: aMethodNode scope tempVectorName
				withVars: (aMethodNode scope tempVector collect: [ :each | each name ]) asArray ].
	effectTranslator visitNode: aMethodNode body.
	aMethodNode body lastIsReturn
		ifFalse: [ methodBuilder
				pushReceiver;
				returnTop ]
]

OCASTTranslator >> visitNode: aNode
[
	methodBuilder mapToNode: aNode.
	super visitNode: aNode.
	methodBuilder popMap
]

OCASTTranslator >> visitPragmaNode: aPragmaNode
[
	methodBuilder addPragma: aPragmaNode asPragma.
	aPragmaNode isPrimitiveError
		ifTrue: [ methodBuilder storeTemp: (aPragmaNode argumentAt: #error:) value ]
]

OCASTTranslator >> visitReturnNode: aReturnNode
[
	valueTranslator visitNode: aReturnNode value.
	methodBuilder returnTop
]

OCASTTranslator >> visitSequenceNode: aSequenceNode
[
	self shouldBeSentToValueOrEffectTranslator
]

OCASTTranslator >> visitVariableNode: aVariableNode
[
	aVariableNode binding emitValue: methodBuilder
]

OCASTTranslator class >> initialize
[
	"OCASTTranslator initialize"

	super initialize.
	OptimizedMessages := {(#caseOf: -> #emitCaseOf:).
	(#caseOf:otherwise: -> #emitCaseOfOtherwise:).
	(#ifFalse: -> #emitIfFalse:).
	(#ifFalse:ifTrue: -> #emitIfFalseIfTrue:).
	(#ifNil: -> #emitIfNil:).
	(#ifNil:ifNotNil: -> #emitIfNilIfNotNil:).
	(#ifNotNil: -> #emitIfNotNil:).
	(#ifNotNil:ifNil: -> #emitIfNotNilIfNil:).
	(#ifTrue: -> #emitIfTrue:).
	(#ifTrue:ifFalse: -> #emitIfTrueIfFalse:).
	(#or: -> #emitOr:).
	(#and: -> #emitAnd:).
	(#timesRepeat: -> #emitTimesRepeat:).
	(#to:by:do: -> #emitToByDo:).
	(#to:do: -> #emitToDo:).
	(#whileFalse: -> #emitWhileFalse:).
	(#whileTrue: -> #emitWhileTrue:).
	(#whileFalse -> #emitWhileFalse:).
	(#whileTrue -> #emitWhileTrue:)} asDictionary
]

