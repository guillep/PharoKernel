IRSequence
	instanceVariables: #(#sequence #orderNumber #method );
	package: #'OpalCompiler-Core'.

IRSequence >> , otherCollection
[
	^ sequence , otherCollection
]

IRSequence >> absorbConstantConditionalJumps: alreadySeen
[
	"Collapse sequences that look like:
			[if] goto s1
			...
		 s1:	pushConst: true/false
			goto s2
		 s2:	if true/false goto s3 else s4
	into:
			[if] goto s3/s4

	These sequences are produced by and:/or: messages"

	| seq bool if |
	(alreadySeen includes: self)
		ifTrue: [ ^ self ].
	alreadySeen add: self.
	[ (seq := self successorSequences) notEmpty
		and: [ (seq := seq first) size = 2
				and: [ (seq first isPushLiteral: [ :obj | (bool := obj) isKindOf: Boolean ])
						and: [ seq last isGoto and: [ (if := seq last destination first) isIf ] ] ]	"destination" ]	"not return" ]
		whileTrue: [ "absorb"
			self last destination: (bool == if boolean
						ifTrue: [ if destination ]
						ifFalse: [ if otherwise ]) ].
	self successorSequences do: [ :instrs | instrs ifNotNil: [ :i | i absorbConstantConditionalJumps: alreadySeen ] ]
]

IRSequence >> absorbJumpToSingleInstr: alreadySeen
[
	"Collapse jumps to single return instructions into caller"

	| seqs seq |
	(alreadySeen includes: self)
		ifTrue: [ ^ self ].
	alreadySeen add: self.
	[ (seqs := self successorSequences) size = 1
		and: [ (seq := seqs first) size = 1
				and: [ seq successorSequences size < 2
						and: [ self last isBlockReturnTop not
								and: [ (seq sequence size = 1 and: [ seq sequence first isBlockReturnTop or: [ seq sequence first isReturn ] ]) not ] ] ]	"...to single instruction..." ]	"unconditional jump..."	"...but don't collapse conditional jumps so their otherwiseSequences can stay right after them" ]
		whileTrue: [ "replace goto with single instruction"
			self removeLast.
			seq do: [ :instr | self add: instr copy ] ].
	seqs do: [ :instrs | instrs ifNotNil: [ :i | i absorbJumpToSingleInstr: alreadySeen ] ]
]

IRSequence >> accept: aVisitor
[
	^ self visitSequence: self
]

IRSequence >> add: anInstruction
[
	sequence add: anInstruction.
	anInstruction sequence: self.
	^ anInstruction
]

IRSequence >> add: instr after: another
[
	sequence add: instr after: another.
	instr sequence: self.
	^ instr
]

IRSequence >> add: instr before: another
[
	sequence add: instr before: another.
	instr sequence: self.
	^ instr
]

IRSequence >> addAll: aCollection
[
	^ sequence addAll: aCollection
]

IRSequence >> addAllFirst: aCollection
[
	^ sequence addAllFirst: aCollection
]

IRSequence >> addInstructions: aCollection
[
	^ aCollection do: [ :instr | self add: instr ]
]

IRSequence >> addInstructions: aCollection after: anInstruction
[
	^ aCollection reverseDo: [ :instr | self add: instr after: anInstruction ]
]

IRSequence >> addInstructions: aCollection before: anInstruction
[
	aCollection do: [ :instr | self add: instr before: anInstruction ]
]

IRSequence >> addLast: anInstruction
[
	^ self add: anInstruction
]

IRSequence >> after: o
[
	^ sequence after: o
]

IRSequence >> at: index
[
	^ sequence at: index
]

IRSequence >> contains: aBlock
[
	^ sequence contains: aBlock
]

IRSequence >> detect: aBlock
[
	^ sequence detect: aBlock
]

IRSequence >> do: aBlock
[
	^ sequence do: aBlock
]

IRSequence >> first
[
	^ sequence first
]

IRSequence >> hasTempVector: aSymbol
[
	^ sequence anySatisfy: [ :irNode | irNode isTempVector and: [ irNode name = aSymbol ] ]
]

IRSequence >> ifEmpty: aBlock
[
	^ sequence ifEmpty: aBlock
]

IRSequence >> ifNotEmpty: aBlock
[
	^ sequence ifNotEmpty: aBlock
]

IRSequence >> initialize
[
	sequence := OrderedCollection new
]

IRSequence >> instructionsDo: aBlock
[
	^ self withAllSuccessorsDo: [ :seq | seq do: aBlock ]
]

IRSequence >> instructionsForDecompiling
[
	| irInstructions |
	irInstructions := OrderedCollection new.
	self withNonBodySuccessorsDo: [ :seq | seq do: [ :bc | irInstructions add: bc ] ].
	^ irInstructions
]

IRSequence >> isEmpty
[
	^ sequence isEmpty
]

IRSequence >> last
[
	^ sequence last
]

IRSequence >> longPrintOn: stream
[
	[ IRPrinter new
		indent: 0;
		stream: stream;
		interpretSequence: self ]
		onDNU: #orderNumber
		do: [ :ex | ex resume: ex receiver ]
]

IRSequence >> method
[
	^ method
]

IRSequence >> method: aIRMethod
[
	method := aIRMethod
]

IRSequence >> nextSequence
[
	| sequences i |
	sequences := self withAllSuccessors.
	i := sequences findFirst: [ :seq | seq orderNumber = self orderNumber ].
	(i = 0 or: [ i = sequences size ])
		ifTrue: [ ^ nil ].
	^ sequences at: i + 1
]

IRSequence >> nonBodySuccessorSequences
[
	sequence isEmpty
		ifTrue: [ ^ #() ].
	^ sequence last nonBodySuccessorSequences
]

IRSequence >> notEmpty
[
	^ sequence notEmpty
]

IRSequence >> orderNumber
[
	"Sequences are sorted by this number"

	^ orderNumber
]

IRSequence >> orderNumber: num
[
	"Sequences are sorted by this number"

	orderNumber := num
]

IRSequence >> printOn: stream
[
	stream nextPutAll: 'an '.
	self class printOn: stream.
	stream space.
	stream nextPut: $(.
	self orderNumber printOn: stream.
	stream nextPut: $)
]

IRSequence >> remove: aNode
[
	aNode sequence: nil.
	sequence remove: aNode ifAbsent: [ self error ]
]

IRSequence >> removeFirst
[
	^ sequence removeFirst
]

IRSequence >> removeLast
[
	^ sequence removeLast
]

IRSequence >> removeLast: n
[
	^ sequence removeLast: n
]

IRSequence >> replaceNode: aNode withNode: anotherNode
[
	self add: anotherNode before: aNode.
	sequence remove: aNode ifAbsent: [ self error ]
]

IRSequence >> replaceNode: aNode withNodes: aCollection
[
	self addInstructions: aCollection before: aNode.
	sequence remove: aNode ifAbsent: [ self error ]
]

IRSequence >> reverseDo: aBlock
[
	^ sequence reverseDo: aBlock
]

IRSequence >> select: aBlock
[
	^ sequence select: aBlock
]

IRSequence >> sequence
[
	^ sequence
]

IRSequence >> size
[
	^ sequence size
]

IRSequence >> splitAfter: instruction
[
	| newSeq index next |
	next := self nextSequence.
	next := next ifNil: [ self orderNumber + 1 ] ifNotNil: [ (next orderNumber + self orderNumber) / 2 ].
	newSeq := self class new orderNumber: next.
	newSeq method: self method.	"Split after instruction"
	index := sequence indexOf: instruction.
	(sequence last: sequence size - index) do: [ :instr | newSeq add: instr ].
	sequence := sequence first: index.
	self
		flag: 'The jump inherits the bytecode index from the instruction where it was split. Check if this value is correct.'.
	self add: (IRJump new
				destination: newSeq;
				bytecodeIndex: instruction bytecodeIndex + 1).
	^ newSeq
]

IRSequence >> successorSequences
[
	sequence isEmpty
		ifTrue: [ ^ #() ].
	^ sequence last successorSequences
]

IRSequence >> tempVectorNamed: aSymbol
[
	^ sequence detect: [ :irNode | irNode isTempVector and: [ irNode name = aSymbol ] ]
]

IRSequence >> withAllSuccessors
[
	"Return me and all my successors sorted by sequence orderNumber"

	| list |
	list := OrderedCollection new: 20.
	self withAllSuccessorsDo: [ :seq | list add: seq ].
	^ list asSortedCollection: [ :x :y | x orderNumber <= y orderNumber ]
]

IRSequence >> withAllSuccessorsDo: block
[
	"Iterate over me and all my successors only once"

	self withAllSuccessorsDo: block alreadySeen: IdentitySet new
]

IRSequence >> withAllSuccessorsDo: block alreadySeen: set
[
	"Iterate over me and all my successors only once"

	(set includes: self)
		ifTrue: [ ^ self ].
	set add: self.
	block value: self.
	self successorSequences do: [ :seq | seq ifNotNil: [ seq withAllSuccessorsDo: block alreadySeen: set ] ]
]

IRSequence >> withNonBodySuccessorsDo: block
[
	"Iterate over me and all my successors only once"

	self withNonBodySuccessorsDo: block alreadySeen: IdentitySet new
]

IRSequence >> withNonBodySuccessorsDo: block alreadySeen: set
[
	"Iterate over me and all my successors only once"

	(set includes: self)
		ifTrue: [ ^ self ].
	set add: self.
	block value: self.
	self nonBodySuccessorSequences do: [ :seq | seq ifNotNil: [ seq withNonBodySuccessorsDo: block alreadySeen: set ] ]
]

IRSequence class >> orderNumber: aNumber
[
	^ self new orderNumber: aNumber
]

