OCASTTranslatorForEffect
	superclass: #OCASTTranslator;
	package: #'OpalCompiler-Core'.

OCASTTranslatorForEffect >> emitAnd: aMessageNode
[
	self emitIfTrue: aMessageNode
]

OCASTTranslatorForEffect >> emitIfFalse: aMessageNode
[
	valueTranslator visitNode: aMessageNode receiver.
	methodBuilder jumpAheadTo: #else if: true.
	self visitInlinedBlockNode: aMessageNode arguments first.
	methodBuilder jumpAheadTarget: #else
]

OCASTTranslatorForEffect >> emitIfNotNil: aMessageNode
[
	| args |
	valueTranslator visitNode: aMessageNode receiver.
	args := aMessageNode arguments.
	args first arguments ifNotEmpty: [ args first arguments first binding emitStore: methodBuilder ].
	methodBuilder pushLiteral: nil.
	methodBuilder send: #==.
	methodBuilder jumpAheadTo: #end if: true.
	self visitInlinedBlockNode: args first.
	methodBuilder jumpAheadTarget: #end
]

OCASTTranslatorForEffect >> emitIfTrue: aMessageNode
[
	valueTranslator visitNode: aMessageNode receiver.
	methodBuilder jumpAheadTo: #else if: false.
	self visitInlinedBlockNode: aMessageNode arguments first.
	methodBuilder jumpAheadTarget: #else
]

OCASTTranslatorForEffect >> emitMessageNode: aMessageNode
[
	super emitMessageNode: aMessageNode.
	methodBuilder popTop
]

OCASTTranslatorForEffect >> emitOr: aMessageNode
[
	self emitIfFalse: aMessageNode
]

OCASTTranslatorForEffect >> visitArrayNode: anArrayNode
[
	"An arrayNode may have side effect, for example: '{self foo}'. So we cannot just generate nothing for this node."

	super visitArrayNode: anArrayNode.
	methodBuilder popTop
]

OCASTTranslatorForEffect >> visitAssignmentNode: anAssignmentNode
[
	super visitAssignmentNode: anAssignmentNode.
	methodBuilder popTop
]

OCASTTranslatorForEffect >> visitBlockNode: aBlockNode
[
	"A block has no side effect, so a block translated for effect just doesn't generate anything"

	
]

OCASTTranslatorForEffect >> visitLiteralArrayNode: aLiteralNode
[
	"when visiting a literal array for effect, we could push it and then pop it, but we do nothing"

	
]

OCASTTranslatorForEffect >> visitLiteralNode: aLiteralNode
[
	"when visiting a literal for effect, we could push it and then pop it, but we do nothing"

	
]

OCASTTranslatorForEffect >> visitSequenceNode: aSequenceNode
[
	aSequenceNode statements do: [ :each | self visitNode: each ]
]

OCASTTranslatorForEffect >> visitVariableNode: aVariableNode
[
	"when visiting a variable for effect, we could push it and then pop it, but we do nothing"

	
]

