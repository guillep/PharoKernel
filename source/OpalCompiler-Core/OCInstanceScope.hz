OCInstanceScope
	superclass: #OCAbstractScope;
	instanceVariables: #(#vars #selfVar #superVar );
	package: #'OpalCompiler-Core'.

OCInstanceScope >> allTemps
[
	^ #()
]

OCInstanceScope >> initialize
[
	vars := OCKeyedSet keyBlock: [ :var | var name ].
	selfVar := OCSpecialVariable new
		name: 'self';
		scope: self;
		yourself.
	superVar := OCSpecialVariable new
		name: 'super';
		scope: self;
		yourself
]

OCInstanceScope >> instanceScope
[
	^ self
]

OCInstanceScope >> isInstanceScope
[
	^ true
]

OCInstanceScope >> lookupVar: name
[
	"Return a ScopeVar for my inst var with this name.  Return nil if none found"

	name = 'self'
		ifTrue: [ ^ selfVar ].
	name = 'super'
		ifTrue: [ ^ superVar ].
	^ vars at: name ifAbsent: [ self outerScope lookupVar: name ]
]

OCInstanceScope >> lookupVarForDeclaration: name
[
	"Return a ScopeVar for my inst var with this name.  Return nil if none found"

	name = 'self'
		ifTrue: [ ^ selfVar ].
	name = 'super'
		ifTrue: [ ^ superVar ].
	^ vars at: name ifAbsent: [ self outerScope lookupVarForDeclaration: name ]
]

OCInstanceScope >> newMethodScope
[
	^ OCMethodScope new outerScope: self
]

OCInstanceScope >> vars: names
[
	vars := Dictionary new.
	names
		withIndexDo: [ :name :index | vars at: name put: (OCInstanceVariable new
						name: name;
						index: index;
						scope: self;
						yourself) ]
]

