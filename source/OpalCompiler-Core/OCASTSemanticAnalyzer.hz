OCASTSemanticAnalyzer
	superclass: #RBProgramNodeVisitor;
	instanceVariables: #(#scope #blockcounter #compilationContext );
	package: #'OpalCompiler-Core'.

OCASTSemanticAnalyzer >> analyze: aNode
[
	self visitNode: aNode.
	OCASTClosureAnalyzer new visitNode: aNode
]

OCASTSemanticAnalyzer >> blockcounter
[
	^ blockcounter ifNil: [ 0 ]
]

OCASTSemanticAnalyzer >> compilationContext
[
	^ compilationContext
]

OCASTSemanticAnalyzer >> compilationContext: aCompilationContext
[
	compilationContext := aCompilationContext
]

OCASTSemanticAnalyzer >> declareVariableNode: aVariableNode
[
	| name var |
	name := aVariableNode name.
	var := scope lookupVarForDeclaration: name.
	var
		ifNotNil: [ self variable: aVariableNode shadows: var.
			var scope ~= scope
				ifTrue: [ "Create new var that shadows outer one"
					var := scope addTemp: name ] ]
		ifNil: [ "new var"
			var := scope addTemp: name ].
	aVariableNode binding: var.
	^ var
]

OCASTSemanticAnalyzer >> lookupVariableForRead: aVariableNode
[
	| var |
	var := scope lookupVar: aVariableNode name.
	var ifNil: [ ^ var ].
	(var isTemp and: [ var scope outerNotOptimizedScope ~= scope outerNotOptimizedScope ])
		ifTrue: [ var markEscapingRead ].	"only escaping when they will end up in different closures"
	^ var
]

OCASTSemanticAnalyzer >> lookupVariableForWrite: aVariableNode
[
	| var |
	var := scope lookupVar: aVariableNode name.
	var ifNil: [ ^ var ].
	var isSpecialVariable
		ifTrue: [ self storeIntoSpecialVariable: aVariableNode ].
	var isTemp
		ifTrue: [ var scope outerNotOptimizedScope ~= scope outerNotOptimizedScope
				ifTrue: [ var markEscapingWrite ]	"only escaping when they will end up in different closures" ].
	^ var
]

OCASTSemanticAnalyzer >> scope: aSemScope
[
	scope := aSemScope
]

OCASTSemanticAnalyzer >> storeIntoSpecialVariable: variableNode
[
	^ OCSemanticError new
		node: variableNode;
		compilationContext: compilationContext;
		messageText: 'Cannot store into';
		signal
]

OCASTSemanticAnalyzer >> undeclaredVariable: variableNode
[
	^ OCUndeclaredVariableWarning new
		node: variableNode;
		compilationContext: compilationContext;
		signal
]

OCASTSemanticAnalyzer >> uninitializedVariable: variableNode
[
	variableNode binding markRead.
	^ OCUninitializedVariableWarning new
		node: variableNode;
		compilationContext: compilationContext;
		signal
]

OCASTSemanticAnalyzer >> unknownSelector: messageNode
[
	^ OCUnknownSelectorWarning new
		node: messageNode;
		compilationContext: compilationContext;
		signal
]

OCASTSemanticAnalyzer >> unusedVariable: variableNode
[
	^ OCUnusedVariableWarning new
		node: variableNode;
		compilationContext: compilationContext;
		signal
]

OCASTSemanticAnalyzer >> variable: variableNode shadows: semVar
[
	^ OCShadowVariableWarning new
		node: variableNode;
		shadowedVar: semVar;
		compilationContext: compilationContext;
		signal
]

OCASTSemanticAnalyzer >> visitAssignmentNode: anAssignmentNode
[
	| var |
	self visitNode: anAssignmentNode value.
	var := (self lookupVariableForWrite: anAssignmentNode variable)
		ifNil: [ self undeclaredVariable: anAssignmentNode variable ].
	var markWrite.
	anAssignmentNode variable binding: var
]

OCASTSemanticAnalyzer >> visitBlockNode: aBlockNode
[
	blockcounter := self blockcounter + 1.
	aBlockNode isInlined
		ifTrue: [ ^ self visitInlinedBlockNode: aBlockNode ].
	scope := scope newBlockScope: blockcounter.
	aBlockNode scope: scope.
	scope node: aBlockNode.
	aBlockNode arguments do: [ :node | (self declareVariableNode: node) markArg ].
	self visitNode: aBlockNode body.
	scope := scope popScope
]

OCASTSemanticAnalyzer >> visitInlinedBlockNode: aBlockNode
[
	scope := scope newOptimizedBlockScope: blockcounter.
	aBlockNode isInlinedLoop
		ifTrue: [ scope markInlinedLoop ].
	aBlockNode scope: scope.
	scope node: aBlockNode.
	aBlockNode arguments do: [ :node | (self declareVariableNode: node) markArg ].
	self visitNode: aBlockNode body.
	scope := scope popScope
]

OCASTSemanticAnalyzer >> visitMessageNode: aMessageNode
[
	| selectorString |
	"this should be moved to the parser"
	selectorString := String
		streamContents: [ :str | aMessageNode selectorParts do: [ :each | str nextPutAll: each value ] ].
	(Symbol findInterned: selectorString) ifNil: [ self unknownSelector: aMessageNode ].
	(aMessageNode isCascaded not or: [ aMessageNode isFirstCascaded ])
		ifTrue: [ self visitNode: aMessageNode receiver ].
	aMessageNode arguments do: [ :each | self visitNode: each ]
]

OCASTSemanticAnalyzer >> visitMethodNode: aMethodNode
[
	scope := compilationContext scope newMethodScope.
	aMethodNode scope: scope.
	scope node: aMethodNode.
	aMethodNode arguments do: [ :node | (self declareVariableNode: node) markArg ].
	aMethodNode pragmas do: [ :each | self visitNode: each ].
	self visitNode: aMethodNode body.
	scope := scope outerScope
]

OCASTSemanticAnalyzer >> visitPragmaNode: aPragmaNode
[
	super visitPragmaNode: aPragmaNode.
	aPragmaNode isCompilerOption
		ifTrue: [ aPragmaNode asPragma sendTo: aPragmaNode methodNode compilationContext ]
]

OCASTSemanticAnalyzer >> visitSequenceNode: aSequenceNode
[
	aSequenceNode temporaries do: [ :node | self declareVariableNode: node ].
	aSequenceNode parent isMethod
		ifTrue: [ aSequenceNode parent pragmas
				detect: [ :pragma | pragma isPrimitiveError ]
				ifFound: [ :pragma | self declareVariableNode: (RBVariableNode named: (pragma argumentAt: #error:) value asString) ] ].
	aSequenceNode statements do: [ :each | self visitNode: each ].
	aSequenceNode temporaries reverseDo: [ :node | node binding isUnused
				ifTrue: [ self unusedVariable: node ] ]
]

OCASTSemanticAnalyzer >> visitVariableNode: aVariableNode
[
	| var |
	var := (self lookupVariableForRead: aVariableNode) ifNil: [ self undeclaredVariable: aVariableNode ].	"written variables in loops need special care... needs to be checked"
	(var isTemp and: [ var isEscaping and: [ scope outerScope isInsideOptimizedLoop ] ])
		ifTrue: [ var isWrite
				ifTrue: [ var markEscapingWrite ].
			var isRead
				ifTrue: [ var markEscapingRead ] ].
	aVariableNode binding: var.
	var isUninitialized
		ifTrue: [ self uninitializedVariable: aVariableNode ]
]

