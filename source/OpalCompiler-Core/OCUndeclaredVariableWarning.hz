OCUndeclaredVariableWarning
	superclass: #OCSemanticWarning;
	package: #'OpalCompiler-Core'.

OCUndeclaredVariableWarning >> declareClassVar
[
	self methodClass theNonMetaClass addClassVarNamed: node name asSymbol.
	^ (node owningScope lookupVar: node name) ifNil: [ self error: 'should be found' ]
]

OCUndeclaredVariableWarning >> declareGlobal
[
	Smalltalk at: node name asSymbol put: nil.
	^ (node owningScope lookupVar: node name) ifNil: [ self error: 'should be not happen' ]
]

OCUndeclaredVariableWarning >> declareInstVar: name
[
	"Declare an instance variable."

	self methodClass addInstVarNamed: name.	"We are changing a class after the scope hierarchy was created, so we need to update the	Instance Scope"
	self methodNode scope instanceScope vars: self methodClass allInstVarNames.
	^ (node owningScope lookupVar: node name) ifNil: [ self error: 'should not happen' ]
]

OCUndeclaredVariableWarning >> declareTempAndPaste: name
[
	| insertion delta theTextString characterBeforeMark tempsMark newMethodNode |
	"Below we are getting the text that is actually seen in the morph. This is rather ugly. Maybe there is a better way to do this."
	theTextString := self requestor textMorph editor paragraph text.	"We parse again the method displayed in the morph. The variable methodNode has the first version of the method, without temporary declarations. "
	newMethodNode := RBParser parseMethod: theTextString.	"We check if there is a declaration of temporary variables"
	tempsMark := newMethodNode body rightBar ifNil: [ self methodNode body start ].
	characterBeforeMark := theTextString at: tempsMark - 1 ifAbsent: [ $  ].
	(theTextString at: tempsMark) = $|
		ifTrue: [ "Paste it before the second vertical bar"
			insertion := name , ' '.
			characterBeforeMark isSeparator
				ifFalse: [ insertion := ' ' , insertion ].
			delta := 0 ]
		ifFalse: [ "No bars - insert some with CR, tab"
			insertion := '| ' , name , ' |' , String cr.
			delta := 2.	"the bar and CR"
			characterBeforeMark = Character tab
				ifTrue: [ insertion := insertion , String tab.
					delta := delta + 1	"the tab" ] ].
	tempsMark := tempsMark + (self substituteWord: insertion wordInterval: (tempsMark to: tempsMark - 1) offset: 0) - delta.
	self methodNode scope addTemp: name.
	^ (node owningScope lookupVar: node name) ifNil: [ self error: 'should not happen' ]
]

OCUndeclaredVariableWarning >> defaultAction
[
	| varName className selector |
	className := self methodClass name.
	selector := self methodNode selector.
	varName := node name.
	self methodNode selector ifNotNil: [ self crTrace: className , '>>' , selector , ' ' ] ifNil: [ self traceCr: '' ].
	self traceCr: '(' , varName , ' is Undeclared) '.
	^ super defaultAction
		ifNil: [ Undeclared at: varName asSymbol put: nil.
			OCUndeclaredVariable new name: varName asSymbol ]
]

OCUndeclaredVariableWarning >> defineClass: className
[
	"Prompts the user to define a new class."

	| classSymbol systemCategory classDefinition |
	classSymbol := className asSymbol.
	systemCategory := self methodClass category ifNil: [ 'Unknown' ].
	classDefinition := 'Object subclass: #' , classSymbol
		,
			'		instanceVariableNames: '''' 		classVariableNames: ''''		poolDictionaries: ''''		category: ''' , systemCategory , ''''.
	classDefinition := UIManager default
		multiLineRequest: 'Edit class definition:'
		initialAnswer: classDefinition
		answerHeight: 150.
	(classDefinition isNil or: [ classDefinition isEmpty ])
		ifTrue: [ ^ self error ].
	self class compiler evaluate: classDefinition.
	^ (node owningScope lookupVar: className) ifNil: [ self error: 'should be not happen' ]
]

OCUndeclaredVariableWarning >> node: aVariableNode
[
	super node: aVariableNode.
	messageText := 'Undeclared temp: ' , aVariableNode name
]

OCUndeclaredVariableWarning >> openMenuIn: aBlock
[
	| alternatives labels actions lines caption choice name interval |
	interval := node sourceInterval.
	name := node name.
	alternatives := self possibleVariablesFor: name.
	labels := OrderedCollection new.
	actions := OrderedCollection new.
	lines := OrderedCollection new.
	name first isLowercase
		ifTrue: [ labels add: 'Declare new temporary variable'.
			actions add: [ self declareTempAndPaste: name ].
			labels add: 'Declare new instance variable'.
			actions add: [ self declareInstVar: name ] ]
		ifFalse: [ labels add: 'Define new class'.
			actions add: [ self defineClass: name ].
			labels add: 'Declare new global'.
			actions add: [ self declareGlobal ].
			labels add: 'Declare new class variable'.
			actions add: [ self declareClassVar ] ].
	lines add: labels size.
	alternatives
		do: [ :each | labels add: each.
			actions
				add: [ self substituteVariable: each atInterval: interval.
					(OCSourceCodeChanged new newSourceCode: self requestor text) signal ] ].
	lines add: labels size.
	labels add: 'Cancel'.
	caption := 'Unknown variable: ' , name , ' please correct, or cancel:'.
	choice := aBlock value: labels value: lines value: caption.
	choice ifNotNil: [ self resume: (actions at: choice ifAbsent: [ compilationContext failBlock value ]) value ]
]

OCUndeclaredVariableWarning >> possibleVariablesFor: proposedVariable
[
	| results class |
	class := node methodNode methodClass.
	results := proposedVariable correctAgainst: node temporaryVariables continuedFrom: nil.
	proposedVariable first canBeGlobalVarInitial
		ifTrue: [ results := class possibleVariablesFor: proposedVariable continuedFrom: results ].
	^ proposedVariable correctAgainst: nil continuedFrom: results
]

OCUndeclaredVariableWarning >> substituteVariable: varName atInterval: anInterval
[
	self substituteWord: varName wordInterval: anInterval offset: 0.
	self methodNode source: self requestor text.
	node replaceWith: ((RBVariableNode named: varName) binding: (node owningScope lookupVar: varName)).
	^ (node owningScope lookupVar: varName) ifNil: [ self error: 'should be found' ]
]

OCUndeclaredVariableWarning >> substituteWord: correctWord wordInterval: spot offset: o
[
	"Substitute the correctSelector into the (presuamed interactive) receiver."

	self requestor correctFrom: spot first + o to: spot last + o with: correctWord.
	^ o + correctWord size - spot size
]

