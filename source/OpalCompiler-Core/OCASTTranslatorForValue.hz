OCASTTranslatorForValue
	superclass: #OCASTTranslator;
	package: #'OpalCompiler-Core'.

OCASTTranslatorForValue >> emitAnd: aMessageNode
[
	self visitNode: aMessageNode receiver.
	methodBuilder
		pushDup;
		jumpAheadTo: #end if: false;
		popTop.
	self visitInlinedBlockNode: aMessageNode arguments first.
	methodBuilder jumpAheadTarget: #end
]

OCASTTranslatorForValue >> emitIfFalse: aMessageNode
[
	self visitNode: aMessageNode receiver.
	methodBuilder jumpAheadTo: #false if: false.
	methodBuilder pushLiteral: nil.
	methodBuilder jumpAheadTo: #end.
	methodBuilder jumpAheadTarget: #false.
	self visitInlinedBlockNode: aMessageNode arguments first.
	methodBuilder jumpAheadTarget: #end
]

OCASTTranslatorForValue >> emitIfNotNil: aMessageNode
[
	| args |
	self visitNode: aMessageNode receiver.
	args := aMessageNode arguments.
	args first arguments ifNotEmpty: [ args first arguments first binding emitStore: methodBuilder ].
	methodBuilder pushDup.
	methodBuilder pushLiteral: nil.
	methodBuilder send: #==.
	methodBuilder jumpAheadTo: #end if: true.
	methodBuilder popTop.
	self visitInlinedBlockNode: args first.
	methodBuilder jumpAheadTarget: #end
]

OCASTTranslatorForValue >> emitIfTrue: aMessageNode
[
	self visitNode: aMessageNode receiver.
	methodBuilder jumpAheadTo: #else if: false.
	self visitInlinedBlockNode: aMessageNode arguments first.
	methodBuilder jumpAheadTo: #end.
	methodBuilder jumpAheadTarget: #else.
	methodBuilder pushLiteral: nil.
	methodBuilder jumpAheadTarget: #end
]

OCASTTranslatorForValue >> emitOr: aMessageNode
[
	self visitNode: aMessageNode receiver.
	methodBuilder
		pushDup;
		jumpAheadTo: #end if: true;
		popTop.
	self visitInlinedBlockNode: aMessageNode arguments first.
	methodBuilder jumpAheadTarget: #end
]

OCASTTranslatorForValue >> emitWhileFalse: aMessageNode
[
	super emitWhileFalse: aMessageNode.
	methodBuilder pushLiteral: nil
]

OCASTTranslatorForValue >> emitWhileTrue: aMessageNode
[
	super emitWhileTrue: aMessageNode.
	methodBuilder pushLiteral: nil
]

OCASTTranslatorForValue >> visitSequenceNode: aSequenceNode
[
	| statements |
	statements := aSequenceNode statements.
	statements ifEmpty: [ methodBuilder pushLiteral: nil.
			^ self ].
	statements allButLastDo: [ :each | effectTranslator visitNode: each ].
	self visitNode: statements last
]

