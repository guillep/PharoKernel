OpalCompiler
	superclass: #AbstractCompiler;
	instanceVariables: #(#ast #source #context #receiver #compilationContext #compilationContextClass #useFaultyForParsing );
	package: #'OpalCompiler-Core'.

OpalCompiler >> category: aCategory
[
	self compilationContext category: aCategory
]

OpalCompiler >> class: aClass
[
	self compilationContext class: aClass
]

OpalCompiler >> compilationContext
[
	^ compilationContext ifNil: [ compilationContext := self compilationContextClass default ]
]

OpalCompiler >> compilationContext: anObject
[
	compilationContext := anObject
]

OpalCompiler >> compilationContextClass
[
	^ compilationContextClass ifNil: [ CompilationContext ]
]

OpalCompiler >> compilationContextClass: aClass
[
	compilationContextClass := aClass
]

OpalCompiler >> compile
[
	| cm |
	[ [ ast := self parse.
	self doSemanticAnalysis ]
		on: OCSourceCodeChanged
		do: [ :notification | self source: notification newSourceCode.
			notification retry ].
	cm := ast generate: self compilationContext compiledMethodTrailer ]
		on: SyntaxErrorNotification
		do: [ :exception | self compilationContext requestor
				ifNotNil: [ self compilationContext requestor notify: exception errorMessage , ' ->' at: exception location in: exception errorCode.
					^ self compilationContext failBlock value ]
				ifNil: [ exception pass ] ].
	^ cm
]

OpalCompiler >> compile: textOrString
[
	^ self
		source: textOrString;
		compile
]

OpalCompiler >> compiledMethodTrailer: bytes
[
	self compilationContext compiledMethodTrailer: bytes
]

OpalCompiler >> context: aContext
[
	context := aContext
]

OpalCompiler >> doSemanticAnalysis
[
	^ [ ast doSemanticAnalysisInContext: self compilationContext ]
		on: OCSemanticError
		do: [ :ex | ex defaultAction.
			^ self compilationContext failBlock value ]
]

OpalCompiler >> environment: anSmallTalkImage
[
	self compilationContext environment: anSmallTalkImage
]

OpalCompiler >> evaluate
[
	"Compiles the sourceStream into a parse tree, then generates code into
	 a method. If aContext is not nil, the text can refer to temporaries in that
	 context (the Debugger uses this). If aRequestor is not nil, then it will receive
	 a notify:at: message before the attempt to evaluate is aborted. Finally, the 
	 compiled method is invoked from here via withArgs:executeMethod:, hence
	 the system no longer creates Doit method litter on errors."

	| value selectedSource itsSelection itsSelectionString |
	self class: (context ifNil: [ receiver class ] ifNotNil: [ context method methodClass ]).
	self noPattern: true.
	selectedSource := ((self compilationContext requestor respondsTo: #selection)
		and: [ (itsSelection := self compilationContext requestor selection) notNil
				and: [ (itsSelectionString := itsSelection asString) isEmptyOrNil not ] ])
		ifTrue: [ itsSelectionString ]
		ifFalse: [ source ].
	self source: selectedSource.
	value := receiver
		withArgs: (context ifNil: [ #() ] ifNotNil: [ {context} ])
		executeMethod: self translate generateWithSource.
	self compilationContext logged
		ifTrue: [ SystemAnnouncer uniqueInstance evaluated: selectedSource contents context: context ].
	^ value
]

OpalCompiler >> failBlock: aBlock
[
	self compilationContext failBlock: aBlock
]

OpalCompiler >> format
[
	^ self parse formattedCode
]

OpalCompiler >> format: textOrString
[
	^ self
		source: textOrString;
		format
]

OpalCompiler >> logged: aBoolean
[
	self compilationContext logged: aBoolean
]

OpalCompiler >> noPattern: aBoolean
[
	self compilationContext noPattern: aBoolean
]

OpalCompiler >> options: anOptionsArray
[
	self compilationContext parseOptions: anOptionsArray
]

OpalCompiler >> parse
[
	| expression selector arguments method |
	self compilationContext noPattern
		ifFalse: [ ^ self parseMethod ].
	expression := self parseExpression asSequenceNode transformLastToReturn.
	context
		ifNil: [ selector := #DoIt.
			arguments := #() ]
		ifNotNil: [ selector := #DoItIn:.
			arguments := {(RBVariableNode named: 'ThisContext')} ].
	method := RBMethodNode selector: selector arguments: arguments body: expression.
	context
		ifNotNil: [ context tempNames
				do: [ :tempName | method := method rewriteTempNamedWrite: tempName forContext: context.
					method := method rewriteTempNamedRead: tempName forContext: context ] ].
	^ method
]

OpalCompiler >> parse: textOrString
[
	^ self
		source: textOrString;
		parse
]

OpalCompiler >> parseExpression
[
	| parseClass |
	parseClass := self compilationContext parserClass.
	^ self useFaultyForParsing
		ifTrue: [ parseClass parseFaultyExpression: source contents ]
		ifFalse: [ parseClass parseExpression: source contents ]
]

OpalCompiler >> parseLiterals: aString
[
	^ RBExplicitVariableParser parseLiterals: aString
]

OpalCompiler >> parseMethod
[
	| parseClass |
	parseClass := self compilationContext parserClass.
	^ self useFaultyForParsing
		ifTrue: [ parseClass parseFaultyMethod: source contents ]
		ifFalse: [ parseClass parseMethod: source contents ]
]

OpalCompiler >> parseSelector: aString
[
	"Answer the message selector for the argument, aString, which should parse successfully up to the temporary declaration or the end of the method header."

	^ [ RBExplicitVariableParser parseMethodPattern: aString ]
		on: Error
		do: [ nil ]
]

OpalCompiler >> receiver: anObject
[
	receiver := anObject
]

OpalCompiler >> requestor: aRequestor
[
	self compilationContext requestor: aRequestor.
	self compilationContext interactive: (UIManager default interactiveParserFor: self compilationContext requestor)
]

OpalCompiler >> source: aString
[
	source := aString readStream
]

OpalCompiler >> translate
[
	[ self compile ]
		on: ReparseAfterSourceEditing
		do: [ :ex | self source: ex newSource readStream.
			self compile ].
	^ ast
]

OpalCompiler >> useFaultyForParsing
[
	^ useFaultyForParsing ifNil: [ useFaultyForParsing := false ]
]

OpalCompiler >> useFaultyForParsing: anObject
[
	useFaultyForParsing := anObject
]

OpalCompiler class >> debuggerMethodMapForMethod: aMethod
[
	^ DebuggerMethodMapOpal forMethod: aMethod
]

OpalCompiler class >> defaultOptions
[
	^ #(#+ #optionInlineIf #+ #optionInlineIfNil #+ #optionInlineAndOr #+ #optionInlineWhile #+ #optionInlineToDo #+ #optionInlineCase #- #optionInlineTimesRepeat #- #optionIlineNone #- #optionLongIvarAccessBytecodes #+ #optionOptimizeIR)	"by default we inline all optimized constructs"
]

OpalCompiler class >> evaluate: textOrString
[
	^ self new
		source: textOrString;
		evaluate
]

OpalCompiler class >> evaluate: textOrString for: anObject logged: logFlag
[
	"See Compiler|evaluate:for:notifying:logged:. If a compilation error occurs, 
	a Syntax Error view is created rather than notifying any requestor."

	^ self new
		source: textOrString;
		logged: logFlag;
		receiver: anObject;
		evaluate
]

OpalCompiler class >> evaluate: textOrString for: anObject notifying: aController logged: logFlag
[
	"Compile and execute the argument, textOrString with respect to the class 
	of anObject. If a compilation error occurs, notify aController. If both 
	compilation and execution are successful then, if logFlag is true, log 
	(write) the text onto a system changes file so that it can be replayed if 
	necessary."

	^ self new
		source: textOrString;
		logged: logFlag;
		receiver: anObject;
		requestor: aController;
		evaluate
]

OpalCompiler class >> evaluate: textOrString logged: logFlag
[
	"See Compiler|evaluate:for:notifying:logged:. If a compilation error occurs, 
	a Syntax Error view is created rather than notifying any requestor. 
	Compilation is carried out with respect to nil, i.e., no object."

	^ self new
		source: textOrString;
		logged: logFlag;
		evaluate
]

OpalCompiler class >> evaluate: textOrString notifying: aController logged: logFlag
[
	"See Compiler|evaluate:for:notifying:logged:. Compilation is carried out 
	with respect to nil, i.e., no object."

	^ self new
		source: textOrString;
		logged: logFlag;
		requestor: aController;
		evaluate
]

OpalCompiler class >> format: textOrStream in: aClass notifying: aRequestor
[
	^ self new
		source: textOrStream;
		class: aClass;
		requestor: aRequestor;
		format
]

OpalCompiler class >> isActive
[
	^ Smalltalk compilerClass == self
]

OpalCompiler class >> recompileAll
[
	"Recompile all classes and traits in the system."

	Smalltalk image recompile
]

