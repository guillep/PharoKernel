OCAbstractMethodScope
	superclass: #OCAbstractScope;
	instanceVariables: #(#thisContextVar #tempVars #copiedVars #tempVector #id );
	package: #'OpalCompiler-Core'.

OCAbstractMethodScope >> addCopyingTemp: aTempVar
[
	^ copiedVars
		add:
			(OCCopyingTempVariable new
				originalVar: aTempVar originalVar;
				name: aTempVar name;
				index: tempVars size;
				escaping: aTempVar escaping;
				usage: aTempVar usage;
				scope: self;
				yourself)
]

OCAbstractMethodScope >> addCopyingTempNamed: name
[
	^ copiedVars add: (OCCopyingTempVariable new
				name: name;
				index: tempVars size;
				scope: self;
				yourself)
]

OCAbstractMethodScope >> addCopyingTempToAllScopesUpToDefTemp: aVar
[
	(self hasCopyingTempNamed: aVar name)
		ifFalse: [ self addCopyingTemp: aVar ].
	tempVars at: aVar name ifPresent: [ :v | ^ self ].
	^ self outerScope addCopyingTempToAllScopesUpToDefTemp: aVar
]

OCAbstractMethodScope >> addCopyingTempToAllScopesUpToDefVector: aName
[
	(self hasCopyingTempNamed: aName)
		ifFalse: [ self addCopyingTempNamed: aName ].
	self tempVectorName = aName
		ifTrue: [ ^ self ].
	^ self outerScope addCopyingTempToAllScopesUpToDefVector: aName
]

OCAbstractMethodScope >> addTemp: name
[
	^ tempVars add: (OCTempVariable new
				name: name;
				index: tempVars size;
				scope: self;
				yourself)
]

OCAbstractMethodScope >> addVectorTemp: aTemp
[
	^ tempVector
		add:
			(OCVectorTempVariable new
				name: aTemp name;
				vectorName: self tempVectorName;
				index: tempVector size;
				scope: self;
				usage: aTemp usage;
				escaping: aTemp escaping;
				yourself)
]

OCAbstractMethodScope >> allTempNames
[
	^ self allTemps collect: #name
]

OCAbstractMethodScope >> allTemps
[
	"return all temps defined, even the ones in the outer scope that are not used in the current.
	 This includes the arguments
	 We do not need to care about shadowed temps as temp shadowing is not allowed."

	| temps |
	temps := OrderedCollection new.
	self outerScope allTemps do: [ :var | (self localTempNames includes: var name)
				ifFalse: [ temps add: var ] ].
	temps addAll: self localTemps.
	^ temps asArray
]

OCAbstractMethodScope >> copiedVars
[
	^ copiedVars
]

OCAbstractMethodScope >> hasCopyingTempNamed: name
[
	^ self copiedVars anySatisfy: [ :each | each name = name ]
]

OCAbstractMethodScope >> id: int
[
	id := int
]

OCAbstractMethodScope >> initialize
[
	tempVars := OCKeyedSet keyBlock: [ :var | var name ].
	copiedVars := OCKeyedSet keyBlock: [ :var | var name ].
	tempVector := OCKeyedSet keyBlock: [ :var | var name ].
	id := 0.
	thisContextVar := OCSpecialVariable new
		name: 'thisContext';
		scope: self;
		yourself
]

OCAbstractMethodScope >> isBlockScope
[
	^ false
]

OCAbstractMethodScope >> isMethodScope
[
	^ false
]

OCAbstractMethodScope >> localTempNames
[
	^ self localTemps collect: [ :each | each name ]
]

OCAbstractMethodScope >> localTemps
[
	"all temps accessed in the context... for tempVectors, it takes all the vars even those not used here"

	| localVars |
	localVars := OrderedCollection new.
	self copiedVars
		do: [ :var | var isStoringTempVector
				ifTrue: [ var tempVectorForTempStoringIt do: [ :tempVectorVars | localVars add: tempVectorVars ] ] ].
	self tempVars do: [ :var | localVars add: var ].
	^ localVars asArray
]

OCAbstractMethodScope >> lookupVar: name
[
	copiedVars at: name ifPresent: [ :v | ^ v ].
	tempVector at: name ifPresent: [ :v | ^ v ].
	tempVars at: name ifPresent: [ :v | ^ v ].
	name = 'thisContext'
		ifTrue: [ ^ thisContextVar ].
	^ self outerScope lookupVar: name
]

OCAbstractMethodScope >> lookupVarForDeclaration: name
[
	tempVars at: name ifPresent: [ :v | ^ v ].
	name = 'thisContext'
		ifTrue: [ ^ thisContextVar ].
	^ self outerScope lookupVarForDeclaration: name
]

OCAbstractMethodScope >> moveToVectorTemp: aTempVar
[
	self addVectorTemp: aTempVar.
	self removeTemp: aTempVar
]

OCAbstractMethodScope >> newBlockScope: int
[
	^ OCBlockScope new
		outerScope: self;
		id: int;
		yourself
]

OCAbstractMethodScope >> newOptimizedBlockScope: int
[
	^ OCOptimizedBlockScope new
		outerScope: self;
		id: int;
		yourself
]

OCAbstractMethodScope >> outerNotOptimizedScope
[
	^ self
]

OCAbstractMethodScope >> outerOffsetTo: aScope
[
	"return how many scopes up from me aScope is. We ignore optimized scopes so the resulting offset maps to
	 contexts"

	| offset scope |
	offset := 0.
	scope := self.
	[ scope == aScope ]
		whileFalse: [ scope isOptimizedBlockScope
				ifTrue: [ scope := scope outerNotOptimizedScope ]
				ifFalse: [ offset := offset + 1.
					scope isInstanceScope
						ifTrue: [ ^ 0 ].
					scope := scope outerScope ] ].
	^ offset
]

OCAbstractMethodScope >> popScope
[
	"Propogate free var usages to their outer vars, then return outer scope"

	^ self outerScope
]

OCAbstractMethodScope >> printOn: stream
[
	super printOn: stream.
	stream space.
	self scopeLevel printOn: stream
]

OCAbstractMethodScope >> removeTemp: tempVar
[
	tempVars remove: tempVar.
	tempVars do: [ :var | var index > tempVar index
				ifTrue: [ var index: var index - 1 ] ]
]

OCAbstractMethodScope >> tempVarNames
[
	^ self tempVars collect: [ :each | each name ]
]

OCAbstractMethodScope >> tempVars
[
	^ tempVars asSortedCollection: [ :x :y | x index <= y index ]
]

OCAbstractMethodScope >> tempVector
[
	^ tempVector
]

OCAbstractMethodScope >> tempVectorName
[
	"the name of the tempVector is not a valid name of a temp variable
	 This way we avoid name clashes "

	^ '0vector' , id asString
]

