Clipboard
	instanceVariables: #(#contents #recent );
	classVariables: #(#Default );
	package: #'System-Clipboard'.

Clipboard >> chooseRecentClipping
[
	"Choose by menu from among the recent clippings"

	"Clipboard chooseRecentClipping"

	recent ifNil: [ ^ nil ].
	^ UIManager default
		chooseFrom:
			(recent
				collect: [ :txt | ((txt asString contractTo: 50) copyReplaceAll: Character cr asString with: '\')
						copyReplaceAll: Character tab asString
						with: '|' ])
		values: recent
]

Clipboard >> clipboardText
[
	"Return the text currently in the clipboard. If the system clipboard is empty, or if it differs from the Smalltalk clipboard text, use the Smalltalk clipboard. This is done since (a) the Mac clipboard gives up on very large chunks of text and (b) since not all platforms support the notion of a clipboard."

	| string decodedString |
	string := self primitiveClipboardText.
	(string isEmpty or: [ string = contents asString ])
		ifTrue: [ ^ contents ].
	decodedString := string convertFromWithConverter: UTF8TextConverter new.
	decodedString := decodedString replaceAll: 10 asCharacter with: 13 asCharacter.
	^ decodedString = contents asString
		ifTrue: [ contents ]
		ifFalse: [ decodedString asText ]
]

Clipboard >> clipboardText: text
[
	| string |
	string := text asString.
	self noteRecentClipping: text asText.
	contents := text asText.
	string := string convertToWithConverter: UTF8TextConverter new.
	self primitiveClipboardText: string
]

Clipboard >> initialize
[
	super initialize.
	contents := '' asText.
	recent := OrderedCollection new
]

Clipboard >> noteRecentClipping: text
[
	"Keep most recent clippings in a queue for pasteRecent (paste... command)"

	text isEmpty
		ifTrue: [ ^ self ].
	text size > 50000
		ifTrue: [ ^ self ].
	(recent includes: text)
		ifTrue: [ ^ self ].
	recent addFirst: text.
	[ recent size > 5 ] whileTrue: [ recent removeLast ]
]

Clipboard >> primitiveClipboardText
[
	"Get the current clipboard text. Return the empty string if the primitive fails."

	<primitive: 141>
	^ ''
]

Clipboard >> primitiveClipboardText: aString
[
	"Set the current clipboard text to the given string."

	"don't fail if the primitive is not implemented"

	<primitive: 141>
	
]

Clipboard class >> chooseRecentClipping
[
	"Clipboard chooseRecentClipping"

	"Choose by menu from among the recent clippings"

	^ self default chooseRecentClipping
]

Clipboard class >> clipboardText
[
	"Clipboard clipboardText"

	^ self default clipboardText
]

Clipboard class >> clipboardText: aText
[
	^ self default clipboardText: aText
]

Clipboard class >> default
[
	^ Default ifNil: [ Default := Smalltalk os clipboardClass new ]
]

Clipboard class >> initialize
[
	"Clipboard initialize"

	Smalltalk addToStartUpList: self.
	Smalltalk addToShutDownList: self.
	self startUp: true
]

Clipboard class >> shutDown: quitting
[
	"Pharo is shutting down. If this platform requires specific shutdown code, this is a great place to put it."

	
]

Clipboard class >> startUp: resuming
[
	"Pharo is starting up. If this platform requires specific intialization, this is a great place to put it."

	resuming
		ifTrue: [ Default := nil ]
]

