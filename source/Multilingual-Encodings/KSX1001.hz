Class
	name: #KSX1001;
	superclass: #ClassEncodedCharSet;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #();
	classVariables: #();
	package: #'Multilingual-Encodings'.

Metaclass
	name: #KSX1001;
	instanceVariables: #().

Metaclass KSX1001 >> compoundTextSequence
[
^ compoundTextSequence
]

Metaclass KSX1001 >> initialize
[
	"	KSX1001 initialize"
compoundTextSequence := String	streamContents: [ :stream | 		stream nextPut: Character escape.		stream nextPut: $$.		stream nextPut: $(.		stream nextPut: $C ]
]

Metaclass KSX1001 >> isLetter: char
[
| value leading |leading := char leadingChar.value := char charCode.leading = 0	ifTrue: [ ^ super isLetter: char ].value := value // 94 + 1.^ 1 <= value and: [ value < 84 ]
]

Metaclass KSX1001 >> leadingChar
[
^ 3
]

Metaclass KSX1001 >> nextPutValue: ascii toStream: aStream withShiftSequenceIfNeededForTextConverterState: state
[
| c1 c2 |state charSize: 2.state g0Leading ~= self leadingChar	ifTrue: [ 		state g0Leading: self leadingChar.		state g0Size: 2.		aStream basicNextPutAll: compoundTextSequence ].c1 := ascii // 94 + 33.c2 := ascii \\ 94 + 33.^ aStream	basicNextPut: (Character value: c1);	basicNextPut: (Character value: c2)
]

Metaclass KSX1001 >> ucsTable
[
^ UCSTable ksx1001Table
]

