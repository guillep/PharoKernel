GB2312
	superclass: #EncodedCharSet;
	package: #'Multilingual-Encodings'.

GB2312 class >> compoundTextSequence
[
	^ compoundTextSequence
]

GB2312 class >> initialize
[
	"
	GB2312 initialize
"

	compoundTextSequence := String
		streamContents: [ :stream | stream nextPut: Character escape.
			stream nextPut: $$.
			stream nextPut: $(.
			stream nextPut: $A ]
]

GB2312 class >> isLetter: char
[
	| value leading |
	leading := char leadingChar.
	value := char charCode.
	leading = 0
		ifTrue: [ ^ super isLetter: char ].
	value := value // 94 + 1.
	^ 1 <= value and: [ value < 84 ]
]

GB2312 class >> leadingChar
[
	^ 2
]

GB2312 class >> nextPutValue: ascii toStream: aStream withShiftSequenceIfNeededForTextConverterState: state
[
	| c1 c2 |
	state charSize: 2.
	state g0Leading ~= self leadingChar
		ifTrue: [ state g0Leading: self leadingChar.
			state g0Size: 2.
			aStream basicNextPutAll: compoundTextSequence ].
	c1 := ascii // 94 + 33.
	c2 := ascii \\ 94 + 33.
	^ aStream
		basicNextPut: (Character value: c1);
		basicNextPut: (Character value: c2)
]

GB2312 class >> ucsTable
[
	^ UCSTable gb2312Table
]

