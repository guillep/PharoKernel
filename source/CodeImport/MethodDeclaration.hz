MethodDeclaration
	superclass: #BehaviorInstallingDeclaration;
	instanceVariables: #(#categoryName #stamp );
	package: #CodeImport.

MethodDeclaration >> category: aCategoryName
[
	categoryName := aCategoryName
]

MethodDeclaration >> handleMissingBehavior
[
	"self error: ('Cannot install method in unexistent behavior {1}' format: {(behaviorName asString)})"

	(MissingClassError className: behaviorName asString) signal
]

MethodDeclaration >> import
[
	^ self importFor: nil
]

MethodDeclaration >> importFor: requestor
[
	self existsBehavior
		ifFalse: [ self handleMissingBehavior ].
	requestor ifNotNil: [ requestor contents ifNil: [ requestor contents: contents ] ].
	^ self targetClass
		compile: contents
		classified: categoryName
		withStamp: stamp
		notifying: requestor
]

MethodDeclaration >> stamp: aMethodStamp
[
	stamp := aMethodStamp
]

MethodDeclaration class >> contents: someContents behaviorName: behaviorName isMeta: isMeta category: categoryName stamp: stamp
[
	^ self new
		contents: someContents;
		behaviorName: behaviorName;
		isMeta: isMeta;
		category: categoryName;
		stamp: stamp;
		yourself
]

