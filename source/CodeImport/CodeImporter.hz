CodeImporter
	instanceVariables: #(#readStream #codeDeclarations #parserClass #requestor );
	package: #CodeImport.

CodeImporter >> codeDeclarations
[
	^ codeDeclarations
]

CodeImporter >> evaluateDeclarations
[
	"Evaluates the declarations from the text in the file and answers the last result"

	| value |
	self parseDeclarations.
	self codeDeclarations
		do: [ :declaration | requestor ifNotNil: [ requestor contents: declaration contents ].
			value := declaration importFor: requestor ].
	self flushChangesFile.
	^ value
]

CodeImporter >> file: aFileStream
[
	self readStream: aFileStream.
	self selectTextConverterForCode.
	self requestor: (FileCompilerRequestor fileStream: aFileStream)
]

CodeImporter >> flushChangesFile
[
	"Yes, we need to do this in order to flush the file, puaj"

	Smalltalk logChange: '----End fileIn----'
]

CodeImporter >> initialize
[
	codeDeclarations := OrderedCollection new.
	parserClass := ChunkFileFormatParser
]

CodeImporter >> parseDeclarations
[
	codeDeclarations := (parserClass for: readStream) parseDeclarations
]

CodeImporter >> readStream: aReadStream
[
	readStream := aReadStream
]

CodeImporter >> requestor
[
	^ requestor
]

CodeImporter >> requestor: anObject
[
	requestor := anObject
]

CodeImporter >> selectTextConverterForCode
[
	self flag: #fix.	"This should not be here probably."	"We need to see the first three bytes in order to see the origin of the file"
	readStream binary.
	(readStream next: 3) = #[16rEF 16rBB 16rBF]
		ifTrue: [ readStream converter: UTF8TextConverter new ]
		ifFalse: [ readStream converter: MacRomanTextConverter new ].	"we restore the position to the start of the file again"
	readStream position: 0.	"We put the file in text mode for the file in"
	readStream text
]

CodeImporter class >> evaluateFileNamed: aFileName
[
	^ (self fileNamed: aFileName) evaluateDeclarations
]

CodeImporter class >> evaluateFileStream: aFileStream
[
	^ (self fileStream: aFileStream) evaluateDeclarations
]

CodeImporter class >> evaluateReadStream: aReadStream
[
	^ (self readStream: aReadStream) evaluateDeclarations
]

CodeImporter class >> evaluateString: aString
[
	^ (self fromString: aString) evaluateDeclarations
]

CodeImporter class >> fileNamed: aFileName
[
	^ self file: (FileStream readOnlyFileNamed: aFileName)
]

CodeImporter class >> fileStream: aFileStream
[
	^ self new
		file: aFileStream;
		yourself
]

CodeImporter class >> fromString: aByteString
[
	^ self readStream: aByteString readStream
]

CodeImporter class >> readStream: aReadStream
[
	^ self new
		readStream: aReadStream;
		yourself
]

