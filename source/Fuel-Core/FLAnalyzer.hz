FLAnalyzer
	instanceVariables: #(#internalClasses #pluggableSubstitutions #globalMappersFactory #analysisFactory #generalMapperFactory #globalSymbols #internalMethods #globalMappers #globalEnvironment );
	package: #'Fuel-Core'.

FLAnalyzer >> analysisFor: anObject
[
	^ analysisFactory value: anObject
]

FLAnalyzer >> considerGlobal: aSymbol
[
	globalSymbols add: aSymbol
]

FLAnalyzer >> firstInMapperChain
[
	^ self mappers first
]

FLAnalyzer >> fuelAccept: aGeneralMapper
[
	^ aGeneralMapper visitSubstitution: self by: nil
]

FLAnalyzer >> generalMapper
[
	^ generalMapperFactory value
]

FLAnalyzer >> globalEnvironment
[
	"Answer a dictionary where the look up for global symbols will be done during serialization."

	^ globalEnvironment
]

FLAnalyzer >> globalEnvironment: aDictionary
[
	globalEnvironment := aDictionary
]

FLAnalyzer >> globalMappers
[
	^ globalMappersFactory value
]

FLAnalyzer >> globalSymbols
[
	"Answer the collection of symbols whose associations and values in Smalltalk globals will be considered as globals by Fuel."

	^ globalSymbols
]

FLAnalyzer >> initialize
[
	super initialize.
	self setDefaultAnalysis.
	self useLightMappers.
	pluggableSubstitutions := OrderedCollection new.
	internalClasses := IdentitySet new.
	internalMethods := IdentitySet new.
	globalEnvironment := self class environment.
	globalSymbols := self class defaultGlobalSymbols asIdentitySet
]

FLAnalyzer >> lightGlobalMappers
[
	^ globalSymbols isEmpty
		ifTrue: [ #() ]
		ifFalse: [ Array with: (FLLightGlobalMapper for: globalSymbols in: self globalEnvironment) ]
]

FLAnalyzer >> mappers
[
	^ OrderedCollection new
		addAll: self pluggableSubstitutionMappers;
		addAll: self globalMappers;
		add: self generalMapper;
		reduceRight: [ :left :right | left next: right ];
		yourself
]

FLAnalyzer >> pluggableSubstitutionMappers
[
	^ pluggableSubstitutions collect: [ :aLink | FLPluggableSubstitutionMapper when: aLink key substituteBy: aLink value ]
]

FLAnalyzer >> privateFirstInMapperChain
[
	^ self privateMappers first
]

FLAnalyzer >> privateMappers
[
	^ OrderedCollection new
		addAll: self globalMappers;
		add: self generalMapper;
		reduceRight: [ :left :right | left next: right ];
		yourself
]

FLAnalyzer >> setDefaultAnalysis
[
	analysisFactory := [ :anObject | (FLAnalysis newWith: self firstInMapperChain private: self privateFirstInMapperChain root: anObject)
		run;
		yourself ]
]

FLAnalyzer >> useLightMappers
[
	globalMappersFactory := [ self lightGlobalMappers ].
	generalMapperFactory := [ FLLightGeneralMapper new ]
]

FLAnalyzer >> when: aCondition substituteBy: aFactory
[
	pluggableSubstitutions add: aCondition -> aFactory
]

FLAnalyzer class >> defaultGlobalSymbols
[
	^ #(#Smalltalk #SourceFiles #Transcript #Undeclared #Display #TextConstants #ActiveWorld #ActiveHand #ActiveEvent #Sensor #Processor #ImageImports #SystemOrganization #World)
		select: [ :each | self environment includesKey: each ]
]

FLAnalyzer class >> newDefault
[
	"Returns an instance with default configuration."

	^ self new
]

