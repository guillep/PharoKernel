MessageAsTempNode
	superclass: #MessageNode;
	package: #Compiler.

MessageAsTempNode >> asStorableNode: encoder
[
	"This node is a message masquerading as a temporary variable.
	It currently has the form {homeContext tempAt: offset}.
	We need to generate code for {expr storeAt: offset inTempFrame: homeContext},
	where the expr, the block argument, is already on the stack.
	This, in turn will get turned into {homeContext tempAt: offset put: expr}
	at runtime if nobody disturbs storeAt:inTempFrame: in Object (not clean)"

	^ MessageAsTempNode new
		receiver: nil
		selector: #storeAt:inTempFrame:
		arguments: (arguments copyWith: receiver)
		precedence: precedence
		from: encoder	"suppress code generation for reciever already on stack"
]

MessageAsTempNode >> code
[
	"Allow synthetic temp nodes to be sorted by code"

	^ arguments first literalValue
]

MessageAsTempNode >> emitCodeForStorePop: stack encoder: encoder
[
	"This node has the form {expr storeAt: offset inTempFrame: homeContext},
	where the expr, the block argument, is already on the stack."

	^ self emitCodeForEffect: stack encoder: encoder
]

MessageAsTempNode >> sizeCodeForStorePop: encoder
[
	"This node has the form {expr storeAt: offset inTempFrame: homeContext},
	where the expr, the block argument, is already on the stack."

	^ self sizeCodeForEffect: encoder
]

MessageAsTempNode >> store: expr from: encoder
[
	"ctxt tempAt: n -> ctxt tempAt: n put: expr (see Assignment).
	For assigning into temps of a context being debugged."

	selector key ~= #namedTempAt:
		ifTrue: [ ^ self error: 'cant transform this message' ].
	^ MessageAsTempNode new
		receiver: receiver
		selector: #namedTempAt:put:
		arguments: (arguments copyWith: expr)
		precedence: precedence
		from: encoder
]

