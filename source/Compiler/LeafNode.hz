LeafNode
	superclass: #ParseNode;
	instanceVariables: #(#key #code #index );
	package: #Compiler.

LeafNode >> analyseTempsWithin: scopeBlock rootNode: rootNode assignmentPools: assignmentPools
[
	"<BlockNode>"

	"<MethodNode>"

	"<Dictionary>"

	"This is a no-op except in TempVariableNode"

	^ self
]

LeafNode >> code
[
	^ code
]

LeafNode >> code: argIndex type: type
[
	argIndex ifNil: [ ^ type negated ].
	(CodeLimits at: type) > argIndex
		ifTrue: [ ^ (CodeBases at: type) + argIndex ].
	^ type * 256 + argIndex
]

LeafNode >> emitCodeForEffect: stack encoder: encoder
[
	^ self
]

LeafNode >> emitCodeForLoad: stack encoder: encoder
[
	"Default is to do nothing.
	 Subclasses may need to override."

	
]

LeafNode >> key
[
	^ key
]

LeafNode >> key: object code: byte
[
	key := object.
	code := byte
]

LeafNode >> key: object index: i type: type
[
	key := object.
	code := self code: i type: type.
	index := i
]

LeafNode >> name: ignored key: object code: byte
[
	key := object.
	code := byte
]

LeafNode >> reserve: encoder
[
	"If this is a yet unused literal of type -code, reserve it."

	code < 0
		ifTrue: [ code := self code: (index := encoder litIndex: key) type: 0 - code ]
]

LeafNode >> sizeCodeForEffect: encoder
[
	^ 0
]

LeafNode >> sizeCodeForLoad: encoder
[
	"Default is to do nothing.
	 Subclasses may need to override."

	^ 0
]

LeafNode >> sizeCodeForValue: encoder
[
	self subclassResponsibility
]

LeafNode >> veryDeepFixupWith: deepCopier
[
	"If fields were weakly copied, fix them here.  If they were in the tree being copied, fix them up, otherwise point to the originals!!"

	super veryDeepFixupWith: deepCopier.
	key := deepCopier references at: key ifAbsent: [ key ]
]

LeafNode >> veryDeepInner: deepCopier
[
	"Copy all of my instance variables.  Some need to be not copied at all, but shared.  	Warning!!  Every instance variable defined in this class must be handled.  We must also implement veryDeepFixupWith:.  See DeepCopier class comment."

	super veryDeepInner: deepCopier.	"key := key.		Weakly copied"
	code := code veryDeepCopyWith: deepCopier.
	index := index veryDeepCopyWith: deepCopier
]

