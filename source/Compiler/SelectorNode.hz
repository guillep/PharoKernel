SelectorNode
	superclass: #LeafNode;
	package: #Compiler.

SelectorNode >> accept: aVisitor
[
	^ aVisitor visitSelectorNode: self
]

SelectorNode >> emitCode: stack args: nArgs encoder: encoder
[
	self
		emitCode: stack
		args: nArgs
		encoder: encoder
		super: false
]

SelectorNode >> emitCode: stack args: nArgs encoder: encoder super: supered
[
	stack pop: nArgs.
	^ supered
		ifTrue: [ encoder genSendSuper: index numArgs: nArgs ]
		ifFalse: [ encoder genSend: (code < Send
						ifTrue: [ code negated ]
						ifFalse: [ index ]) numArgs: nArgs ]
]

SelectorNode >> emitCodeForEffect: stack encoder: encoder
[
	self shouldNotImplement
]

SelectorNode >> emitCodeForValue: stack encoder: encoder
[
	self shouldNotImplement
]

SelectorNode >> isForFFICall
[
	^ key includesSubstring: '()/'
]

SelectorNode >> key: aSelector
[
	"This is for printing of FFI selectors."

	key := aSelector
]

SelectorNode >> name: literal key: object index: i type: type
[
	"For compatibility with Encoder>>name:key:class:type:set:"

	^ self key: object index: i type: type
]

SelectorNode >> printAsFFICallWithArguments: aSequence on: aStream indent: level
[
	aStream nextPutAll: (key copyUpTo: $)).
	aSequence do: [ :arg | arg printOn: aStream indent: level ] separatedBy: [ aStream nextPutAll: ', ' ].
	aStream nextPut: $)
]

SelectorNode >> printOn: aStream indent: level
[
	aStream nextPutAll: (key == nil
				ifTrue: [ '<key==nil>' ]
				ifFalse: [ key ])
]

SelectorNode >> reserve: encoder
[
	"If this is a yet unused literal of type -code, reserve it."

	code < 0
		ifTrue: [ code := self code: (index := encoder sharableLitIndex: key) type: 0 - code ]
]

SelectorNode >> sizeCode: encoder args: nArgs super: supered
[
	self reserve: encoder.
	^ supered
		ifTrue: [ code < Send
				ifTrue: [ code := self code: (index := encoder sharableLitIndex: key) type: 5 ].	"i.e. its a special selector"
			encoder sizeSendSuper: index numArgs: nArgs ]
		ifFalse: [ self flag: #yuck.	"special selector sends cause this problem"
			encoder sizeSend: (code < Send
						ifTrue: [ code negated ]
						ifFalse: [ index ]) numArgs: nArgs ]
]

SelectorNode >> sizeCodeForEffect: encoder
[
	self shouldNotImplement
]

SelectorNode >> sizeCodeForValue: encoder
[
	self shouldNotImplement
]

