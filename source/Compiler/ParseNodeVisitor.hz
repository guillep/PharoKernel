ParseNodeVisitor
	package: #Compiler.

ParseNodeVisitor >> visitAssignmentNode: anAssignmentNode
[
	"N.B.  since assigment happens after the value is evaluated the value is visited first."

	anAssignmentNode value accept: self.
	anAssignmentNode variable accept: self
]

ParseNodeVisitor >> visitBlockNode: aBlockNode
[
	aBlockNode statements do: [ :statement | statement accept: self ]
]

ParseNodeVisitor >> visitBraceNode: aBraceNode
[
	aBraceNode elements do: [ :element | element accept: self ]
]

ParseNodeVisitor >> visitCascadeNode: aCascadeNode
[
	aCascadeNode receiver accept: self.
	aCascadeNode messages do: [ :message | self visitMessageNodeInCascade: message ]
]

ParseNodeVisitor >> visitCommentNode: aCommentNode
[
	
]

ParseNodeVisitor >> visitFieldNode: aFieldNode
[
	
]

ParseNodeVisitor >> visitInstanceVariableNode: anInstanceVariableNode
[
	
]

ParseNodeVisitor >> visitLiteralNode: aLiteralNode
[
	
]

ParseNodeVisitor >> visitLiteralVariableNode: aLiteralVariableNode
[
	
]

ParseNodeVisitor >> visitMessageNode: aMessageNode
[
	aMessageNode receiver accept: self.	"receiver notNil ifTrue: ''receiver is nil for cascades''		[receiver accept: self]."
	aMessageNode selector accept: self.
	aMessageNode argumentsInEvaluationOrder do: [ :argument | argument accept: self ]
]

ParseNodeVisitor >> visitMessageNodeInCascade: aMessageNode
[
	"receiver is nil for cascades"

	aMessageNode selector accept: self.
	aMessageNode argumentsInEvaluationOrder do: [ :argument | argument accept: self ]
]

ParseNodeVisitor >> visitMethodNode: aMethodNode
[
	aMethodNode block accept: self
]

ParseNodeVisitor >> visitNewArrayNode: aNewArrayNode
[
	
]

ParseNodeVisitor >> visitRemoteTempVectorNode: aRemoteTempVectorNode
[
	
]

ParseNodeVisitor >> visitReturnNode: aReturnNode
[
	aReturnNode expr accept: self
]

ParseNodeVisitor >> visitSelectorNode: aSelectorNode
[
	
]

ParseNodeVisitor >> visitTempVariableNode: aTempVariableNode
[
	
]

ParseNodeVisitor >> visitVariableNode: aVariableNode
[
	
]

