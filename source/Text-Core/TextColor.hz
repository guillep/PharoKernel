TextColor
	superclass: #TextAttribute;
	instanceVariables: #(#color );
	package: #'Text-Core'.

TextColor >> = other
[
	^ other class == self class and: [ other color = color ]
]

TextColor >> color
[
	^ color
]

TextColor >> color: aColor
[
	color := aColor
]

TextColor >> dominates: other
[
	^ other class == self class
]

TextColor >> emphasizeScanner: scanner
[
	"Set the emphasis for text display"

	scanner textColor: color
]

TextColor >> hash
[
	^ color hash
]

TextColor >> printOn: aStream
[
	super printOn: aStream.
	aStream
		nextPutAll: ' code: ';
		print: color
]

TextColor >> writeScanOn: strm
[
	"Two formats.  c125000255 or cblue;"

	| nn |
	strm nextPut: $c.
	(nn := color name)
		ifNotNil: [ (self class respondsTo: nn)
				ifTrue: [ ^ strm
						nextPutAll: nn;
						nextPut: $; ] ].
	(Array with: color red with: color green with: color blue)
		do: [ :float | | str |
			str := '000' , (float * 255) asInteger printString.
			strm nextPutAll: (str copyFrom: str size - 2 to: str size) ]
]

TextColor class >> black
[
	^ self new color: Color black
]

TextColor class >> blue
[
	^ self new color: Color blue
]

TextColor class >> color: aColor
[
	^ self new color: aColor
]

TextColor class >> cyan
[
	^ self new color: Color cyan
]

TextColor class >> gray
[
	^ self new color: Color gray
]

TextColor class >> green
[
	^ self new color: Color green
]

TextColor class >> magenta
[
	^ self new color: Color magenta
]

TextColor class >> red
[
	^ self new color: Color red
]

TextColor class >> scanFrom: strm
[
	"read a color in the funny format used by Text styles on files. c125000255 or cblue;"

	| r g b |
	strm peek isDigit
		ifTrue: [ r := (strm next: 3) asNumber.
			g := (strm next: 3) asNumber.
			b := (strm next: 3) asNumber.
			^ self color: (Color
						r: r
						g: g
						b: b
						range: 255) ].	"A name of a color"
	^ self color: (Color perform: (strm upTo: $;) asSymbol)
]

TextColor class >> white
[
	^ self new color: Color white
]

TextColor class >> yellow
[
	^ self new color: Color yellow
]

