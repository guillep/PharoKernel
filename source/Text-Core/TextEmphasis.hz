TextEmphasis
	superclass: #TextAttribute;
	instanceVariables: #(#emphasisCode #setMode );
	package: #'Text-Core'.

TextEmphasis >> = other
[
	^ other class == self class and: [ other emphasisCode = emphasisCode ]
]

TextEmphasis >> dominatedByCmd0
[
	"Cmd-0 should turn off emphasis"

	^ true
]

TextEmphasis >> dominates: other
[
	(emphasisCode = 0 and: [ other dominatedByCmd0 ])
		ifTrue: [ ^ true ].
	^ other class == self class and: [ emphasisCode = other emphasisCode ]
]

TextEmphasis >> emphasisCode
[
	^ emphasisCode
]

TextEmphasis >> emphasisCode: int
[
	emphasisCode := int.
	setMode := true
]

TextEmphasis >> emphasizeScanner: scanner
[
	"Set the emphasist for text scanning"

	scanner addEmphasis: emphasisCode
]

TextEmphasis >> hash
[
	"#hash is re-implemented because #= is re-implemented"

	^ emphasisCode hash
]

TextEmphasis >> printOn: strm
[
	super printOn: strm.
	strm
		nextPutAll: ' code: ';
		print: emphasisCode
]

TextEmphasis >> set
[
	^ setMode and: [ emphasisCode ~= 0 ]
]

TextEmphasis >> turnOff
[
	setMode := false
]

TextEmphasis >> writeScanOn: strm
[
	emphasisCode = 1
		ifTrue: [ strm nextPut: $b ].
	emphasisCode = 2
		ifTrue: [ strm nextPut: $i ].
	emphasisCode = 0
		ifTrue: [ strm nextPut: $n ].
	emphasisCode = 16
		ifTrue: [ strm nextPut: $= ].
	emphasisCode = 4
		ifTrue: [ strm nextPut: $u ]
]

TextEmphasis class >> bold
[
	^ self new emphasisCode: 1
]

TextEmphasis class >> italic
[
	^ self new emphasisCode: 2
]

TextEmphasis class >> narrow
[
	^ TextKern kern: -1
]

TextEmphasis class >> normal
[
	^ self new emphasisCode: 0
]

TextEmphasis class >> struckOut
[
	^ self new emphasisCode: 16
]

TextEmphasis class >> underlined
[
	^ self new emphasisCode: 4
]

