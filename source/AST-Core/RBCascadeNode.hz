RBCascadeNode
	superclass: #RBValueNode;
	instanceVariables: #(#messages #semicolons );
	package: #'AST-Core'.

RBCascadeNode >> = anObject
[
	self == anObject
		ifTrue: [ ^ true ].
	self class = anObject class
		ifFalse: [ ^ false ].
	self messages size = anObject messages size
		ifFalse: [ ^ false ].
	1 to: self messages size do: [ :i | (self messages at: i) = (anObject messages at: i)
			ifFalse: [ ^ false ] ].
	^ true
]

RBCascadeNode >> acceptVisitor: aProgramNodeVisitor
[
	^ aProgramNodeVisitor visitCascadeNode: self
]

RBCascadeNode >> bestNodeFor: anInterval
[
	| selectedChildren |
	(self intersectsInterval: anInterval)
		ifFalse: [ ^ nil ].
	(self containedBy: anInterval)
		ifTrue: [ ^ self ].
	messages reverseDo: [ :each | (each containedBy: anInterval)
				ifTrue: [ ^ each ] ].
	selectedChildren := (messages collect: [ :each | each bestNodeFor: anInterval ]) reject: [ :each | each isNil ].
	^ selectedChildren detect: [ :each | true ] ifNone: [ nil ]
]

RBCascadeNode >> children
[
	^ self messages
]

RBCascadeNode >> copyInContext: aDictionary
[
	^ self class new
		messages: (self copyList: self messages inContext: aDictionary);
		yourself
]

RBCascadeNode >> directlyUses: aNode
[
	^ messages last = aNode and: [ self isDirectlyUsed ]
]

RBCascadeNode >> equalTo: anObject withMapping: aDictionary
[
	self class = anObject class
		ifFalse: [ ^ false ].
	self messages size = anObject messages size
		ifFalse: [ ^ false ].
	1 to: self messages size do: [ :i | ((self messages at: i) equalTo: (anObject messages at: i) withMapping: aDictionary)
			ifFalse: [ ^ false ] ].
	^ true
]

RBCascadeNode >> hash
[
	^ self hashForCollection: self messages
]

RBCascadeNode >> isCascade
[
	^ true
]

RBCascadeNode >> isFaulty
[
	^ self messages anySatisfy: #isFaulty
]

RBCascadeNode >> match: aNode inContext: aDictionary
[
	aNode class = self class
		ifFalse: [ ^ false ].
	^ self matchList: messages against: aNode messages inContext: aDictionary
]

RBCascadeNode >> messages
[
	^ messages
]

RBCascadeNode >> messages: messageNodeCollection
[
	messages := messageNodeCollection.
	messages do: [ :each | each parent: self ]
]

RBCascadeNode >> messages: messageNodes semicolons: integerCollection
[
	self messages: messageNodes.
	semicolons := integerCollection
]

RBCascadeNode >> needsParenthesis
[
	^ parent ifNil: [ false ] ifNotNil: [ self precedence > parent precedence ]
]

RBCascadeNode >> postCopy
[
	super postCopy.
	self messages: (self messages collect: [ :each | each copy ])
]

RBCascadeNode >> precedence
[
	^ 4
]

RBCascadeNode >> receiver
[
	^ self messages first receiver
]

RBCascadeNode >> replaceNode: aNode withNode: anotherNode
[
	self messages: (messages collect: [ :each | each == aNode
						ifTrue: [ anotherNode ]
						ifFalse: [ each ] ])
]

RBCascadeNode >> semicolons
[
	^ semicolons
]

RBCascadeNode >> semicolons: anArray
[
	semicolons := anArray
]

RBCascadeNode >> startWithoutParentheses
[
	^ messages first start
]

RBCascadeNode >> statementComments
[
	| statementComments |
	statementComments := OrderedCollection withAll: self comments.
	statementComments addAll: messages first receiver statementComments.
	messages do: [ :each | each arguments do: [ :arg | statementComments addAll: arg statementComments ] ].
	^ statementComments asSortedCollection: [ :a :b | a first < b first ]
]

RBCascadeNode >> stopWithoutParentheses
[
	^ messages last stop
]

RBCascadeNode >> uses: aNode
[
	^ messages last = aNode and: [ self isUsed ]
]

RBCascadeNode >> whichNodeIsContainedBy: anInterval
[
	| selectedChildren |
	(self intersectsInterval: anInterval)
		ifFalse: [ ^ nil ].
	(self containedBy: anInterval)
		ifTrue: [ ^ self ].
	messages reverseDo: [ :each | (each containedBy: anInterval)
				ifTrue: [ ^ each ] ].
	selectedChildren := (messages collect: [ :each | each whichNodeIsContainedBy: anInterval ])
		reject: [ :each | each isNil ].
	^ selectedChildren detect: [ :each | true ] ifNone: [ nil ]
]

RBCascadeNode class >> messages: messageNodes
[
	^ self new messages: messageNodes
]

RBCascadeNode class >> messages: messageNodes semicolons: integerCollection
[
	^ self new messages: messageNodes semicolons: integerCollection
]

