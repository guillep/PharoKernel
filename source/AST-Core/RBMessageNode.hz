RBMessageNode
	superclass: #RBValueNode;
	instanceVariables: #(#receiver #selector #selectorParts #arguments );
	package: #'AST-Core'.

RBMessageNode >> = anObject
[
	self == anObject
		ifTrue: [ ^ true ].
	self class = anObject class
		ifFalse: [ ^ false ].
	(self receiver = anObject receiver and: [ self selector = anObject selector ])
		ifFalse: [ ^ false ].
	1 to: self arguments size do: [ :i | (self arguments at: i) = (anObject arguments at: i)
			ifFalse: [ ^ false ] ].
	^ true
]

RBMessageNode >> acceptVisitor: aProgramNodeVisitor
[
	^ aProgramNodeVisitor visitMessageNode: self
]

RBMessageNode >> arguments
[
	^ arguments ifNil: [ #() ] ifNotNil: [ arguments ]
]

RBMessageNode >> arguments: argCollection
[
	arguments := argCollection.
	arguments do: [ :each | each parent: self ]
]

RBMessageNode >> bestNodeFor: anInterval
[
	(self intersectsInterval: anInterval)
		ifFalse: [ ^ nil ].
	(self containedBy: anInterval)
		ifTrue: [ ^ self ].
	selectorParts
		do: [ :each | ((anInterval first between: each start and: each stop) or: [ each start between: anInterval first and: anInterval last ])
				ifTrue: [ ^ self ] ].
	self children do: [ :each | | node |
			node := each bestNodeFor: anInterval.
			node notNil
				ifTrue: [ ^ node ] ]
]

RBMessageNode >> buildSelector
[
	^ (String streamContents: [ :selectorStream | selectorParts do: [ :each | selectorStream nextPutAll: each value ] ])
		asSymbol
]

RBMessageNode >> children
[
	^ (OrderedCollection with: self receiver)
		addAll: self arguments;
		yourself
]

RBMessageNode >> copyInContext: aDictionary
[
	^ self class new
		receiver: (self receiver copyInContext: aDictionary);
		selectorParts: (self selectorParts collect: [ :each | each copy removePositions ]);
		arguments: (self arguments collect: [ :each | each copyInContext: aDictionary ]);
		yourself
]

RBMessageNode >> debugHighlightStart
[
	^ self selectorParts first start
]

RBMessageNode >> debugHighlightStop
[
	^ self stopWithoutParentheses
]

RBMessageNode >> equalTo: anObject withMapping: aDictionary
[
	self class = anObject class
		ifFalse: [ ^ false ].
	((self receiver equalTo: anObject receiver withMapping: aDictionary) and: [ self selector = anObject selector ])
		ifFalse: [ ^ false ].
	1 to: self arguments size do: [ :i | ((self arguments at: i) equalTo: (anObject arguments at: i) withMapping: aDictionary)
			ifFalse: [ ^ false ] ].
	^ true
]

RBMessageNode >> hash
[
	^ (self receiver hash bitXor: self selector hash) bitXor: (self hashForCollection: self arguments)
]

RBMessageNode >> isBinary
[
	^ (self isUnary or: [ self isKeyword ]) not
]

RBMessageNode >> isCascaded
[
	^ parent notNil and: [ parent isCascade ]
]

RBMessageNode >> isContainmentReplacement: aNode
[
	^ (self mappingFor: self receiver) = aNode
		or: [ self arguments anySatisfy: [ :each | (self mappingFor: each) = aNode ] ]
]

RBMessageNode >> isFaulty
[
	^ self receiver isFaulty or: [ self arguments anySatisfy: #isFaulty ]
]

RBMessageNode >> isFirstCascaded
[
	^ self isCascaded and: [ parent messages first == self ]
]

RBMessageNode >> isKeyword
[
	^ selectorParts first value last = $:
]

RBMessageNode >> isMessage
[
	^ true
]

RBMessageNode >> isSelfSend
[
	^ self receiver isVariable and: [ self receiver name = 'self' ]
]

RBMessageNode >> isSuperSend
[
	^ self receiver isVariable and: [ self receiver name = 'super' ]
]

RBMessageNode >> isUnary
[
	^ arguments isEmpty
]

RBMessageNode >> lastIsReturn
[
	^ (#(#ifTrue:ifFalse: #ifFalse:ifTrue: #ifNil:ifNotNil: #ifNotNil:ifNil:) includes: self selector)
		and: [ arguments first isBlock
				and: [ arguments first body lastIsReturn and: [ arguments last isBlock and: [ arguments last body lastIsReturn ] ] ] ]
]

RBMessageNode >> match: aNode inContext: aDictionary
[
	aNode class = self class
		ifFalse: [ ^ false ].
	self selector = aNode selector
		ifFalse: [ ^ false ].
	(receiver match: aNode receiver inContext: aDictionary)
		ifFalse: [ ^ false ].
	1 to: arguments size do: [ :i | ((arguments at: i) match: (aNode arguments at: i) inContext: aDictionary)
			ifFalse: [ ^ false ] ].
	^ true
]

RBMessageNode >> needsParenthesis
[
	^ parent
		ifNil: [ false ]
		ifNotNil: [ self precedence > parent precedence or: [ self precedence = parent precedence and: [ self isUnary not ] ] ]
]

RBMessageNode >> numArgs
[
	^ self selector numArgs
]

RBMessageNode >> postCopy
[
	super postCopy.
	self receiver: self receiver copy.
	self arguments: (self arguments collect: [ :each | each copy ])
]

RBMessageNode >> precedence
[
	^ self isUnary
		ifTrue: [ 1 ]
		ifFalse: [ self isKeyword
				ifTrue: [ 3 ]
				ifFalse: [ 2 ] ]
]

RBMessageNode >> receiver
[
	^ receiver
]

RBMessageNode >> receiver: aValueNode
[
	receiver := aValueNode.
	receiver parent: self
]

RBMessageNode >> receiver: aValueNode selectorParts: keywordTokens arguments: valueNodes
[
	self receiver: aValueNode.
	selectorParts := keywordTokens.
	self arguments: valueNodes
]

RBMessageNode >> renameSelector: newSelector andArguments: varNodeCollection
[
	self
		arguments: varNodeCollection;
		selector: newSelector
]

RBMessageNode >> replaceContainmentSourceWith: aNode
[
	| originalNode needsParenthesis |
	needsParenthesis := aNode hasParentheses not and: [ aNode needsParenthesis ].
	originalNode := (self mappingFor: self receiver) = aNode
		ifTrue: [ self receiver ]
		ifFalse: [ self arguments detect: [ :each | (self mappingFor: each) = aNode ] ].
	self
		addReplacement:
				(RBStringReplacement
						replaceFrom: self start
						to: originalNode start - 1
						with: (needsParenthesis
								ifTrue: [ '(' ]
								ifFalse: [ '' ]));
		addReplacement:
				(RBStringReplacement
						replaceFrom: originalNode stop + 1
						to: self stop
						with: (needsParenthesis
								ifTrue: [ ')' ]
								ifFalse: [ '' ]))
]

RBMessageNode >> replaceNode: aNode withNode: anotherNode
[
	"If we're inside a cascade node and are changing the receiver, change all the receivers"

	receiver == aNode
		ifTrue: [ self receiver: anotherNode.
			(parent notNil and: [ parent isCascade ])
				ifTrue: [ parent messages do: [ :each | each receiver: anotherNode ] ] ].
	self arguments: (arguments collect: [ :each | each == aNode
						ifTrue: [ anotherNode ]
						ifFalse: [ each ] ])
]

RBMessageNode >> replaceSourceWith: aNode
[
	(self isContainmentReplacement: aNode)
		ifTrue: [ ^ self replaceContainmentSourceWith: aNode ].
	aNode isMessage
		ifFalse: [ ^ super replaceSourceWith: aNode ].
	^ self replaceSourceWithMessageNode: aNode
]

RBMessageNode >> replaceSourceWithMessageNode: aNode
[
	| isBinaryToKeyword |
	self numArgs = aNode numArgs
		ifFalse: [ ^ super replaceSourceWith: aNode ].
	self arguments
		with: aNode arguments
		do: [ :old :new | (self mappingFor: old) = new
				ifFalse: [ ^ super replaceSourceWith: aNode ] ].
	(self mappingFor: self receiver) = aNode receiver
		ifFalse: [ (self receiver isVariable and: [ aNode receiver isVariable ])
				ifFalse: [ ^ super replaceSourceWith: aNode ].
			self
				addReplacement:
					(RBStringReplacement replaceFrom: self receiver start to: self receiver stop with: aNode receiver name) ].
	(isBinaryToKeyword := self isBinary and: [ aNode isKeyword ])
		ifTrue: [ (self hasParentheses not and: [ self parent precedence <= aNode precedence ])
				ifTrue: [ self
						addReplacement: (RBStringReplacement replaceFrom: self start to: self start - 1 with: '(');
						addReplacement: (RBStringReplacement replaceFrom: self stop + 1 to: self stop with: ')') ] ].
	self selectorParts
		with: aNode selectorParts
		do: [ :old :new | old value ~= new value
				ifTrue: [ self
						addReplacement:
							(RBStringReplacement
								replaceFrom: old start
								to: old stop
								with:
									((isBinaryToKeyword and: [ (self source at: old start - 1) isSeparator not ])
										ifTrue: [ ' ' , new value ]
										ifFalse: [ new value ])) ] ]
]

RBMessageNode >> selector
[
	^ selector ifNil: [ selector := self buildSelector ]
]

RBMessageNode >> selector: aSelector
[
	| keywords numArgs |
	keywords := aSelector keywords.
	numArgs := aSelector numArgs.
	numArgs == arguments size
		ifFalse: [ self error: 'Attempting to assign selector with wrong number of arguments.' ].
	selectorParts := numArgs == 0
		ifTrue: [ Array with: (RBIdentifierToken value: keywords first start: nil) ]
		ifFalse: [ keywords first last = $:
				ifTrue: [ keywords collect: [ :each | RBKeywordToken value: each start: nil ] ]
				ifFalse: [ Array with: (RBBinarySelectorToken value: aSelector start: nil) ] ].
	selector := aSelector asSymbol
]

RBMessageNode >> selectorParts
[
	^ selectorParts
]

RBMessageNode >> selectorParts: tokenCollection
[
	selectorParts := tokenCollection
]

RBMessageNode >> sentMessages
[
	^ super sentMessages
		add: self selector;
		yourself
]

RBMessageNode >> startWithoutParentheses
[
	^ receiver start
]

RBMessageNode >> stopWithoutParentheses
[
	^ arguments isEmpty
		ifTrue: [ selectorParts first stop ]
		ifFalse: [ arguments last stop ]
]

RBMessageNode class >> receiver: aValueNode selector: aSymbol
[
	^ self receiver: aValueNode selector: aSymbol arguments: #()
]

RBMessageNode class >> receiver: aValueNode selector: aSymbol arguments: valueNodes
[
	^ self new
		receiver: aValueNode;
		arguments: valueNodes;
		selector: aSymbol;
		yourself
]

RBMessageNode class >> receiver: aValueNode selectorParts: keywordTokens arguments: valueNodes
[
	^ self new
		receiver: aValueNode selectorParts: keywordTokens arguments: valueNodes;
		yourself
]

