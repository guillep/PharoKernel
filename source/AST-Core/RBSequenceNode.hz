RBSequenceNode
	superclass: #RBProgramNode;
	instanceVariables: #(#leftBar #rightBar #statements #periods #temporaries );
	package: #'AST-Core'.

RBSequenceNode >> = anObject
[
	"Can't send = to the temporaries and statements collection since they might change from arrays to OCs"

	self == anObject
		ifTrue: [ ^ true ].
	self class = anObject class
		ifFalse: [ ^ false ].
	self temporaries size = anObject temporaries size
		ifFalse: [ ^ false ].
	1 to: self temporaries size do: [ :i | (self temporaries at: i) = (anObject temporaries at: i)
			ifFalse: [ ^ false ] ].
	self statements size = anObject statements size
		ifFalse: [ ^ false ].
	1 to: self statements size do: [ :i | (self statements at: i) = (anObject statements at: i)
			ifFalse: [ ^ false ] ].
	^ true
]

RBSequenceNode >> acceptVisitor: aProgramNodeVisitor
[
	^ aProgramNodeVisitor visitSequenceNode: self
]

RBSequenceNode >> addNode: aNode
[
	aNode parent: self.
	(statements notEmpty and: [ statements last isReturn ])
		ifTrue: [ self error: 'Cannot add statement after return node' ].
	statements := statements asOrderedCollection
		add: aNode;
		yourself.
	^ aNode
]

RBSequenceNode >> addNode: aNode before: anotherNode
[
	| index |
	index := self indexOfNode: anotherNode.
	index = 0
		ifTrue: [ ^ self addNode: aNode ].
	statements := statements asOrderedCollection
		add: aNode beforeIndex: index;
		yourself.
	aNode parent: self.
	^ aNode
]

RBSequenceNode >> addNodeFirst: aNode
[
	aNode parent: self.
	statements := statements asOrderedCollection
		addFirst: aNode;
		yourself.
	^ aNode
]

RBSequenceNode >> addNodes: aCollection
[
	aCollection do: [ :each | each parent: self ].
	(statements notEmpty and: [ statements last isReturn ])
		ifTrue: [ self error: 'Cannot add statement after return node' ].
	statements := statements asOrderedCollection
		addAll: aCollection;
		yourself.
	^ aCollection
]

RBSequenceNode >> addNodes: aCollection before: anotherNode
[
	aCollection do: [ :each | self addNode: each before: anotherNode ].
	^ aCollection
]

RBSequenceNode >> addNodesFirst: aCollection
[
	aCollection do: [ :each | each parent: self ].
	statements := statements asOrderedCollection
		addAllFirst: aCollection;
		yourself.
	^ aCollection
]

RBSequenceNode >> addReturn
[
	| node |
	statements isEmpty
		ifTrue: [ ^ nil ].
	statements last isReturn
		ifTrue: [ ^ statements last ].
	node := RBReturnNode value: statements last.
	statements at: statements size put: node.
	node parent: self.
	^ node
]

RBSequenceNode >> addSelfReturn
[
	| node |
	self lastIsReturn
		ifTrue: [ ^ self statements last ].
	node := RBReturnNode value: (RBVariableNode named: 'self').
	^ self addNode: node
]

RBSequenceNode >> addTemporariesNamed: aCollection
[
	^ aCollection collect: [ :each | self addTemporaryNamed: each ]
]

RBSequenceNode >> addTemporaryNamed: aString
[
	| variableNode |
	variableNode := RBVariableNode named: aString.
	variableNode parent: self.
	temporaries := temporaries copyWith: variableNode.
	^ variableNode
]

RBSequenceNode >> allDefinedVariables
[
	^ self temporaryNames asOrderedCollection
		addAll: super allDefinedVariables;
		yourself
]

RBSequenceNode >> allTemporaryVariables
[
	^ self temporaryNames asOrderedCollection
		addAll: super allTemporaryVariables;
		yourself
]

RBSequenceNode >> asSequenceNode
[
	^ self
]

RBSequenceNode >> bestNodeFor: anInterval
[
	| node |
	node := super bestNodeFor: anInterval.
	node == self
		ifTrue: [ (temporaries isEmpty and: [ statements size == 1 ])
				ifTrue: [ ^ statements first ] ].
	^ node
]

RBSequenceNode >> children
[
	^ OrderedCollection new
		addAll: self temporaries;
		addAll: self statements;
		yourself
]

RBSequenceNode >> copyInContext: aDictionary
[
	^ self class new
		temporaries: (self copyList: self temporaries inContext: aDictionary);
		statements: (self copyList: self statements inContext: aDictionary);
		yourself
]

RBSequenceNode >> defines: aName
[
	^ temporaries anySatisfy: [ :each | each name = aName ]
]

RBSequenceNode >> directlyUses: aNode
[
	^ false
]

RBSequenceNode >> equalTo: anObject withMapping: aDictionary
[
	self class = anObject class
		ifFalse: [ ^ false ].
	self statements size = anObject statements size
		ifFalse: [ ^ false ].
	1 to: self statements size do: [ :i | ((self statements at: i) equalTo: (anObject statements at: i) withMapping: aDictionary)
			ifFalse: [ ^ false ] ].
	aDictionary values asSet size = aDictionary size
		ifFalse: [ ^ false ].	"Not a one-to-one mapping"
	self temporaries do: [ :each | aDictionary removeKey: each name ifAbsent: [  ] ].
	^ true
]

RBSequenceNode >> hash
[
	^ (self hashForCollection: self temporaries) bitXor: (self hashForCollection: self statements)
]

RBSequenceNode >> indexOfNode: aNode
[
	"Try to find the node by first looking for ==, and then for ="

	^ (1 to: statements size) detect: [ :each | (statements at: each) == aNode ] ifNone: [ statements indexOf: aNode ]
]

RBSequenceNode >> initialize
[
	super initialize.
	periods := statements := temporaries := #()
]

RBSequenceNode >> isFaulty
[
	^ self statements anySatisfy: #isFaulty
]

RBSequenceNode >> isLast: aNode
[
	| last |
	statements isEmpty
		ifTrue: [ ^ false ].
	last := statements last.
	^ last == aNode
		or: [ last isMessage
				and: [ (#(#ifTrue:ifFalse: #ifFalse:ifTrue:) includes: last selector)
						and: [ last arguments anySatisfy: [ :each | each isLast: aNode ] ] ] ]
]

RBSequenceNode >> isSequence
[
	^ true
]

RBSequenceNode >> lastIsReturn
[
	^ statements notEmpty and: [ statements last lastIsReturn ]
]

RBSequenceNode >> leftBar
[
	^ leftBar
]

RBSequenceNode >> leftBar: anInteger
[
	leftBar := anInteger
]

RBSequenceNode >> leftBar: leftInteger temporaries: variableNodes rightBar: rightInteger
[
	leftBar := leftInteger.
	self temporaries: variableNodes.
	rightBar := rightInteger
]

RBSequenceNode >> match: aNode inContext: aDictionary
[
	self class = aNode class
		ifFalse: [ ^ false ].
	^ (self matchList: temporaries against: aNode temporaries inContext: aDictionary)
		and: [ self matchList: statements against: aNode statements inContext: aDictionary ]
]

RBSequenceNode >> methodComments
[
	| methodComments |
	methodComments := OrderedCollection withAll: self comments.
	temporaries do: [ :each | methodComments addAll: each comments ].
	(parent notNil and: [ parent isBlock ])
		ifTrue: [ parent arguments do: [ :each | methodComments addAll: each comments ] ].
	^ methodComments asSortedCollection: [ :a :b | a first < b first ]
]

RBSequenceNode >> periods
[
	^ periods
]

RBSequenceNode >> periods: anArray
[
	periods := anArray
]

RBSequenceNode >> postCopy
[
	super postCopy.
	self temporaries: (self temporaries collect: [ :each | each copy ]).
	self statements: (self statements collect: [ :each | each copy ])
]

RBSequenceNode >> references: aVariableName
[
	^ statements anySatisfy: [ :each | each references: aVariableName ]
]

RBSequenceNode >> removeDeadCode
[
	(self isUsed
		ifTrue: [ statements size - 1 ]
		ifFalse: [ statements size ]) to: 1 by: -1 do: [ :i | (statements at: i) isImmediateNode
			ifTrue: [ self clearReplacements.
				statements removeAt: i ] ].
	super removeDeadCode
]

RBSequenceNode >> removeNode: aNode
[
	self replaceNode: aNode withNodes: #()
]

RBSequenceNode >> removeTemporaryNamed: aName
[
	temporaries := temporaries reject: [ :each | each name = aName ]
]

RBSequenceNode >> replaceNode: aNode withNode: anotherNode
[
	self statements: (statements collect: [ :each | each == aNode
						ifTrue: [ anotherNode ]
						ifFalse: [ each ] ]).
	self
		temporaries: (temporaries collect: [ :each | each == aNode
						ifTrue: [ anotherNode ]
						ifFalse: [ each ] ])
]

RBSequenceNode >> replaceNode: aNode withNodes: aCollection
[
	| index newStatements |
	self clearReplacements.
	index := self indexOfNode: aNode.
	newStatements := OrderedCollection new: statements size + aCollection size.
	1 to: index - 1 do: [ :i | newStatements add: (statements at: i) ].
	newStatements addAll: aCollection.
	index + 1 to: statements size do: [ :i | newStatements add: (statements at: i) ].
	aCollection do: [ :each | each parent: self ].
	statements := newStatements
]

RBSequenceNode >> rightBar
[
	^ rightBar
]

RBSequenceNode >> rightBar: anInteger
[
	rightBar := anInteger
]

RBSequenceNode >> start
[
	^ leftBar ifNil: [ statements isEmpty
				ifTrue: [ 1 ]
				ifFalse: [ statements first start ] ]
]

RBSequenceNode >> statements
[
	^ statements
]

RBSequenceNode >> statements: stmtCollection
[
	statements := stmtCollection.
	statements do: [ :each | each parent: self ]
]

RBSequenceNode >> stop
[
	^ (periods isEmpty
		ifTrue: [ 0 ]
		ifFalse: [ periods last ]) max: (statements isEmpty
				ifTrue: [ 0 ]
				ifFalse: [ statements last stop ])
]

RBSequenceNode >> temporaries
[
	^ temporaries
]

RBSequenceNode >> temporaries: tempCollection
[
	temporaries := tempCollection.
	temporaries do: [ :each | each parent: self ]
]

RBSequenceNode >> temporaryNames
[
	^ temporaries collect: [ :each | each name ]
]

RBSequenceNode >> temporaryVariables
[
	^ super temporaryVariables asOrderedCollection
		addAll: self temporaryNames;
		yourself
]

RBSequenceNode >> uses: aNode
[
	statements isEmpty
		ifTrue: [ ^ false ].
	aNode == statements last
		ifFalse: [ ^ false ].
	^ self isUsed
]

RBSequenceNode >> whichNodeIsContainedBy: anInterval
[
	| node |
	node := super whichNodeIsContainedBy: anInterval.
	node == self
		ifTrue: [ (temporaries isEmpty and: [ statements size == 1 ])
				ifTrue: [ ^ statements first ] ].
	^ node
]

RBSequenceNode class >> leftBar: leftInteger temporaries: variableNodes rightBar: rightInteger
[
	^ self new
		leftBar: leftInteger temporaries: variableNodes rightBar: rightInteger;
		yourself
]

RBSequenceNode class >> statements: statementNodes
[
	^ self temporaries: #() statements: statementNodes
]

RBSequenceNode class >> temporaries: variableNodes statements: statementNodes
[
	^ self new
		temporaries: variableNodes;
		statements: statementNodes;
		yourself
]

