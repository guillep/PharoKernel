RBExplicitVariableParser
	superclass: #RBParser;
	instanceVariables: #(#currentVariableNodeClass #currentScope );
	package: #'AST-Core'.

RBExplicitVariableParser >> argumentNodeClass
[
	^ RBArgumentNode
]

RBExplicitVariableParser >> lookupVariableNodeClass: aName
[
	| scope |
	currentVariableNodeClass notNil
		ifTrue: [ ^ currentVariableNodeClass ].
	scope := currentScope.
	[ scope isNil ]
		whileFalse: [ (scope hasTemporaryNamed: aName)
				ifTrue: [ ^ RBTemporaryNode ].
			(scope hasArgumentNamed: aName)
				ifTrue: [ ^ RBArgumentNode ].
			scope := scope scope ].
	^ RBVariableNode
]

RBExplicitVariableParser >> parseBlock
[
	| position node |
	position := currentToken start.
	self step.
	node := self blockNodeClass new.
	self pushScope: node.
	self useVariable: RBArgumentNode during: [ self parseBlockArgsInto: node ].
	node left: position.
	node body: self sequenceNodeClass new.
	self parseStatements: false into: node body.
	(currentToken isSpecial and: [ currentToken value = $] ])
		ifFalse: [ ^ self parserError: ''']'' expected' ].
	node right: currentToken start.
	self step.
	self popScope.
	^ node
]

RBExplicitVariableParser >> parseMethod
[
	| methodNode |
	self useVariable: RBArgumentNode during: [ methodNode := self parseMessagePattern ].
	self pushScope: methodNode.
	self parsePragmas.
	self addCommentsTo: methodNode.
	methodNode body: self sequenceNodeClass new.
	self parseStatements: false into: methodNode body.
	pragmas ifNotNil: [ methodNode pragmas: pragmas ].
	^ methodNode
]

RBExplicitVariableParser >> parsePrimitiveIdentifier
[
	| token node |
	token := currentToken.
	self step.
	node := (self lookupVariableNodeClass: token value) identifierToken: token.
	self addCommentsTo: node.
	^ node
]

RBExplicitVariableParser >> parseTemps
[
	| args |
	args := OrderedCollection new.
	self
		useVariable: RBTemporaryNode
		during: [ [ currentToken isIdentifier ] whileTrue: [ args add: self parseVariableNode ] ].
	^ args
]

RBExplicitVariableParser >> popScope
[
	currentScope := currentScope scope
]

RBExplicitVariableParser >> pushScope: aNode
[
	aNode scope: currentScope.
	currentScope := aNode
]

RBExplicitVariableParser >> temporaryNodeClass
[
	^ RBTemporaryNode
]

RBExplicitVariableParser >> useVariable: aVariableNodeClass during: aBlock
[
	currentVariableNodeClass := aVariableNodeClass.
	^ aBlock
		ensure: [ currentVariableNodeClass := nil ]
]

RBExplicitVariableParser >> variableNodeClass
[
	^ currentVariableNodeClass ifNil: [ RBVariableNode ]
]

