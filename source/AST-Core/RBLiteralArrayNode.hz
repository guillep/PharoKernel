RBLiteralArrayNode
	superclass: #RBLiteralNode;
	instanceVariables: #(#isByteArray #stop #contents #start );
	package: #'AST-Core'.

RBLiteralArrayNode >> = anObject
[
	super = anObject
		ifFalse: [ ^ false ].
	self isForByteArray = anObject isForByteArray
		ifFalse: [ ^ false ].
	self contents size = anObject contents size
		ifFalse: [ ^ false ].
	1 to: self contents size do: [ :i | (self contents at: i) = (anObject contents at: i)
			ifFalse: [ ^ false ] ].
	^ true
]

RBLiteralArrayNode >> acceptVisitor: aProgramNodeVisitor
[
	^ aProgramNodeVisitor visitLiteralArrayNode: self
]

RBLiteralArrayNode >> children
[
	^ contents
]

RBLiteralArrayNode >> contents
[
	^ contents
]

RBLiteralArrayNode >> contents: aRBLiteralNodeCollection
[
	contents := aRBLiteralNodeCollection.
	contents do: [ :each | each parent: self ]
]

RBLiteralArrayNode >> copyInContext: aDictionary
[
	^ self class
		startPosition: nil
		contents: (self copyList: self contents inContext: aDictionary)
		stopPosition: nil
		isByteArray: isByteArray
]

RBLiteralArrayNode >> equalTo: anObject withMapping: aDictionary
[
	self class = anObject class
		ifFalse: [ ^ false ].
	self isForByteArray = anObject isForByteArray
		ifFalse: [ ^ false ].
	self contents size = anObject contents size
		ifFalse: [ ^ false ].
	1 to: self contents size do: [ :i | ((self contents at: i) equalTo: (anObject contents at: i) withMapping: aDictionary)
			ifFalse: [ ^ false ] ].
	^ true
]

RBLiteralArrayNode >> isFaulty
[
	^ self contents anySatisfy: #isFaulty
]

RBLiteralArrayNode >> isForByteArray
[
	^ isByteArray
]

RBLiteralArrayNode >> isLiteralArray
[
	^ true
]

RBLiteralArrayNode >> match: aNode inContext: aDictionary
[
	aNode class = self class
		ifFalse: [ ^ false ].
	self isForByteArray = aNode isForByteArray
		ifFalse: [ ^ false ].
	^ self matchList: contents against: aNode contents inContext: aDictionary
]

RBLiteralArrayNode >> postCopy
[
	super postCopy.
	self contents: (self contents collect: [ :each | each copy ])
]

RBLiteralArrayNode >> replaceNode: aNode withNode: anotherNode
[
	self contents: (contents collect: [ :each | each == aNode
						ifTrue: [ anotherNode ]
						ifFalse: [ each ] ])
]

RBLiteralArrayNode >> replaceSourceWith: aNode
[
	(self class = aNode class
		and: [ self isForByteArray = aNode isForByteArray and: [ self contents size = aNode contents size ] ])
		ifFalse: [ ^ super replaceSourceWith: aNode ].
	1 to: self contents size do: [ :i | (self contents at: i) = (aNode contents at: i)
			ifFalse: [ (self contents at: i) replaceSourceWith: (aNode contents at: i) ] ]
]

RBLiteralArrayNode >> startPosition: startInteger contents: anArray stopPosition: stopInteger isByteArray: aBoolean
[
	start := startInteger.
	self contents: anArray.
	stop := stopInteger.
	isByteArray := aBoolean
]

RBLiteralArrayNode >> startWithoutParentheses
[
	^ start
]

RBLiteralArrayNode >> stopWithoutParentheses
[
	^ stop
]

RBLiteralArrayNode >> value
[
	| array |
	array := (isByteArray
		ifTrue: [ ByteArray ]
		ifFalse: [ Array ]) new: contents size.
	1 to: contents size do: [ :each | array at: each put: (contents at: each) value ].
	^ array
]

RBLiteralArrayNode class >> startPosition: startInteger contents: anArray stopPosition: stopInteger isByteArray: aBoolean
[
	^ self new
		startPosition: startInteger
			contents: anArray
			stopPosition: stopInteger
			isByteArray: aBoolean;
		yourself
]

RBLiteralArrayNode class >> value: aValue
[
	^ self new
		startPosition: nil
			contents: (aValue asArray collect: [ :each | RBLiteralNode value: each ])
			stopPosition: nil
			isByteArray: aValue class ~~ Array;
		yourself
]

