RBProgramNode
	instanceVariables: #(#parent #comments #properties );
	classVariables: #(#FormatterClass );
	package: #'AST-Core'.

RBProgramNode >> acceptVisitor: aProgramNodeVisitor
[
	self subclassResponsibility
]

RBProgramNode >> addReplacement: aStringReplacement
[
	parent ifNil: [ ^ self ].
	parent addReplacement: aStringReplacement
]

RBProgramNode >> allArgumentVariables
[
	| children |
	children := self children.
	children isEmpty
		ifTrue: [ ^ #() ].
	^ children
		inject: OrderedCollection new
		into: [ :vars :each | vars
				addAll: each allArgumentVariables;
				yourself ]
]

RBProgramNode >> allChildren
[
	| children |
	children := OrderedCollection new.
	self nodesDo: [ :each | children addLast: each ].
	^ children
]

RBProgramNode >> allDefinedVariables
[
	| children |
	children := self children.
	children isEmpty
		ifTrue: [ ^ #() ].
	^ children
		inject: OrderedCollection new
		into: [ :vars :each | vars
				addAll: each allDefinedVariables;
				yourself ]
]

RBProgramNode >> allTemporaryVariables
[
	| children |
	children := self children.
	children isEmpty
		ifTrue: [ ^ #() ].
	^ children
		inject: OrderedCollection new
		into: [ :vars :each | vars
				addAll: each allTemporaryVariables;
				yourself ]
]

RBProgramNode >> asReturn
[
	"Change the current node to a return node."

	parent ifNil: [ self error: 'Cannot change to a return without a parent node.' ].
	parent isSequence
		ifFalse: [ self error: 'Parent node must be a sequence node.' ].
	(parent isLast: self)
		ifFalse: [ self error: 'Return node must be last.' ].
	^ parent addReturn
]

RBProgramNode >> assigns: aVariableName
[
	^ self children anySatisfy: [ :each | each assigns: aVariableName ]
]

RBProgramNode >> bestNodeFor: anInterval
[
	| selectedChildren |
	(self intersectsInterval: anInterval)
		ifFalse: [ ^ nil ].
	(self containedBy: anInterval)
		ifTrue: [ ^ self ].
	selectedChildren := self children select: [ :each | each intersectsInterval: anInterval ].
	^ selectedChildren size == 1
		ifTrue: [ selectedChildren first bestNodeFor: anInterval ]
		ifFalse: [ self ]
]

RBProgramNode >> blockVariables
[
	^ parent ifNil: [ #() ] ifNotNil: [ parent blockVariables ]
]

RBProgramNode >> canMatchMethod: aCompiledMethod
[
	^ self sentMessages
		allSatisfy: [ :each | (self class optimizedSelectors includes: each) or: [ aCompiledMethod refersToLiteral: each ] ]
]

RBProgramNode >> cascadeListCharacter
[
	^ $;
]

RBProgramNode >> children
[
	^ #()
]

RBProgramNode >> clearReplacements
[
	parent ifNil: [ ^ self ].
	parent clearReplacements
]

RBProgramNode >> collect: aBlock
[
	"Hacked to fit collection protocols"

	^ aBlock value: self
]

RBProgramNode >> comments
[
	"Answer the comments of the receiving parse tree node as intervals of starting and ending indices."

	^ comments ifNil: [ #() ] ifNotNil: [ comments ]
]

RBProgramNode >> comments: aCollection
[
	comments := aCollection
]

RBProgramNode >> containedBy: anInterval
[
	^ anInterval first <= self start and: [ anInterval last >= self stop ]
]

RBProgramNode >> containsReturn
[
	^ self children anySatisfy: [ :each | each containsReturn ]
]

RBProgramNode >> copyCommentsFrom: aNode
[
	"Add all comments from aNode to us. If we already have the comment, then don't add it."

	| newComments |
	newComments := OrderedCollection new.
	aNode nodesDo: [ :each | newComments addAll: each comments ].
	self nodesDo: [ :each | each comments do: [ :comment | newComments remove: comment ifAbsent: [  ] ] ].
	newComments isEmpty
		ifTrue: [ ^ self ].
	newComments := newComments asSortedCollection: [ :a :b | a first < b first ].
	self comments: newComments
]

RBProgramNode >> copyInContext: aDictionary
[
	^ self copy
]

RBProgramNode >> copyList: matchNodes inContext: aDictionary
[
	| newNodes |
	newNodes := OrderedCollection new.
	matchNodes do: [ :each | | object |
			object := each copyInContext: aDictionary.
			newNodes addAll: object ].
	^ newNodes
]

RBProgramNode >> debugHighlightRange
[
	^ self debugHighlightStart to: self debugHighlightStop
]

RBProgramNode >> debugHighlightStart
[
	^ self start
]

RBProgramNode >> debugHighlightStop
[
	^ self stop
]

RBProgramNode >> defines: aName
[
	^ false
]

RBProgramNode >> directlyUses: aNode
[
	^ true
]

RBProgramNode >> do: aBlock
[
	"Hacked to fit collection protocols"

	aBlock value: self
]

RBProgramNode >> equalTo: aNode exceptForVariables: variableNameCollection
[
	| dictionary |
	dictionary := Dictionary new.
	(self equalTo: aNode withMapping: dictionary)
		ifFalse: [ ^ false ].
	dictionary
		keysAndValuesDo: [ :key :value | (key = value or: [ variableNameCollection includes: key ])
				ifFalse: [ ^ false ] ].
	^ true
]

RBProgramNode >> equalTo: aNode withMapping: aDictionary
[
	^ self = aNode
]

RBProgramNode >> evaluatedFirst: aNode
[
	self children do: [ :each | each == aNode
				ifTrue: [ ^ true ].
			each isImmediateNode
				ifFalse: [ ^ false ] ].
	^ false
]

RBProgramNode >> formattedCode
[
	^ self formatterClass new format: self
]

RBProgramNode >> formatterClass
[
	^ self class formatterClass
]

RBProgramNode >> hasMultipleReturns
[
	| count |
	count := 0.
	self nodesDo: [ :each | each isReturn
				ifTrue: [ count := count + 1 ] ].
	^ count > 1
]

RBProgramNode >> hasProperty: aKey
[
	"Test if the property aKey is present."

	^ properties notNil and: [ properties includesKey: aKey ]
]

RBProgramNode >> hashForCollection: aCollection
[
	^ aCollection isEmpty
		ifTrue: [ 0 ]
		ifFalse: [ aCollection first hash ]
]

RBProgramNode >> intersectsInterval: anInterval
[
	^ (anInterval first between: self start and: self stop)
		or: [ self start between: anInterval first and: anInterval last ]
]

RBProgramNode >> isArgument
[
	^ false
]

RBProgramNode >> isAssignment
[
	^ false
]

RBProgramNode >> isCascade
[
	^ false
]

RBProgramNode >> isDirectlyUsed
[
	"This node is directly used as an argument, receiver, or part of an assignment."

	^ parent ifNil: [ false ] ifNotNil: [ parent directlyUses: self ]
]

RBProgramNode >> isEvaluatedFirst
[
	"Return true if we are the first thing evaluated in this statement."

	^ parent isNil or: [ parent isSequence or: [ parent evaluatedFirst: self ] ]
]

RBProgramNode >> isFaulty
[
	self subclassResponsibility
]

RBProgramNode >> isImmediate
[
	^ self isImmediateNode
]

RBProgramNode >> isImmediateNode
[
	^ false
]

RBProgramNode >> isLast: aNode
[
	| children |
	children := self children.
	^ children notEmpty and: [ children last == aNode ]
]

RBProgramNode >> isList
[
	^ false
]

RBProgramNode >> isLiteralArray
[
	^ false
]

RBProgramNode >> isLiteralNode
[
	^ false
]

RBProgramNode >> isMessage
[
	^ false
]

RBProgramNode >> isMethod
[
	^ false
]

RBProgramNode >> isPatternNode
[
	^ false
]

RBProgramNode >> isPragma
[
	^ false
]

RBProgramNode >> isReturn
[
	^ false
]

RBProgramNode >> isSelf
[
	^ false
]

RBProgramNode >> isSequence
[
	^ false
]

RBProgramNode >> isSuper
[
	^ false
]

RBProgramNode >> isTemp
[
	^ false
]

RBProgramNode >> isUsed
[
	"Answer true if this node could be used as part of another expression. For example, you could use the 
	result of this node as a receiver of a message, an argument, the right part of an assignment, or the 
	return value of a block. This differs from isDirectlyUsed in that it is conservative since it also includes 
	return values of blocks."

	^ parent ifNil: [ false ] ifNotNil: [ parent uses: self ]
]

RBProgramNode >> isValue
[
	^ false
]

RBProgramNode >> isVariable
[
	^ false
]

RBProgramNode >> lastIsReturn
[
	^ self isReturn
]

RBProgramNode >> listCharacter
[
	^ $@
]

RBProgramNode >> literalCharacter
[
	^ $#
]

RBProgramNode >> mappingFor: aNode
[
	| method |
	method := self methodNode.
	method ifNil: [ ^ aNode ].
	^ method mappingFor: aNode
]

RBProgramNode >> match: aNode inContext: aDictionary
[
	^ self = aNode
]

RBProgramNode >> matchList: matchNodes against: programNodes inContext: aDictionary
[
	^ self
		matchList: matchNodes
		index: 1
		against: programNodes
		index: 1
		inContext: aDictionary
]

RBProgramNode >> matchList: matchNodes index: matchIndex against: programNodes index: programIndex inContext: aDictionary
[
	| node currentIndex currentDictionary nodes |
	matchNodes size < matchIndex
		ifTrue: [ ^ programNodes size < programIndex ].
	node := matchNodes at: matchIndex.
	node isList
		ifTrue: [ currentIndex := programIndex - 1.
			[ currentDictionary := aDictionary copy.
			programNodes size < currentIndex
				or: [ nodes := programNodes copyFrom: programIndex to: currentIndex.
					(currentDictionary at: node ifAbsentPut: [ nodes ]) = nodes
						and: [ (self
								matchList: matchNodes
								index: matchIndex + 1
								against: programNodes
								index: currentIndex + 1
								inContext: currentDictionary)
								ifTrue: [ currentDictionary keysAndValuesDo: [ :key :value | aDictionary at: key put: value ].
									^ true ].
							false ] ] ]
				whileFalse: [ currentIndex := currentIndex + 1 ].
			^ false ].
	programNodes size < programIndex
		ifTrue: [ ^ false ].
	(node match: (programNodes at: programIndex) inContext: aDictionary)
		ifFalse: [ ^ false ].
	^ self
		matchList: matchNodes
		index: matchIndex + 1
		against: programNodes
		index: programIndex + 1
		inContext: aDictionary
]

RBProgramNode >> methodComments
[
	^ self comments
]

RBProgramNode >> methodNode
[
	^ parent ifNotNil: [ parent methodNode ]
]

RBProgramNode >> newSource
[
	^ self formattedCode
]

RBProgramNode >> nodesDo: aBlock
[
	aBlock value: self.
	self children do: [ :each | each nodesDo: aBlock ]
]

RBProgramNode >> parent
[
	^ parent
]

RBProgramNode >> parent: aRBProgramNode
[
	parent := aRBProgramNode
]

RBProgramNode >> parents
[
	^ parent ifNil: [ OrderedCollection with: self ] ifNotNil: [ parent parents
				addLast: self;
				yourself ]
]

RBProgramNode >> postCopy
[
	super postCopy.
	properties := properties copy
]

RBProgramNode >> precedence
[
	^ 6
]

RBProgramNode >> printOn: aStream
[
	aStream
		nextPutAll: self class name;
		nextPut: $(;
		nextPutAll: self formattedCode;
		nextPut: $)
]

RBProgramNode >> propertyAt: aKey
[
	"Answer the property value associated with aKey."

	^ self propertyAt: aKey ifAbsent: [ self error: 'Property not found' ]
]

RBProgramNode >> propertyAt: aKey ifAbsent: aBlock
[
	"Answer the property value associated with aKey or, if aKey isn't found, answer the result of evaluating aBlock."

	^ properties ifNil: [ aBlock value ] ifNotNil: [ properties at: aKey ifAbsent: aBlock ]
]

RBProgramNode >> propertyAt: aKey ifAbsentPut: aBlock
[
	"Answer the property associated with aKey or, if aKey isn't found store the result of evaluating aBlock as new value."

	^ self propertyAt: aKey ifAbsent: [ self propertyAt: aKey put: aBlock value ]
]

RBProgramNode >> propertyAt: aKey put: anObject
[
	"Set the property at aKey to be anObject. If aKey is not found, create a new entry for aKey and set is value to anObject. Answer anObject."

	^ (properties ifNil: [ properties := SmallDictionary new: 1 ]) at: aKey put: anObject
]

RBProgramNode >> recurseInto
[
	^ false
]

RBProgramNode >> recurseIntoCharacter
[
	^ $`
]

RBProgramNode >> references: aVariableName
[
	^ self children anySatisfy: [ :each | each references: aVariableName ]
]

RBProgramNode >> removeDeadCode
[
	self children do: [ :each | each removeDeadCode ]
]

RBProgramNode >> removeProperty: aKey
[
	"Remove the property with aKey. Answer the property or raise an error if aKey isn't found."

	^ self removeProperty: aKey ifAbsent: [ self error: 'Property not found' ]
]

RBProgramNode >> removeProperty: aKey ifAbsent: aBlock
[
	"Remove the property with aKey. Answer the value or, if aKey isn't found, answer the result of evaluating aBlock."

	| answer |
	properties ifNil: [ ^ aBlock value ].
	answer := properties removeKey: aKey ifAbsent: aBlock.
	properties isEmpty
		ifTrue: [ properties := nil ].
	^ answer
]

RBProgramNode >> replaceMethodSource: aNode
[
	"We are being replaced with aNode -- if possible try to perform an in place edit of the source."

	| method |
	method := self methodNode.
	method notNil
		ifTrue: [ method map: self to: aNode ].
	aNode parent: self parent.
	[ self replaceSourceWith: aNode ]
		on: Error
		do: [ :ex | self clearReplacements.
			ex return ]
]

RBProgramNode >> replaceNode: aNode withNode: anotherNode
[
	self error: 'I don''t store other nodes'
]

RBProgramNode >> replaceSourceFrom: aNode
[
	self == aNode
		ifFalse: [ self clearReplacements ]
]

RBProgramNode >> replaceSourceWith: aNode
[
	aNode replaceSourceFrom: self
]

RBProgramNode >> replaceWith: aNode
[
	parent ifNil: [ self error: 'This node doesn''t have a parent' ].
	self replaceMethodSource: aNode.
	parent replaceNode: self withNode: aNode
]

RBProgramNode >> selfMessages
[
	| searcher |
	searcher := RBParseTreeSearcher new.
	searcher matches: 'self `@msg: ``@args' do: [ :aNode :answer | answer
				add: aNode selector;
				yourself ].
	^ searcher executeTree: self initialAnswer: Set new
]

RBProgramNode >> sentMessages
[
	^ self children inject: Set new into: [ :messages :each | messages
				addAll: each sentMessages;
				yourself ]
]

RBProgramNode >> size
[
	"Hacked to fit collection protocols"

	^ 1
]

RBProgramNode >> source
[
	^ parent notNil
		ifTrue: [ parent source ]
		ifFalse: [ nil ]
]

RBProgramNode >> sourceInterval
[
	^ self start to: self stop
]

RBProgramNode >> start
[
	self subclassResponsibility
]

RBProgramNode >> statementCharacter
[
	^ $.
]

RBProgramNode >> statementComments
[
	| statementComments |
	statementComments := OrderedCollection withAll: self comments.
	self children do: [ :each | statementComments addAll: each statementComments ].
	^ statementComments asSortedCollection: [ :a :b | a first < b first ]
]

RBProgramNode >> statementNode
[
	"Return your topmost node that is contained by a sequence node."

	(parent isNil or: [ parent isSequence ])
		ifTrue: [ ^ self ].
	^ parent statementNode
]

RBProgramNode >> stop
[
	self subclassResponsibility
]

RBProgramNode >> superMessages
[
	| searcher |
	searcher := RBParseTreeSearcher new.
	searcher matches: 'super `@msg: ``@args' do: [ :aNode :answer | answer
				add: aNode selector;
				yourself ].
	^ searcher executeTree: self initialAnswer: Set new
]

RBProgramNode >> temporaryVariables
[
	^ parent ifNil: [ #() ] ifNotNil: [ parent temporaryVariables ]
]

RBProgramNode >> uses: aNode
[
	^ true
]

RBProgramNode >> whichNodeIsContainedBy: anInterval
[
	| selectedChildren |
	(self intersectsInterval: anInterval)
		ifFalse: [ ^ nil ].
	(self containedBy: anInterval)
		ifTrue: [ ^ self ].
	selectedChildren := self children select: [ :each | each intersectsInterval: anInterval ].
	^ selectedChildren size == 1
		ifTrue: [ selectedChildren first whichNodeIsContainedBy: anInterval ]
		ifFalse: [ nil ]
]

RBProgramNode >> whoDefines: aName
[
	^ (self defines: aName)
		ifTrue: [ self ]
		ifFalse: [ parent notNil
				ifTrue: [ parent whoDefines: aName ]
				ifFalse: [ nil ] ]
]

RBProgramNode class >> formatterClass
[
	^ FormatterClass ifNil: [ RBConfigurableFormatter ] ifNotNil: [ FormatterClass ]
]

RBProgramNode class >> formatterClass: aClass
[
	FormatterClass := aClass
]

RBProgramNode class >> optimizedSelectors
[
	^ #(#and: #caseOf: #caseOf:otherwise: #ifFalse: #ifFalse:ifTrue: #ifNil: #ifNil:ifNotNil: #ifNotNil: #ifNotNil:ifNil: #ifTrue: #ifTrue:ifFalse: #or: #to:by:do: #to:do: #whileFalse #whileFalse: #whileTrue #whileTrue:)
]

RBProgramNode class >> settingsOn: aBuilder
[
	<systemsettings>
	(aBuilder group: #refactoring)
		label: 'Refactoring Engine';
		description: 'Settings related to the refactoring tools';
		with: [ (aBuilder pickOne: #formatterClass)
						label: 'Formatter';
						domainValues: (RBProgramNodeVisitor allSubclasses select: [ :each | each canUnderstand: #format: ]) ]
]

