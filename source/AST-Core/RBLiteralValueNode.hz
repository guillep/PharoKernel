RBLiteralValueNode
	superclass: #RBLiteralNode;
	instanceVariables: #(#token );
	package: #'AST-Core'.

RBLiteralValueNode >> = anObject
[
	^ super = anObject and: [ self value = anObject value and: [ self value species = anObject value species ] ]
]

RBLiteralValueNode >> acceptVisitor: aProgramNodeVisitor
[
	^ aProgramNodeVisitor visitLiteralNode: self
]

RBLiteralValueNode >> copyInContext: aDictionary
[
	^ self class literalToken: self token copy removePositions
]

RBLiteralValueNode >> isFaulty
[
	^ false
]

RBLiteralValueNode >> literalToken: aLiteralToken
[
	token := aLiteralToken
]

RBLiteralValueNode >> startWithoutParentheses
[
	^ token start
]

RBLiteralValueNode >> stopWithoutParentheses
[
	^ token stop
]

RBLiteralValueNode >> token
[
	^ token
]

RBLiteralValueNode >> value
[
	^ token realValue
]

RBLiteralValueNode class >> literalToken: aLiteralToken
[
	^ self new
		literalToken: aLiteralToken;
		yourself
]

RBLiteralValueNode class >> value: aValue
[
	^ self literalToken: (RBLiteralToken value: aValue)
]

