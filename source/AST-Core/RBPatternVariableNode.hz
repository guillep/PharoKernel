RBPatternVariableNode
	superclass: #RBVariableNode;
	instanceVariables: #(#recurseInto #isList #isLiteral #isStatement #isAnything );
	package: #'AST-Core'.

RBPatternVariableNode >> copyInContext: aDictionary
[
	^ (aDictionary at: self) copy
]

RBPatternVariableNode >> identifierToken: anIdentifierToken
[
	super identifierToken: anIdentifierToken.
	self initializePatternVariables
]

RBPatternVariableNode >> initializePatternVariables
[
	| name |
	name := self name.
	isAnything := isList := isLiteral := isStatement := recurseInto := false.
	2 to: name size do: [ :i | | character |
		character := name at: i.
		character == self listCharacter
			ifTrue: [ isAnything := isList := true ]
			ifFalse: [ character == self literalCharacter
					ifTrue: [ isLiteral := true ]
					ifFalse: [ character == self statementCharacter
							ifTrue: [ isStatement := true ]
							ifFalse: [ character == self recurseIntoCharacter
									ifTrue: [ recurseInto := true ]
									ifFalse: [ ^ self ] ] ] ] ]
]

RBPatternVariableNode >> isAnything
[
	^ isAnything
]

RBPatternVariableNode >> isList
[
	^ isList
]

RBPatternVariableNode >> isLiteralNode
[
	^ isLiteral
]

RBPatternVariableNode >> isPatternNode
[
	^ true
]

RBPatternVariableNode >> isStatement
[
	^ isStatement
]

RBPatternVariableNode >> match: aNode inContext: aDictionary
[
	self isAnything
		ifTrue: [ ^ (aDictionary at: self ifAbsentPut: [ aNode ]) = aNode ].
	self isLiteralNode
		ifTrue: [ ^ self matchLiteral: aNode inContext: aDictionary ].
	self isStatement
		ifTrue: [ ^ self matchStatement: aNode inContext: aDictionary ].
	(aNode isKindOf: self matchingClass)
		ifFalse: [ ^ false ].
	^ (aDictionary at: self ifAbsentPut: [ aNode ]) = aNode
]

RBPatternVariableNode >> matchLiteral: aNode inContext: aDictionary
[
	^ aNode isLiteralNode and: [ (aDictionary at: self ifAbsentPut: [ aNode ]) = aNode ]
]

RBPatternVariableNode >> matchStatement: aNode inContext: aDictionary
[
	(aNode parent notNil and: [ aNode parent isSequence ])
		ifFalse: [ ^ false ].
	^ (aDictionary at: self ifAbsentPut: [ aNode ]) = aNode
]

RBPatternVariableNode >> matchingClass
[
	^ RBVariableNode
]

RBPatternVariableNode >> parent: aBRProgramNode
[
	"Fix the case where '``@node' should match a single node, not a sequence node."

	super parent: aBRProgramNode.
	parent isSequence
		ifTrue: [ (self isStatement or: [ parent temporaries includes: self ])
				ifFalse: [ isList := false ] ]
]

RBPatternVariableNode >> recurseInto
[
	^ recurseInto
]

RBPatternVariableNode class >> identifierToken: anIdentifierToken
[
	^ anIdentifierToken isPatternVariable
		ifTrue: [ super identifierToken: anIdentifierToken ]
		ifFalse: [ RBVariableNode identifierToken: anIdentifierToken ]
]

