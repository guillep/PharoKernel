RBLiteralNode
	superclass: #RBValueNode;
	package: #'AST-Core'.

RBLiteralNode >> = anObject
[
	self == anObject
		ifTrue: [ ^ true ].
	^ self class = anObject class
]

RBLiteralNode >> hash
[
	^ self value hash
]

RBLiteralNode >> isImmediateNode
[
	^ true
]

RBLiteralNode >> isLiteralNode
[
	^ true
]

RBLiteralNode >> needsParenthesis
[
	^ false
]

RBLiteralNode >> precedence
[
	^ 0
]

RBLiteralNode >> replaceSourceFrom: aNode
[
	self addReplacement: (RBStringReplacement replaceFrom: aNode start to: aNode stop with: self formattedCode)
]

RBLiteralNode >> replaceSourceWith: aNode
[
	self addReplacement: (RBStringReplacement replaceFrom: self start to: self stop with: aNode formattedCode)
]

RBLiteralNode >> value
[
	^ self subclassResponsibility
]

RBLiteralNode class >> literalToken: aLiteralToken
[
	^ (aLiteralToken realValue class == Array or: [ aLiteralToken realValue class == ByteArray ])
		ifTrue: [ RBLiteralArrayNode
				startPosition: aLiteralToken start
				contents: (aLiteralToken value asArray collect: [ :each | RBLiteralNode literalToken: each ])
				stopPosition: aLiteralToken stop
				isByteArray: aLiteralToken value class ~~ Array ]
		ifFalse: [ RBLiteralValueNode literalToken: aLiteralToken ]
]

RBLiteralNode class >> value: aValue
[
	^ ((aValue class == Array or: [ aValue class == ByteArray ])
		ifTrue: [ RBLiteralArrayNode ]
		ifFalse: [ RBLiteralValueNode ]) value: aValue
]

