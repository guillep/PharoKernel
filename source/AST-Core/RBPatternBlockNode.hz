RBPatternBlockNode
	superclass: #RBBlockNode;
	instanceVariables: #(#valueBlock );
	package: #'AST-Core'.

RBPatternBlockNode >> acceptVisitor: aProgramNodeVisitor
[
	^ aProgramNodeVisitor visitPatternBlockNode: self
]

RBPatternBlockNode >> addArgumentWithNameBasedOn: aString to: aRBBlockNode
[
	| name index vars |
	name := aString.
	vars := aRBBlockNode allDefinedVariables.
	index := 0.
	[ vars includes: name ] whileTrue: [ index := index + 1.
			name := name , index printString ].
	aRBBlockNode arguments: (aRBBlockNode arguments copyWith: (RBVariableNode named: name))
]

RBPatternBlockNode >> constructLookupNodeFor: aString in: aRBBlockNode
[
	| argumentNode |
	argumentNode := RBLiteralNode literalToken: (RBLiteralToken value: aString start: nil stop: nil).
	^ RBMessageNode
		receiver: (RBVariableNode named: 'self')
		selector: #lookupMatchFor:in:
		arguments: (Array with: argumentNode with: aRBBlockNode arguments last)
]

RBPatternBlockNode >> copyInContext: aDictionary
[
	^ self replacingBlock value: aDictionary
]

RBPatternBlockNode >> createBlockFor: aRBBlockNode
[
	self replacePatternNodesIn: aRBBlockNode.
	^ Smalltalk compiler
		source: aRBBlockNode formattedCode;
		receiver: self;
		evaluate
]

RBPatternBlockNode >> createMatchingBlock
[
	| newBlock |
	self arguments size > 2
		ifTrue: [ self error: 'Search blocks can only contain arguments for the node and matching dictionary' ].
	newBlock := RBBlockNode arguments: arguments body: body.
	newBlock arguments isEmpty
		ifTrue: [ self addArgumentWithNameBasedOn: 'aNode' to: newBlock ].
	newBlock arguments size = 1
		ifTrue: [ self addArgumentWithNameBasedOn: 'aDictionary' to: newBlock ].
	^ self createBlockFor: newBlock
]

RBPatternBlockNode >> createReplacingBlock
[
	| newBlock |
	self arguments size > 1
		ifTrue: [ self error: 'Replace blocks can only contain an argument for the matching dictionary' ].
	newBlock := RBBlockNode arguments: arguments body: body.
	self arguments isEmpty
		ifTrue: [ self addArgumentWithNameBasedOn: 'aDictionary' to: newBlock ].
	^ self createBlockFor: newBlock
]

RBPatternBlockNode >> lookupMatchFor: aString in: aDictionary
[
	^ aDictionary
		at: aString
		ifAbsent: [ | variableNode |
			variableNode := RBPatternVariableNode named: aString.
			aDictionary at: variableNode ifAbsent: [ nil ] ]
]

RBPatternBlockNode >> match: aNode inContext: aDictionary
[
	^ self matchingBlock value: aNode value: aDictionary
]

RBPatternBlockNode >> matchingBlock
[
	^ valueBlock ifNil: [ valueBlock := self createMatchingBlock ]
]

RBPatternBlockNode >> replacePatternNodesIn: aRBBlockNode
[
	aRBBlockNode body
		nodesDo: [ :each | (each isVariable and: [ each isPatternNode ])
				ifTrue: [ each replaceWith: (self constructLookupNodeFor: each name in: aRBBlockNode) ] ]
]

RBPatternBlockNode >> replacingBlock
[
	^ valueBlock ifNil: [ valueBlock := self createReplacingBlock ]
]

RBPatternBlockNode >> sentMessages
[
	^ OrderedCollection new
]

