RBPatternParser
	superclass: #RBParser;
	package: #'AST-Core'.

RBPatternParser >> messageNodeClass
[
	^ RBPatternMessageNode
]

RBPatternParser >> methodNodeClass
[
	^ RBPatternMethodNode
]

RBPatternParser >> parseError: aString
[
	self error: aString
]

RBPatternParser >> parseLiteralByteArrayObject
[
	| node |
	(currentToken isIdentifier and: [ currentToken isPatternVariable ])
		ifTrue: [ node := self variableNodeClass identifierToken: currentToken.
			node isLiteralNode
				ifTrue: [ self step.
					^ node ] ].
	^ super parseLiteralByteArrayObject
]

RBPatternParser >> parsePatternBlock: aClass
[
	| position node |
	position := currentToken start.
	self step.
	node := self parseBlockArgsInto: aClass new.
	node left: position.
	node body: self sequenceNodeClass new.
	self parseStatements: false into: node body.
	(currentToken isSpecial and: [ currentToken value = $} ])
		ifFalse: [ ^ self parserError: '''}'' expected' ].
	node right: currentToken start.
	self step.
	^ node
]

RBPatternParser >> parsePragmaLiteral
[
	| node |
	currentToken isPatternBlock
		ifTrue: [ ^ self parsePatternBlock: RBPatternBlockNode ].
	(currentToken isIdentifier and: [ currentToken isPatternVariable ])
		ifTrue: [ node := self variableNodeClass identifierToken: currentToken.
			node isLiteralNode
				ifFalse: [ self parseError: 'Literal pattern expected' ].
			self step.
			currentToken isPatternBlock
				ifTrue: [ node := (self parsePatternBlock: RBPatternWrapperBlockNode)
						wrappedNode: node;
						yourself ].
			^ node ].
	^ super parsePragmaLiteral
]

RBPatternParser >> parsePrimitiveLiteral
[
	| node |
	(currentToken isIdentifier and: [ currentToken isPatternVariable ])
		ifTrue: [ node := self variableNodeClass identifierToken: currentToken.
			node isLiteralNode
				ifTrue: [ self step.
					^ node ].
			currentToken := RBLiteralToken value: currentToken value asSymbol start: currentToken start stop: currentToken stop ].
	^ super parsePrimitiveLiteral
]

RBPatternParser >> parsePrimitiveObject
[
	currentToken isPatternBlock
		ifTrue: [ ^ self parsePatternBlock: RBPatternBlockNode ].
	^ super parsePrimitiveObject
]

RBPatternParser >> parseUnaryMessage
[
	| node |
	node := self parsePrimitiveObject.
	self addCommentsTo: node.
	[ currentToken isLiteralToken
		ifTrue: [ self patchLiteralMessage ].
	currentToken isPatternBlock
		ifTrue: [ node := (self parsePatternBlock: RBPatternWrapperBlockNode)
				wrappedNode: node;
				yourself ].
	currentToken isIdentifier ]
		whileTrue: [ node := self parseUnaryMessageWith: node ].
	self addCommentsTo: node.
	^ node
]

RBPatternParser >> patchLiteralArrayToken
[
	(currentToken isIdentifier and: [ currentToken isPatternVariable ])
		ifTrue: [ ^ self ].
	super patchLiteralArrayToken
]

RBPatternParser >> pragmaNodeClass
[
	^ RBPatternPragmaNode
]

RBPatternParser >> scannerClass
[
	^ RBPatternScanner
]

RBPatternParser >> variableNodeClass
[
	^ RBPatternVariableNode
]

