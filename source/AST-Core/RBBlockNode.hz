RBBlockNode
	superclass: #RBValueNode;
	instanceVariables: #(#left #right #colons #arguments #bar #body #scope );
	package: #'AST-Core'.

RBBlockNode >> = anObject
[
	self == anObject
		ifTrue: [ ^ true ].
	self class = anObject class
		ifFalse: [ ^ false ].
	self body = anObject body
		ifFalse: [ ^ false ].
	self arguments size = anObject arguments size
		ifFalse: [ ^ false ].
	1 to: self arguments size do: [ :i | (self arguments at: i) = (anObject arguments at: i)
			ifFalse: [ ^ false ] ].
	^ true
]

RBBlockNode >> acceptVisitor: aProgramNodeVisitor
[
	^ aProgramNodeVisitor visitBlockNode: self
]

RBBlockNode >> allArgumentVariables
[
	^ self argumentNames asOrderedCollection
		addAll: super allArgumentVariables;
		yourself
]

RBBlockNode >> allDefinedVariables
[
	^ self argumentNames asOrderedCollection
		addAll: super allDefinedVariables;
		yourself
]

RBBlockNode >> argumentNames
[
	^ self arguments collect: [ :each | each name ]
]

RBBlockNode >> arguments
[
	^ arguments
]

RBBlockNode >> arguments: argCollection
[
	arguments := argCollection.
	arguments do: [ :each | each parent: self ]
]

RBBlockNode >> bar
[
	^ bar
]

RBBlockNode >> bar: anInteger
[
	bar := anInteger
]

RBBlockNode >> blockVariables
[
	| vars |
	vars := super blockVariables asOrderedCollection.
	vars addAll: self argumentNames.
	^ vars
]

RBBlockNode >> body
[
	^ body
]

RBBlockNode >> body: stmtsNode
[
	body := stmtsNode.
	body parent: self
]

RBBlockNode >> children
[
	^ self arguments copyWith: self body
]

RBBlockNode >> colons
[
	^ colons
]

RBBlockNode >> colons: anArray
[
	colons := anArray
]

RBBlockNode >> copyInContext: aDictionary
[
	^ self class new
		arguments: (self copyList: self arguments inContext: aDictionary);
		body: (self body copyInContext: aDictionary);
		yourself
]

RBBlockNode >> defines: aName
[
	^ arguments anySatisfy: [ :each | each name = aName ]
]

RBBlockNode >> directlyUses: aNode
[
	^ false
]

RBBlockNode >> equalTo: anObject withMapping: aDictionary
[
	self class = anObject class
		ifFalse: [ ^ false ].
	self arguments size = anObject arguments size
		ifFalse: [ ^ false ].
	1 to: self arguments size do: [ :i | ((self arguments at: i) equalTo: (anObject arguments at: i) withMapping: aDictionary)
			ifFalse: [ ^ false ] ].
	(self body equalTo: anObject body withMapping: aDictionary)
		ifFalse: [ ^ false ].
	self arguments do: [ :each | aDictionary removeKey: each name ].
	^ true
]

RBBlockNode >> hasArgumentNamed: aString
[
	^ self arguments anySatisfy: [ :argument | argument name = aString ]
]

RBBlockNode >> hasTemporaryNamed: aString
[
	^ self temporaries anySatisfy: [ :temp | temp name = aString ]
]

RBBlockNode >> hash
[
	^ (self hashForCollection: self arguments) bitXor: self body hash
]

RBBlockNode >> isBlock
[
	^ true
]

RBBlockNode >> isFaulty
[
	^ (self arguments anySatisfy: #isFaulty) or: [ self body isFaulty ]
]

RBBlockNode >> isImmediateNode
[
	^ true
]

RBBlockNode >> isLast: aNode
[
	^ body isLast: aNode
]

RBBlockNode >> left
[
	^ left
]

RBBlockNode >> left: anInteger
[
	left := anInteger
]

RBBlockNode >> match: aNode inContext: aDictionary
[
	aNode class = self class
		ifFalse: [ ^ false ].
	^ (self matchList: arguments against: aNode arguments inContext: aDictionary)
		and: [ body match: aNode body inContext: aDictionary ]
]

RBBlockNode >> needsParenthesis
[
	^ false
]

RBBlockNode >> postCopy
[
	super postCopy.
	self arguments: (self arguments collect: [ :each | each copy ]).
	self body: self body copy
]

RBBlockNode >> precedence
[
	^ 0
]

RBBlockNode >> references: aVariableName
[
	^ body references: aVariableName
]

RBBlockNode >> replaceNode: aNode withNode: anotherNode
[
	body == aNode
		ifTrue: [ self body: anotherNode ].
	self arguments: (arguments collect: [ :each | each == aNode
						ifTrue: [ anotherNode ]
						ifFalse: [ each ] ])
]

RBBlockNode >> right
[
	^ right
]

RBBlockNode >> right: anInteger
[
	right := anInteger
]

RBBlockNode >> scope
[
	^ scope
]

RBBlockNode >> scope: aScopedNode
[
	scope := aScopedNode
]

RBBlockNode >> startWithoutParentheses
[
	^ left
]

RBBlockNode >> statementComments
[
	^ self comments
]

RBBlockNode >> statements
[
	^ self body statements
]

RBBlockNode >> stopWithoutParentheses
[
	^ right
]

RBBlockNode >> temporaries
[
	^ self body temporaries
]

RBBlockNode >> temporaryNames
[
	^ self body temporaryNames
]

RBBlockNode >> uses: aNode
[
	aNode = body
		ifFalse: [ ^ false ].
	^ parent isMessage
		ifTrue: [ (#(#ifTrue:ifFalse: #ifTrue: #ifFalse: #ifFalse:ifTrue:) includes: parent selector) not or: [ parent isUsed ] ]
		ifFalse: [ self isUsed ]
]

RBBlockNode class >> arguments: argNodes body: sequenceNode
[
	^ self new
		arguments: argNodes;
		body: sequenceNode;
		yourself
]

RBBlockNode class >> body: sequenceNode
[
	^ self arguments: #() body: sequenceNode
]

