RBPatternMethodNode
	superclass: #RBMethodNode;
	instanceVariables: #(#isList );
	package: #'AST-Core'.

RBPatternMethodNode >> copyInContext: aDictionary
[
	| selectors |
	selectors := self isSelectorList
		ifTrue: [ (aDictionary at: selectorParts first value) keywords ]
		ifFalse: [ self selectorParts collect: [ :each | aDictionary at: each value ] ].
	^ RBMethodNode new
		selectorParts:
				(selectors
						collect: [ :each | (each last = $:
								ifTrue: [ RBKeywordToken ]
								ifFalse: [ RBIdentifierToken ]) value: each start: nil ]);
		arguments: (self copyList: self arguments inContext: aDictionary);
		pragmas:
				(self pragmas isEmpty
						ifTrue: [ aDictionary at: '-pragmas-' ifAbsent: [ #() ] ]
						ifFalse: [ self copyList: self pragmas inContext: aDictionary ]);
		body: (self body copyInContext: aDictionary);
		source: (aDictionary at: '-source-');
		yourself
]

RBPatternMethodNode >> isPatternNode
[
	^ true
]

RBPatternMethodNode >> isSelectorList
[
	^ isList
]

RBPatternMethodNode >> match: aNode inContext: aDictionary
[
	aNode class = self matchingClass
		ifFalse: [ ^ false ].
	aDictionary at: '-source-' put: aNode source.
	self isSelectorList
		ifTrue: [ ^ (aDictionary at: selectorParts first value ifAbsentPut: [ aNode selector ]) = aNode selector
				and: [ (aDictionary at: arguments first ifAbsentPut: [ aNode arguments ]) = aNode arguments
						and: [ (self matchPragmas: self pragmas against: aNode pragmas inContext: aDictionary)
								and: [ body match: aNode body inContext: aDictionary ] ] ] ].
	^ (self matchArgumentsAgainst: aNode inContext: aDictionary)
		and: [ (self matchPragmas: self pragmas against: aNode pragmas inContext: aDictionary)
				and: [ body match: aNode body inContext: aDictionary ] ]
]

RBPatternMethodNode >> matchArgumentsAgainst: aNode inContext: aDictionary
[
	self arguments size = aNode arguments size
		ifFalse: [ ^ false ].
	(self matchSelectorAgainst: aNode inContext: aDictionary)
		ifFalse: [ ^ false ].
	self arguments
		with: aNode arguments
		do: [ :first :second | (first match: second inContext: aDictionary)
				ifFalse: [ ^ false ] ].
	^ true
]

RBPatternMethodNode >> matchSelectorAgainst: aNode inContext: aDictionary
[
	self selectorParts
		with: aNode selectorParts
		do: [ :first :second | | keyword |
			keyword := aDictionary
				at: first value
				ifAbsentPut: [ first isPatternVariable
						ifTrue: [ second value ]
						ifFalse: [ first value ] ].
			keyword = second value
				ifFalse: [ ^ false ] ].
	^ true
]

RBPatternMethodNode >> matchingClass
[
	^ RBMethodNode
]

RBPatternMethodNode >> selectorParts: tokenCollection arguments: variableNodes
[
	super selectorParts: tokenCollection arguments: variableNodes.
	isList := (tokenCollection first value at: 2) == self listCharacter
]

RBPatternMethodNode class >> selectorParts: tokenCollection arguments: variableNodes
[
	^ (tokenCollection anySatisfy: [ :each | each isPatternVariable ])
		ifTrue: [ super selectorParts: tokenCollection arguments: variableNodes ]
		ifFalse: [ RBMethodNode selectorParts: tokenCollection arguments: variableNodes ]
]

