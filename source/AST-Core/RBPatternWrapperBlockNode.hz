RBPatternWrapperBlockNode
	superclass: #RBPatternBlockNode;
	instanceVariables: #(#wrappedNode );
	package: #'AST-Core'.

RBPatternWrapperBlockNode >> acceptVisitor: aProgramNodeVisitor
[
	^ aProgramNodeVisitor visitPatternWrapperBlockNode: self
]

RBPatternWrapperBlockNode >> copyInContext: aDictionary
[
	"I don't know what this would mean, so ignore it."

	^ wrappedNode copyInContext: aDictionary
]

RBPatternWrapperBlockNode >> match: aNode inContext: aDictionary
[
	(wrappedNode match: aNode inContext: aDictionary)
		ifFalse: [ ^ false ].
	^ super match: aNode inContext: aDictionary
]

RBPatternWrapperBlockNode >> precedence
[
	^ 1
]

RBPatternWrapperBlockNode >> wrappedNode
[
	^ wrappedNode
]

RBPatternWrapperBlockNode >> wrappedNode: aRBProgramNode
[
	wrappedNode := aRBProgramNode.
	aRBProgramNode parent: self
]

