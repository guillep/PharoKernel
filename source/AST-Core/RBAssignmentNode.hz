RBAssignmentNode
	superclass: #RBValueNode;
	instanceVariables: #(#variable #assignment #value );
	package: #'AST-Core'.

RBAssignmentNode >> = anObject
[
	self == anObject
		ifTrue: [ ^ true ].
	self class = anObject class
		ifFalse: [ ^ false ].
	^ self variable = anObject variable and: [ self value = anObject value ]
]

RBAssignmentNode >> acceptVisitor: aProgramNodeVisitor
[
	^ aProgramNodeVisitor visitAssignmentNode: self
]

RBAssignmentNode >> assignment
[
	^ assignment
]

RBAssignmentNode >> assignment: anInteger
[
	assignment := anInteger
]

RBAssignmentNode >> assignmentOperator
[
	^ ':='
]

RBAssignmentNode >> assignmentPosition
[
	^ assignment
]

RBAssignmentNode >> assigns: aVariableName
[
	^ variable name = aVariableName or: [ value assigns: aVariableName ]
]

RBAssignmentNode >> bestNodeFor: anInterval
[
	(self intersectsInterval: anInterval)
		ifFalse: [ ^ nil ].
	(self containedBy: anInterval)
		ifTrue: [ ^ self ].
	assignment ifNil: [ ^ super bestNodeFor: anInterval ].
	((anInterval first between: assignment and: assignment + 1)
		or: [ assignment between: anInterval first and: anInterval last ])
		ifTrue: [ ^ self ].
	self children do: [ :each | | node |
			node := each bestNodeFor: anInterval.
			node notNil
				ifTrue: [ ^ node ] ]
]

RBAssignmentNode >> children
[
	^ Array with: value with: variable
]

RBAssignmentNode >> copyInContext: aDictionary
[
	^ self class new
		variable: (self variable copyInContext: aDictionary);
		value: (self value copyInContext: aDictionary);
		yourself
]

RBAssignmentNode >> directlyUses: aNode
[
	^ aNode = value
		ifTrue: [ true ]
		ifFalse: [ self isDirectlyUsed ]
]

RBAssignmentNode >> equalTo: anObject withMapping: aDictionary
[
	^ self class = anObject class
		and: [ (self variable equalTo: anObject variable withMapping: aDictionary)
				and: [ self value equalTo: anObject value withMapping: aDictionary ] ]
]

RBAssignmentNode >> hash
[
	^ self variable hash bitXor: self value hash
]

RBAssignmentNode >> isAssignment
[
	^ true
]

RBAssignmentNode >> isFaulty
[
	^ self variable isFaulty or: [ self value isFaulty ]
]

RBAssignmentNode >> match: aNode inContext: aDictionary
[
	aNode class = self class
		ifFalse: [ ^ false ].
	^ (variable match: aNode variable inContext: aDictionary) and: [ value match: aNode value inContext: aDictionary ]
]

RBAssignmentNode >> needsParenthesis
[
	^ parent ifNil: [ false ] ifNotNil: [ self precedence > parent precedence ]
]

RBAssignmentNode >> postCopy
[
	super postCopy.
	self variable: self variable copy.
	self value: self value copy
]

RBAssignmentNode >> precedence
[
	^ 5
]

RBAssignmentNode >> replaceNode: aNode withNode: anotherNode
[
	value == aNode
		ifTrue: [ self value: anotherNode ].
	variable == aNode
		ifTrue: [ self variable: anotherNode ]
]

RBAssignmentNode >> replaceSourceWith: aNode
[
	"Check if we need to convert the assignment. Also check if we are being replaced with a setter message send. If so, create the replacements to edit the original source."

	(aNode isAssignment and: [ aNode assignmentOperator ~= self assignmentOperator ])
		ifTrue: [ self
				addReplacement:
					(RBStringReplacement
						replaceFrom: self assignmentPosition
						to: self assignmentPosition + self assignmentOperator size - 1
						with: aNode assignmentOperator).
			(aNode variable = variable and: [ aNode value = value ])
				ifTrue: [ ^ self ] ].
	aNode isMessage
		ifFalse: [ ^ super replaceSourceWith: aNode ].
	aNode receiver isVariable
		ifFalse: [ ^ super replaceSourceWith: aNode ].
	aNode numArgs = 1
		ifFalse: [ ^ super replaceSourceWith: aNode ].
	(self mappingFor: self value) = aNode arguments first
		ifFalse: [ ^ super replaceSourceWith: aNode ].
	(self value hasParentheses not and: [ aNode arguments first precedence >= aNode precedence ])
		ifTrue: [ self
				addReplacement: (RBStringReplacement replaceFrom: self value start to: self value start - 1 with: '(');
				addReplacement: (RBStringReplacement replaceFrom: self value stop + 1 to: self value stop with: ')') ].
	self
		addReplacement:
			(RBStringReplacement
				replaceFrom: self variable start
				to: self assignmentPosition + 1
				with: aNode receiver name , ' ' , aNode selector)
]

RBAssignmentNode >> startWithoutParentheses
[
	^ variable start
]

RBAssignmentNode >> stopWithoutParentheses
[
	^ value stop
]

RBAssignmentNode >> uses: aNode
[
	^ aNode = value
		ifTrue: [ true ]
		ifFalse: [ self isUsed ]
]

RBAssignmentNode >> value
[
	^ value
]

RBAssignmentNode >> value: aValueNode
[
	value := aValueNode.
	value parent: self
]

RBAssignmentNode >> variable
[
	^ variable
]

RBAssignmentNode >> variable: varNode
[
	variable := varNode.
	variable parent: self
]

RBAssignmentNode >> variable: aVariableNode value: aValueNode position: anInteger
[
	self variable: aVariableNode.
	self value: aValueNode.
	assignment := anInteger
]

RBAssignmentNode class >> variable: aVariableNode value: aValueNode
[
	^ self variable: aVariableNode value: aValueNode position: nil
]

RBAssignmentNode class >> variable: aVariableNode value: aValueNode position: anInteger
[
	^ self new
		variable: aVariableNode value: aValueNode position: anInteger;
		yourself
]

