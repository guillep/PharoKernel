RBValueNode
	superclass: #RBProgramNode;
	instanceVariables: #(#parentheses );
	package: #'AST-Core'.

RBValueNode >> addParenthesis: anInterval
[
	parentheses ifNil: [ parentheses := OrderedCollection new: 1 ].
	parentheses add: anInterval
]

RBValueNode >> asSequenceNode
[
	^ RBSequenceNode statements: {self}
]

RBValueNode >> containedBy: anInterval
[
	^ anInterval first <= self startWithoutParentheses and: [ anInterval last >= self stopWithoutParentheses ]
]

RBValueNode >> hasParentheses
[
	^ self parentheses notEmpty
]

RBValueNode >> isValue
[
	^ true
]

RBValueNode >> needsParenthesis
[
	^ self subclassResponsibility
]

RBValueNode >> parentheses
[
	^ parentheses ifNil: [ #() ] ifNotNil: [ parentheses ]
]

RBValueNode >> start
[
	^ parentheses ifNil: [ self startWithoutParentheses ] ifNotNil: [ parentheses last first ]
]

RBValueNode >> startWithoutParentheses
[
	^ self subclassResponsibility
]

RBValueNode >> stop
[
	^ parentheses ifNil: [ self stopWithoutParentheses ] ifNotNil: [ parentheses last last ]
]

RBValueNode >> stopWithoutParentheses
[
	^ self subclassResponsibility
]

