RBParseTreeSearcher
	superclass: #RBProgramNodeVisitor;
	instanceVariables: #(#searches #answer #argumentSearches #context #messages );
	package: #'AST-Core'.

RBParseTreeSearcher >> addArgumentRule: aParseTreeRule
[
	argumentSearches add: aParseTreeRule.
	aParseTreeRule owner: self
]

RBParseTreeSearcher >> addArgumentRules: ruleCollection
[
	ruleCollection do: [ :each | self addArgumentRule: each ]
]

RBParseTreeSearcher >> addRule: aParseTreeRule
[
	searches add: aParseTreeRule.
	aParseTreeRule owner: self
]

RBParseTreeSearcher >> addRules: ruleCollection
[
	ruleCollection do: [ :each | self addRule: each ]
]

RBParseTreeSearcher >> answer
[
	^ answer
]

RBParseTreeSearcher >> answer: anObject
[
	answer := anObject
]

RBParseTreeSearcher >> canMatchMethod: aCompiledMethod
[
	| actualMessages |
	self messages isEmpty
		ifTrue: [ ^ true ].
	actualMessages := aCompiledMethod messages.
	^ self messages anySatisfy: [ :each | actualMessages includes: each ]
]

RBParseTreeSearcher >> context
[
	^ context
]

RBParseTreeSearcher >> executeMethod: aParseTree initialAnswer: anObject
[
	answer := anObject.
	searches detect: [ :each | (each performOn: aParseTree) notNil ] ifNone: [  ].
	^ answer
]

RBParseTreeSearcher >> executeTree: aParseTree
[
	"Save our current context, in case someone is performing another search inside a match."

	| oldContext |
	oldContext := context.
	context := SmallDictionary new.
	self visitNode: aParseTree.
	context := oldContext.
	^ answer
]

RBParseTreeSearcher >> executeTree: aParseTree initialAnswer: aValue
[
	answer := aValue.
	^ self executeTree: aParseTree
]

RBParseTreeSearcher >> foundMatch
[
	
]

RBParseTreeSearcher >> hasRules
[
	^ searches notEmpty
]

RBParseTreeSearcher >> initialize
[
	super initialize.
	context := SmallDictionary new.
	searches := OrderedCollection new.
	argumentSearches := OrderedCollection new: 0.
	answer := nil
]

RBParseTreeSearcher >> lookForMoreMatchesInContext: oldContext
[
	oldContext
		keysAndValuesDo: [ :key :value | (key isString not and: [ key recurseInto ])
				ifTrue: [ value do: [ :each | self visitNode: each ] ] ]
]

RBParseTreeSearcher >> matches: aString do: aBlock
[
	self addRule: (RBSearchRule searchFor: aString thenDo: aBlock)
]

RBParseTreeSearcher >> matchesAnyArgumentOf: stringCollection do: aBlock
[
	stringCollection do: [ :each | self matchesArgument: each do: aBlock ]
]

RBParseTreeSearcher >> matchesAnyMethodOf: aStringCollection do: aBlock
[
	aStringCollection do: [ :each | self matchesMethod: each do: aBlock ]
]

RBParseTreeSearcher >> matchesAnyOf: aStringCollection do: aBlock
[
	aStringCollection do: [ :each | self matches: each do: aBlock ]
]

RBParseTreeSearcher >> matchesAnyTreeOf: treeCollection do: aBlock
[
	treeCollection do: [ :each | self matchesTree: each do: aBlock ]
]

RBParseTreeSearcher >> matchesArgument: aString do: aBlock
[
	self addArgumentRule: (RBSearchRule searchFor: aString thenDo: aBlock)
]

RBParseTreeSearcher >> matchesArgumentTree: aBRProgramNode do: aBlock
[
	self addArgumentRule: (RBSearchRule searchForTree: aBRProgramNode thenDo: aBlock)
]

RBParseTreeSearcher >> matchesMethod: aString do: aBlock
[
	self addRule: (RBSearchRule searchForMethod: aString thenDo: aBlock)
]

RBParseTreeSearcher >> matchesTree: aBRProgramNode do: aBlock
[
	self addRule: (RBSearchRule searchForTree: aBRProgramNode thenDo: aBlock)
]

RBParseTreeSearcher >> messages
[
	messages notNil
		ifTrue: [ ^ messages ].
	argumentSearches notEmpty
		ifTrue: [ ^ messages := #() ].
	messages := Set new.
	searches
		do: [ :each | | searchMessages |
			searchMessages := each sentMessages.
			RBProgramNode optimizedSelectors do: [ :sel | searchMessages remove: sel ifAbsent: [  ] ].
			searchMessages isEmpty
				ifTrue: [ ^ messages := #() ].
			messages addAll: searchMessages ].
	^ messages := messages asArray
]

RBParseTreeSearcher >> performSearches: aSearchCollection on: aNode
[
	| value |
	aSearchCollection
		do: [ :aSearchRule | value := aSearchRule performOn: aNode.
			value notNil
				ifTrue: [ self foundMatch.
					^ value ] ].
	^ nil
]

RBParseTreeSearcher >> recusivelySearchInContext
[
	"We need to save the matched context since the other searches might overwrite it."

	| oldContext |
	oldContext := context.
	context := SmallDictionary new.
	self lookForMoreMatchesInContext: oldContext.
	context := oldContext
]

RBParseTreeSearcher >> visitArgumentNode: aNode
[
	| value |
	value := self performSearches: argumentSearches on: aNode.
	^ value ifNil: [ super visitArgumentNode: aNode.
			aNode ] ifNotNil: [ value ]
]

RBParseTreeSearcher >> visitNode: aNode
[
	| value |
	value := self performSearches: searches on: aNode.
	^ value ifNil: [ super visitNode: aNode.
			aNode ] ifNotNil: [ value ]
]

RBParseTreeSearcher class >> buildSelectorString: aSelector
[
	| stream keywords |
	aSelector numArgs = 0
		ifTrue: [ ^ aSelector ].
	stream := WriteStream on: String new.
	keywords := aSelector keywords.
	1 to: keywords size do: [ :i | stream
			nextPutAll: (keywords at: i);
			nextPutAll: ' ``@arg';
			nextPutAll: i printString;
			nextPut: $  ].
	^ stream contents
]

RBParseTreeSearcher class >> buildSelectorTree: aSelector
[
	aSelector isEmpty
		ifTrue: [ ^ nil ].
	^ RBParser
		parseRewriteExpression: '``@receiver ' , (self buildSelectorString: aSelector)
		onError: [ :err :pos | ^ nil ]
]

RBParseTreeSearcher class >> buildTree: aString method: aBoolean
[
	^ aBoolean
		ifTrue: [ RBParser parseRewriteMethod: aString ]
		ifFalse: [ RBParser parseRewriteExpression: aString ]
]

RBParseTreeSearcher class >> getterMethod: aVarName
[
	^ self new
		matchesMethod: '`method ^' , aVarName do: [ :aNode :ans | aNode selector ];
		yourself
]

RBParseTreeSearcher class >> justSendsSuper
[
	^ self new
		matchesAnyMethodOf: #('`@method: `@args ^ super `@method: `@args' '`@method: `@args super `@method: `@args')
			do: [ :node :answer | true ];
		yourself
]

RBParseTreeSearcher class >> returnSetterMethod: aVarName
[
	^ self new
		matchesMethod: '`method: `Arg ^' , aVarName , ' := `Arg' do: [ :aNode :ans | aNode selector ];
		yourself
]

RBParseTreeSearcher class >> setterMethod: aVarName
[
	^ self new
		matchesAnyMethodOf:
				(Array with: '`method: `Arg ' , aVarName , ' := `Arg' with: '`method: `Arg ^' , aVarName , ' := `Arg')
			do: [ :aNode :ans | aNode selector ];
		yourself
]

RBParseTreeSearcher class >> treeMatching: aString in: aParseTree
[
	self new
		matches: aString do: [ :aNode :answer | ^ aNode ];
		executeTree: aParseTree.
	^ nil
]

RBParseTreeSearcher class >> treeMatchingStatements: aString in: aParseTree
[
	| notifier tree |
	notifier := self new.
	tree := RBParser parseExpression: aString.
	tree isSequence
		ifFalse: [ tree := RBSequenceNode statements: (Array with: tree) ].
	tree temporaries: (Array with: (RBPatternVariableNode named: '`@temps')).
	tree addNodeFirst: (RBPatternVariableNode named: '`@.S1').
	tree lastIsReturn
		ifFalse: [ tree addNode: (RBPatternVariableNode named: '`@.S2') ].
	notifier matchesTree: tree do: [ :aNode :answer | ^ RBParser parseExpression: aString ].
	notifier executeTree: aParseTree.
	^ nil
]

