RBParser
	instanceVariables: #(#scanner #currentToken #nextToken #errorBlock #source #comments #pragmas );
	package: #'AST-Core'.

RBParser >> addCommentsTo: aNode
[
	aNode comments: aNode comments , comments.
	comments := OrderedCollection new
]

RBParser >> addPragma: aPragma
[
	pragmas ifNil: [ pragmas := OrderedCollection new ].
	pragmas addLast: aPragma
]

RBParser >> arrayNodeClass
[
	^ RBArrayNode
]

RBParser >> assignmentNodeClass
[
	^ RBAssignmentNode
]

RBParser >> atEnd
[
	^ currentToken class == RBToken
]

RBParser >> basicParsePragma
[
	^ currentToken isIdentifier
		ifTrue: [ self parseUnaryPragma ]
		ifFalse: [ currentToken isKeyword
				ifTrue: [ self parseKeywordPragma ]
				ifFalse: [ self parseBinaryPragma ] ]
]

RBParser >> blockNodeClass
[
	^ RBBlockNode
]

RBParser >> cascadeNodeClass
[
	^ RBCascadeNode
]

RBParser >> errorBlock
[
	^ errorBlock ifNil: [ [ :message :position |  ] ] ifNotNil: [ errorBlock ]
]

RBParser >> errorBlock: aBlock
[
	errorBlock := aBlock.
	scanner notNil
		ifTrue: [ scanner errorBlock: aBlock ]
]

RBParser >> errorPosition
[
	^ currentToken ifNotNil: [ :token | token start ] ifNil: [ 1 ]
]

RBParser >> initialize
[
	comments := OrderedCollection new
]

RBParser >> initializeParserWith: aString
[
	source := aString.
	self scanner: (self scannerClass on: (ReadStream on: aString))
]

RBParser >> literalArrayNodeClass
[
	^ RBLiteralArrayNode
]

RBParser >> literalNodeClass
[
	^ RBLiteralNode
]

RBParser >> messageNodeClass
[
	^ RBMessageNode
]

RBParser >> methodNodeClass
[
	^ RBMethodNode
]

RBParser >> nextToken
[
	^ nextToken ifNil: [ nextToken := scanner next ] ifNotNil: [ nextToken ]
]

RBParser >> parseArgs
[
	| args |
	args := OrderedCollection new.
	[ currentToken isIdentifier ] whileTrue: [ args add: self parseVariableNode ].
	^ args
]

RBParser >> parseArray
[
	| position node |
	position := currentToken start.
	self step.
	node := self arrayNodeClass new.
	node left: position.
	self parseStatementList: false into: node.
	(currentToken isSpecial and: [ currentToken value = $} ])
		ifFalse: [ ^ self parserError: 'expected }' ].
	node right: currentToken start.
	self step.
	^ node
]

RBParser >> parseAssignment
[
	"Need one token lookahead to see if we have a ':='. This method could 
	make it possible to assign the literals true, false and nil."

	| node position |
	(currentToken isIdentifier and: [ self nextToken isAssignment ])
		ifFalse: [ ^ self parseCascadeMessage ].
	node := self parseVariableNode.
	position := currentToken start.
	self step.
	^ self assignmentNodeClass variable: node value: self parseAssignment position: position
]

RBParser >> parseBinaryMessage
[
	| node |
	node := self parseUnaryMessage.
	[ currentToken isLiteralToken
		ifTrue: [ self patchNegativeLiteral ].
	currentToken isBinary ]
		whileTrue: [ node := self parseBinaryMessageWith: node ].
	^ node
]

RBParser >> parseBinaryMessageWith: aNode
[
	| binaryToken |
	binaryToken := currentToken.
	self step.
	^ self messageNodeClass
		receiver: aNode
		selectorParts: (Array with: binaryToken)
		arguments: (Array with: self parseUnaryMessage)
]

RBParser >> parseBinaryPattern
[
	| binaryToken node args |
	currentToken isBinary
		ifFalse: [ ^ self parserError: 'Message pattern expected' ].
	binaryToken := currentToken.
	self step.
	args := Array with: self parseVariableNode.
	node := self methodNodeClass selectorParts: (Array with: binaryToken) arguments: args.
	node comments: node comments , args last comments.
	args last comments: nil.
	^ node
]

RBParser >> parseBinaryPragma
[
	| binaryToken |
	currentToken isBinary
		ifFalse: [ ^ self parserError: 'Message pattern expected' ].
	binaryToken := currentToken.
	self step.
	^ self pragmaNodeClass selectorParts: (Array with: binaryToken) arguments: (Array with: self parsePragmaLiteral)
]

RBParser >> parseBlock
[
	| position node |
	position := currentToken start.
	self step.
	node := self blockNodeClass new.
	self parseBlockArgsInto: node.
	node left: position.
	node body: self sequenceNodeClass new.
	self parseStatements: false into: node body.
	(currentToken isSpecial and: [ currentToken value = $] ])
		ifFalse: [ ^ self parserError: ''']'' expected' translated ].
	node right: currentToken start.
	self step.
	^ node
]

RBParser >> parseBlockArgsInto: node
[
	| verticalBar args colons |
	args := OrderedCollection new: 2.
	colons := OrderedCollection new: 2.
	verticalBar := false.
	[ currentToken isSpecial and: [ currentToken value = $: ] ]
		whileTrue: [ colons add: currentToken start.
			self step.	":"
			verticalBar := true.
			args add: self parseVariableNode ].
	verticalBar
		ifTrue: [ 
			currentToken isBinary
				ifTrue: [ 
					node bar: currentToken start.
					currentToken value = #|
						ifTrue: [ self step ]
						ifFalse: [ 
							currentToken value = #'||'
								ifTrue: [ 
									"Hack the current token to be the start 									of temps bar"
									currentToken
										value: #|;
										start: currentToken start + 1 ]
								ifFalse: [ ^ self parserError: '''|'' expected' ] ] ]
				ifFalse: [ (currentToken isSpecial and: [ currentToken value = $] ])
						ifFalse: [ ^ self parserError: '''|'' expected' ] ] ].
	node
		arguments: args;
		colons: colons.
	^ node
]

RBParser >> parseCascadeMessage
[
	| node receiver messages semicolons |
	node := self parseKeywordMessage.
	(currentToken isSpecial and: [ currentToken value = $; and: [ node isMessage ] ])
		ifFalse: [ ^ node ].
	receiver := node receiver.
	messages := OrderedCollection new: 3.
	semicolons := OrderedCollection new: 3.
	messages add: node.
	[ currentToken isSpecial and: [ currentToken value = $; ] ]
		whileTrue: [ semicolons add: currentToken start.
			self step.
			messages
				add:
					(currentToken isIdentifier
						ifTrue: [ self parseUnaryMessageWith: receiver ]
						ifFalse: [ currentToken isKeyword
								ifTrue: [ self parseKeywordMessageWith: receiver ]
								ifFalse: [ | temp |
									currentToken isLiteralToken
										ifTrue: [ self patchNegativeLiteral ].
									currentToken isBinary
										ifFalse: [ ^ self parserError: 'Message expected' ].
									temp := self parseBinaryMessageWith: receiver.
									temp == receiver
										ifTrue: [ ^ self parserError: 'Message expected' ].
									temp ] ]) ].
	^ self cascadeNodeClass messages: messages semicolons: semicolons
]

RBParser >> parseErrorNode: aMessageString
[
	| token sourceString |
	currentToken isError
		ifTrue: [ ^ RBParseErrorNode errorMessage: currentToken cause token: currentToken ].
	sourceString := source copyFrom: self errorPosition to: source size.
	token := RBValueToken value: sourceString start: self errorPosition.
	^ RBParseErrorNode errorMessage: aMessageString token: token
]

RBParser >> parseExpression: aString
[
	| node |
	node := self parseStatements: false.
	(RBMethodNode selector: #noMethod body: node) source: aString.	"Make the sequence node have a method node as its parent"
	self atEnd
		ifFalse: [ ^ self parserError: 'Unknown input at end' ].
	^ node
]

RBParser >> parseKeywordMessage
[
	^ self parseKeywordMessageWith: self parseBinaryMessage
]

RBParser >> parseKeywordMessageWith: node
[
	| args isKeyword keywords |
	args := OrderedCollection new: 3.
	keywords := OrderedCollection new: 3.
	isKeyword := false.
	[ currentToken isKeyword ]
		whileTrue: [ keywords add: currentToken.
			self step.
			args add: self parseBinaryMessage.
			isKeyword := true ].
	^ isKeyword
		ifTrue: [ self messageNodeClass receiver: node selectorParts: keywords arguments: args ]
		ifFalse: [ node ]
]

RBParser >> parseKeywordPattern
[
	| keywords args node |
	keywords := OrderedCollection new: 2.
	args := OrderedCollection new: 2.
	[ currentToken isKeyword ] whileTrue: [ keywords add: currentToken.
			self step.
			args add: self parseVariableNode ].
	node := self methodNodeClass selectorParts: keywords arguments: args.
	node comments: node comments , args last comments.
	args last comments: nil.
	^ node
]

RBParser >> parseKeywordPragma
[
	| keywords arguments |
	keywords := OrderedCollection new: 2.
	arguments := OrderedCollection new: 2.
	[ currentToken isKeyword ]
		whileTrue: [ keywords addLast: currentToken.
			self step.
			arguments addLast: self parsePragmaLiteral ].
	^ self pragmaNodeClass selectorParts: keywords arguments: arguments
]

RBParser >> parseLiteralArray
[
	| stream start stop |
	start := currentToken start.
	stream := WriteStream on: (Array new: 5).
	self step.
	[ self atEnd or: [ currentToken isSpecial and: [ currentToken value = $) ] ] ]
		whileFalse: [ stream nextPut: self parseLiteralArrayObject ].
	(currentToken isSpecial and: [ currentToken value = $) ])
		ifFalse: [ ^ self parserError: ''')'' expected' ].
	stop := currentToken stop.
	self step.
	^ self literalArrayNodeClass
		startPosition: start
		contents: stream contents
		stopPosition: stop
		isByteArray: false
]

RBParser >> parseLiteralArrayObject
[
	currentToken isSpecial
		ifTrue: [ currentToken value = $(
				ifTrue: [ ^ self parseLiteralArray ]	"currentToken value == $[ ifTrue: [^self parseLiteralByteArray]" ].
	currentToken isLiteralArrayToken
		ifTrue: [ ^ currentToken isForByteArray
				ifTrue: [ self parseLiteralByteArray ]
				ifFalse: [ self parseLiteralArray ] ].
	currentToken isLiteralToken
		ifFalse: [ self patchLiteralArrayToken ].
	^ self parsePrimitiveLiteral
]

RBParser >> parseLiteralByteArray
[
	| stream start stop |
	start := currentToken start.
	stream := WriteStream on: (Array new: 5).
	self step.
	[ self atEnd or: [ currentToken isSpecial and: [ currentToken value = $] ] ] ]
		whileFalse: [ stream nextPut: self parseLiteralByteArrayObject ].
	(currentToken isSpecial and: [ currentToken value = $] ])
		ifFalse: [ ^ self parserError: ''']'' expected' ].
	stop := currentToken stop.
	self step.
	^ self literalArrayNodeClass
		startPosition: start
		contents: stream contents
		stopPosition: stop
		isByteArray: true
]

RBParser >> parseLiteralByteArrayObject
[
	(currentToken isLiteralToken and: [ currentToken value isInteger and: [ currentToken value between: 0 and: 255 ] ])
		ifFalse: [ ^ self parserError: 'Expecting 8-bit integer' ].
	^ self parsePrimitiveLiteral
]

RBParser >> parseLiterals: aString
[
	| stream |
	stream := WriteStream on: (Array new: 5).
	[ self atEnd or: [ currentToken isSpecial and: [ currentToken value = $) ] ] ]
		whileFalse: [ stream nextPut: self parseLiteralArrayObject ].
	self atEnd
		ifFalse: [ ^ self parserError: 'Unknown input at end' ].
	^ stream contents collect: [ :each | each value ]
]

RBParser >> parseMessagePattern
[
	currentToken isLiteralToken
		ifTrue: [ self patchLiteralMessage ].
	^ currentToken isIdentifier
		ifTrue: [ self parseUnaryPattern ]
		ifFalse: [ currentToken isKeyword
				ifTrue: [ self parseKeywordPattern ]
				ifFalse: [ self parseBinaryPattern ] ]
]

RBParser >> parseMethod
[
	| methodNode |
	methodNode := self parseMessagePattern.
	self parsePragmas.
	self addCommentsTo: methodNode.
	methodNode body: self sequenceNodeClass new.
	self parseStatements: false into: methodNode body.
	pragmas ifNotNil: [ methodNode pragmas: pragmas ].
	^ methodNode
]

RBParser >> parseMethod: aString
[
	| node errorNode |
	node := self parseMethod.
	self atEnd
		ifFalse: [ errorNode := self parserError: 'Unknown input at end'.
			errorNode ifNotNil: [ node statements: node statements , {errorNode} ] ].
	node source: aString.
	^ node
]

RBParser >> parseNegatedNumber
[
	| token |
	(self nextToken isLiteralToken not or: [ self nextToken realValue isNumber not ])
		ifTrue: [ ^ self parserError: 'only numbers may be negated' ].
	token := RBLiteralToken value: self nextToken realValue negated start: currentToken start stop: nextToken stop.
	self
		step;
		step.
	^ self literalNodeClass literalToken: token
]

RBParser >> parseParenthesizedExpression
[
	| leftParen node |
	leftParen := currentToken start.
	self step.
	node := self parseAssignment.
	^ (currentToken isSpecial and: [ currentToken value = $) ])
		ifTrue: [ node addParenthesis: (leftParen to: currentToken start).
			self step.
			node ]
		ifFalse: [ self parserError: ''')'' expected' ]
]

RBParser >> parsePragma
[
	| start pragma |
	start := currentToken start.
	self step.
	pragma := self basicParsePragma.
	(currentToken isBinary and: [ currentToken value == #> ])
		ifFalse: [ ^ self parserError: '''>'' expected' ].
	pragma
		left: start;
		right: currentToken start.
	self addPragma: pragma
]

RBParser >> parsePragmaLiteral
[
	^ self parseLiteralArrayObject
]

RBParser >> parsePragmas
[
	[ currentToken isBinary and: [ currentToken value = #< ] ] whileTrue: [ self parsePragma.
			self step ]
]

RBParser >> parsePrimitiveIdentifier
[
	| token node |
	token := currentToken.
	self step.
	node := self variableNodeClass identifierToken: token.
	self addCommentsTo: node.
	^ node
]

RBParser >> parsePrimitiveLiteral
[
	| token |
	token := currentToken.
	self step.
	^ self literalNodeClass literalToken: token
]

RBParser >> parsePrimitiveObject
[
	currentToken isIdentifier
		ifTrue: [ ^ self parsePrimitiveIdentifier ].
	(currentToken isLiteralToken and: [ currentToken isMultiKeyword not ])
		ifTrue: [ ^ self parsePrimitiveLiteral ].
	currentToken isLiteralArrayToken
		ifTrue: [ ^ currentToken isForByteArray
				ifTrue: [ self parseLiteralByteArray ]
				ifFalse: [ self parseLiteralArray ] ].
	currentToken isSpecial
		ifTrue: [ currentToken value = $[
				ifTrue: [ ^ self parseBlock ].
			currentToken value = $(
				ifTrue: [ ^ self parseParenthesizedExpression ].
			currentToken value = ${
				ifTrue: [ ^ self parseArray ] ].
	(currentToken isBinary and: [ currentToken value = #- ])
		ifTrue: [ ^ self parseNegatedNumber ].
	^ self parserError: 'Variable or expression expected'
]

RBParser >> parseStatementList: pragmaBoolean into: sequenceNode
[
	| statements return periods returnPosition node |
	return := false.
	statements := OrderedCollection new.
	periods := OrderedCollection new.
	self addCommentsTo: sequenceNode.
	pragmaBoolean
		ifTrue: [ self parsePragmas ].
	[ currentToken isSpecial and: [ currentToken value = $. ] ]
		whileTrue: [ periods add: currentToken start.
			self step ].
	[ self atEnd or: [ currentToken isSpecial and: [ '])}' includes: currentToken value ] ] ]
		whileFalse: [ return
				ifTrue: [ (self parserError: 'End of statement list encountered')
						ifNotNil: [ :errorNode | statements add: errorNode.
							sequenceNode statements: statements.
							sequenceNode periods: periods.
							self step.
							^ sequenceNode ] ].
			(currentToken isSpecial and: [ currentToken value = $^ ])
				ifTrue: [ returnPosition := currentToken start.
					self step.
					node := self returnNodeClass return: returnPosition value: self parseAssignment.
					statements add: node.
					return := true ]
				ifFalse: [ "check for pragmas"
					(currentToken isBinary and: [ currentToken value == #< ])
						ifTrue: [ self parsePragma ]
						ifFalse: [ node := self parseAssignment.
							statements add: node ] ].
			(currentToken isSpecial and: [ currentToken value = $. ])
				ifTrue: [ periods add: currentToken start.
					self step.
					self addCommentsTo: node ]
				ifFalse: [ "check for closing pragmas"
					(currentToken isBinary and: [ currentToken value == #> ])
						ifFalse: [ return := true ]
						ifTrue: [ self step ] ].
			[ currentToken isSpecial and: [ currentToken value = $. ] ]
				whileTrue: [ periods add: currentToken start.
					self step ] ].
	statements notEmpty
		ifTrue: [ self addCommentsTo: statements last ].
	sequenceNode
		statements: statements;
		periods: periods.
	^ sequenceNode
]

RBParser >> parseStatements: pragmaBoolean
[
	^ self parseStatements: pragmaBoolean into: self sequenceNodeClass new
]

RBParser >> parseStatements: pragmaBoolean into: aSequenceNode
[
	| temps leftBar rightBar |
	temps := #().
	leftBar := rightBar := nil.
	currentToken isBinary
		ifTrue: [ currentToken value = #|
				ifTrue: [ leftBar := currentToken start.
					self step.
					temps := self parseTemps.
					(currentToken isBinary and: [ currentToken value = #| ])
						ifFalse: [ ^ self parserError: '''|'' expected' ].
					rightBar := currentToken start.
					self step ]
				ifFalse: [ currentToken value = #'||'
						ifTrue: [ rightBar := (leftBar := currentToken start) + 1.
							self step ] ] ].
	^ self parseStatementList: pragmaBoolean into: (aSequenceNode leftBar: leftBar temporaries: temps rightBar: rightBar)
]

RBParser >> parseTemps
[
	| temps |
	temps := OrderedCollection new.
	[ currentToken isIdentifier ] whileTrue: [ temps add: self parsePrimitiveIdentifier ].
	^ temps
]

RBParser >> parseUnaryMessage
[
	| node |
	node := self parsePrimitiveObject.
	self addCommentsTo: node.
	[ currentToken isLiteralToken
		ifTrue: [ self patchLiteralMessage ].
	currentToken isIdentifier ]
		whileTrue: [ node := self parseUnaryMessageWith: node ].
	self addCommentsTo: node.
	^ node
]

RBParser >> parseUnaryMessageWith: aNode
[
	| selector |
	selector := currentToken.
	self step.
	^ self messageNodeClass receiver: aNode selectorParts: (Array with: selector) arguments: #()
]

RBParser >> parseUnaryPattern
[
	| selector |
	selector := currentToken.
	self step.
	^ self methodNodeClass selectorParts: (Array with: selector) arguments: #()
]

RBParser >> parseUnaryPragma
[
	| selector |
	selector := currentToken.
	self step.
	^ self pragmaNodeClass selectorParts: (Array with: selector) arguments: #()
]

RBParser >> parseVariableNode
[
	currentToken isIdentifier
		ifFalse: [ ^ self parserError: 'Variable name expected' translated ].
	^ self parsePrimitiveIdentifier
]

RBParser >> parserError: aString
[
	"Let the errorBlock try to recover from the error."

	| errorNode errorMessage errorPosition |
	errorNode := self errorBlock cull: aString cull: self errorPosition cull: self.
	errorNode ifNotNil: [ ^ errorNode ].
	currentToken isError
		ifTrue: [ errorMessage := currentToken cause.
			errorPosition := currentToken location ]
		ifFalse: [ errorMessage := aString.
			errorPosition := currentToken start ].
	SyntaxErrorNotification
		inClass: Object
		category: nil
		withCode: source
		doitFlag: false
		errorMessage: errorMessage
		location: errorPosition
]

RBParser >> patchLiteralArrayToken
[
	(currentToken isIdentifier and: [ self nextToken isAssignment and: [ currentToken stop + 1 = self nextToken start ] ])
		ifTrue: [ currentToken := RBLiteralToken
				value: (currentToken value , ':') asSymbol
				start: currentToken start
				stop: self nextToken start.
			nextToken := RBLiteralToken value: #= start: nextToken stop stop: nextToken stop.
			^ self ].
	currentToken isAssignment
		ifTrue: [ currentToken := RBLiteralToken value: #':' start: currentToken start stop: currentToken start.
			nextToken := RBLiteralToken value: #= start: currentToken stop stop: currentToken stop.
			^ self ].
	currentToken isSpecial
		ifTrue: [ currentToken := RBLiteralToken
				value: (String with: currentToken value) asSymbol
				start: currentToken start
				stop: currentToken stop.
			^ self ].
	(currentToken isIdentifier and: [ currentToken value includes: $. ])
		ifTrue: [ currentToken := RBLiteralToken value: currentToken value start: currentToken start stop: currentToken stop.
			^ self ].
	(currentToken isIdentifier or: [ currentToken isBinary or: [ currentToken isKeyword ] ])
		ifFalse: [ ^ self parserError: 'Invalid token' ].
	currentToken := RBLiteralToken value: currentToken value asSymbol start: currentToken start stop: currentToken stop
]

RBParser >> patchLiteralMessage
[
	currentToken value == true
		ifTrue: [ ^ currentToken := RBIdentifierToken value: 'true' start: currentToken start ].
	currentToken value == false
		ifTrue: [ ^ currentToken := RBIdentifierToken value: 'false' start: currentToken start ].
	currentToken value == nil
		ifTrue: [ ^ currentToken := RBIdentifierToken value: 'nil' start: currentToken start ]
]

RBParser >> patchNegativeLiteral
[
	"Handle the special negative number case for binary message sends."

	currentToken value isNumber
		ifFalse: [ ^ self ].
	currentToken value <= 0
		ifFalse: [ ^ self ].
	currentToken value = 0
		ifTrue: [ (source notNil and: [ source notEmpty and: [ (source at: (currentToken start min: source size)) = $- ] ])
				ifFalse: [ ^ self ] ].
	nextToken := currentToken.
	currentToken := RBBinarySelectorToken value: #- start: nextToken start.
	nextToken value: nextToken value negated.
	(nextToken isKindOf: RBNumberLiteralToken)
		ifTrue: [ nextToken source: (nextToken source copyFrom: 2 to: nextToken source size) ].
	nextToken start: nextToken start + 1
]

RBParser >> pragmaNodeClass
[
	^ RBPragmaNode
]

RBParser >> returnNodeClass
[
	^ RBReturnNode
]

RBParser >> scanner: aScanner
[
	scanner := aScanner.
	pragmas := nil.
	self initialize.
	self step
]

RBParser >> scannerClass
[
	^ RBScanner
]

RBParser >> selfNodeClass
[
	^ RBSelfNode
]

RBParser >> sequenceNodeClass
[
	^ RBSequenceNode
]

RBParser >> step
[
	(currentToken notNil and: [ currentToken comments notNil ])
		ifTrue: [ comments addAll: currentToken comments ].
	nextToken notNil
		ifTrue: [ currentToken := nextToken.
			nextToken := nil ]
		ifFalse: [ currentToken := scanner next ]
]

RBParser >> superNodeClass
[
	^ RBSuperNode
]

RBParser >> thisContextNodeClass
[
	^ RBThisContextNode
]

RBParser >> variableNodeClass
[
	^ RBVariableNode
]

RBParser class >> errorNodeBlock
[
	^ [ :aString :position :parser | parser parseErrorNode: aString ]
]

RBParser class >> parseCompiledMethod: aCompiledMethod
[
	^ self parseMethod: aCompiledMethod sourceCode
]

RBParser class >> parseExpression: aString
[
	^ self parseExpression: aString onError: nil
]

RBParser class >> parseExpression: aString onError: aBlock
[
	| node parser |
	parser := self new.
	parser errorBlock: aBlock.
	parser initializeParserWith: aString.
	node := parser parseExpression: aString.
	^ (node statements size == 1 and: [ node temporaries isEmpty ])
		ifTrue: [ node statements first ]
		ifFalse: [ node ]
]

RBParser class >> parseFaultyExpression: aString
[
	^ self parseExpression: aString onError: self errorNodeBlock
]

RBParser class >> parseFaultyMethod: aString
[
	^ self parseMethod: aString onError: self errorNodeBlock
]

RBParser class >> parseLiterals: aString
[
	| parser |
	parser := self new.
	parser initializeParserWith: aString.
	^ parser parseLiterals: aString
]

RBParser class >> parseMethod: aString
[
	^ self parseMethod: aString onError: nil
]

RBParser class >> parseMethod: aString onError: aBlock
[
	| parser |
	parser := self new.
	parser errorBlock: aBlock.
	parser initializeParserWith: aString.
	^ parser parseMethod: aString
]

RBParser class >> parseMethodPattern: aString
[
	| parser |
	parser := self new.
	parser errorBlock: [ :error :position | ^ nil ].
	parser initializeParserWith: aString.
	^ parser parseMessagePattern selector
]

RBParser class >> parseRewriteExpression: aString
[
	^ self parseRewriteExpression: aString onError: nil
]

RBParser class >> parseRewriteExpression: aString onError: aBlock
[
	^ RBPatternParser parseExpression: aString onError: aBlock
]

RBParser class >> parseRewriteMethod: aString
[
	^ self parseRewriteMethod: aString onError: nil
]

RBParser class >> parseRewriteMethod: aString onError: aBlock
[
	^ RBPatternParser parseMethod: aString onError: aBlock
]

