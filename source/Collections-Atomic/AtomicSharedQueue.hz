Class
	name: #AtomicSharedQueue;
	superclass: #ClassWaitfreeQueue;
	instanceSpecification: #(#pointers #words );
	instanceVariables: #(#availSema );
	classVariables: #();
	package: #'Collections-Atomic'.

Class AtomicSharedQueue >> initialize
[
super initialize.availSema := Semaphore new
]

Class AtomicSharedQueue >> next
[
	"Fetch the next item from queue. If queue is locked or empty, block the sender until operation can complete"
| result |[ | keepWaiting |keepWaiting := false.result := self nextIfNone: [ keepWaiting := true ].keepWaiting ] whileTrue: [ self waitForNewItems ].^ result
]

Class AtomicSharedQueue >> signalAddedNewItem
[
availSema signal
]

Class AtomicSharedQueue >> signalNoMoreItems
[
	"queue is empty, reset sema signals"
availSema initSignals
]

Class AtomicSharedQueue >> waitForNewItems
[
availSema wait
]

Metaclass
	name: #AtomicSharedQueue;
	instanceVariables: #().

