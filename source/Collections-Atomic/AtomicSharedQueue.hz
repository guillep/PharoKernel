AtomicSharedQueue
	superclass: #WaitfreeQueue;
	instanceVariables: #(#availSema );
	package: #'Collections-Atomic'.

AtomicSharedQueue >> initialize
[
	super initialize.
	availSema := Semaphore new
]

AtomicSharedQueue >> next
[
	"Fetch the next item from queue. If queue is locked or empty, block the sender until operation can complete"

	| result |
	[ | keepWaiting |
	keepWaiting := false.
	result := self nextIfNone: [ keepWaiting := true ].
	keepWaiting ]
		whileTrue: [ self waitForNewItems ].
	^ result
]

AtomicSharedQueue >> signalAddedNewItem
[
	availSema signal
]

AtomicSharedQueue >> signalNoMoreItems
[
	"queue is empty, reset sema signals"

	availSema consumeAllSignals
]

AtomicSharedQueue >> waitForNewItems
[
	availSema wait
]

redQueue >> waitForNewItems
[waitForNewItems
	availSema wait
]

